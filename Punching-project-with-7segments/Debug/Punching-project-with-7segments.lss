
Punching-project-with-7segments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00005416  000054aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000378  00800172  00800172  0000551c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000551c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  000055b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000694d  00000000  00000000  00005988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000161b  00000000  00000000  0000c2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000363c  00000000  00000000  0000d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001250  00000000  00000000  00010f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000131d  00000000  00000000  0001217c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000880d  00000000  00000000  00013499  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d0  00000000  00000000  0001bca6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__ctors_end>
       4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
       8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
       c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      2c:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__vector_11>
      30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      48:	0c 94 48 25 	jmp	0x4a90	; 0x4a90 <__vector_18>
      4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	65 72       	andi	r22, 0x25	; 37
      6a:	72 6f       	ori	r23, 0xF2	; 242
      6c:	72 20       	and	r7, r2
      6e:	77 72       	andi	r23, 0x27	; 39
      70:	69 74       	andi	r22, 0x49	; 73
      72:	69 6e       	ori	r22, 0xE9	; 233
      74:	67 20       	and	r6, r7
      76:	74 6f       	ori	r23, 0xF4	; 244
      78:	20 66       	ori	r18, 0x60	; 96
      7a:	69 6c       	ori	r22, 0xC9	; 201
      7c:	65 0a       	sbc	r6, r21
	...

0000007f <__c.2757>:
      7f:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
      8f:	20 00                                                .

00000091 <__c.2755>:
      91:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

000000a0 <__c.2745>:
      a0:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
      b0:	65 63 74 6f 72 79 20 44 6f 6e 65 0a 00              ectory Done..

000000bd <__c.2743>:
      bd:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
      cd:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

000000dc <__c.2741>:
      dc:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
      ec:	65 6d 20 20 53 75 63 63 65 65 64 65 64 2e 0a 00     em  Succeeded...

000000fc <__c.2739>:
      fc:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     10c:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

00000117 <__c.2737>:
     117:	4f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     Opening partitio
     127:	6e 20 53 75 63 63 65 65 64 65 64 2e 0a 00           n Succeeded...

00000135 <__c.2735>:
     135:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     145:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

0000014f <__c.2733>:
     14f:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     15f:	61 74 69 6f 6e 20 53 75 63 63 65 65 64 65 64 2e     ation Succeeded.
     16f:	0a 00                                               ..

00000171 <__c.2731>:
     171:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     181:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

0000018f <__c.2718>:
     18f:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     19f:	69 6c 65 3a 20 00                                   ile: .

000001a5 <__c.2716>:
     1a5:	65 72 72 6f 72 20 64 65 6c 65 74 69 6e 67 20 66     error deleting f
     1b5:	69 6c 65 3a 20 00                                   ile: .

000001bb <__c.2670>:
     1bb:	57 65 6c 63 6f 6d 65 2e 2e 2e 00                    Welcome....

000001c6 <_digit2segments>:
     1c6:	3f 06 5b 4f 66 6d 7d 07 7f 6f                       ?.[Ofm}..o

000001d0 <_digit2_2segments>:
     1d0:	3f 06 5b 4f 66 6d 7d 07 7f 6f                       ?.[Ofm}..o

000001da <__ctors_end>:
     1da:	11 24       	eor	r1, r1
     1dc:	1f be       	out	0x3f, r1	; 63
     1de:	cf ef       	ldi	r28, 0xFF	; 255
     1e0:	d8 e0       	ldi	r29, 0x08	; 8
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	cd bf       	out	0x3d, r28	; 61

000001e6 <__do_copy_data>:
     1e6:	11 e0       	ldi	r17, 0x01	; 1
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	e6 e1       	ldi	r30, 0x16	; 22
     1ee:	f4 e5       	ldi	r31, 0x54	; 84
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <__do_copy_data+0x10>
     1f2:	05 90       	lpm	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	a2 37       	cpi	r26, 0x72	; 114
     1f8:	b1 07       	cpc	r27, r17
     1fa:	d9 f7       	brne	.-10     	; 0x1f2 <__do_copy_data+0xc>

000001fc <__do_clear_bss>:
     1fc:	24 e0       	ldi	r18, 0x04	; 4
     1fe:	a2 e7       	ldi	r26, 0x72	; 114
     200:	b1 e0       	ldi	r27, 0x01	; 1
     202:	01 c0       	rjmp	.+2      	; 0x206 <.do_clear_bss_start>

00000204 <.do_clear_bss_loop>:
     204:	1d 92       	st	X+, r1

00000206 <.do_clear_bss_start>:
     206:	aa 3e       	cpi	r26, 0xEA	; 234
     208:	b2 07       	cpc	r27, r18
     20a:	e1 f7       	brne	.-8      	; 0x204 <.do_clear_bss_loop>
     20c:	0e 94 a6 1b 	call	0x374c	; 0x374c <main>
     210:	0c 94 09 2a 	jmp	0x5412	; 0x5412 <_exit>

00000214 <__bad_interrupt>:
     214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <read16>:
 * \param[in] p Pointer from where to read the integer.
 * \returns The 16-bit integer read from memory.
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
     218:	fc 01       	movw	r30, r24
     21a:	21 81       	ldd	r18, Z+1	; 0x01
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	32 2f       	mov	r19, r18
     220:	22 27       	eor	r18, r18
     222:	80 81       	ld	r24, Z
           (((uint16_t) p[0]) << 0);
}
     224:	a9 01       	movw	r20, r18
     226:	48 2b       	or	r20, r24
     228:	ca 01       	movw	r24, r20
     22a:	08 95       	ret

0000022c <read32>:
 *
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
     22c:	fc 01       	movw	r30, r24
    return (((uint32_t) p[3]) << 24) |
     22e:	23 81       	ldd	r18, Z+3	; 0x03
     230:	62 81       	ldd	r22, Z+2	; 0x02
     232:	86 2f       	mov	r24, r22
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	a0 e0       	ldi	r26, 0x00	; 0
     238:	b0 e0       	ldi	r27, 0x00	; 0
     23a:	dc 01       	movw	r26, r24
     23c:	99 27       	eor	r25, r25
     23e:	88 27       	eor	r24, r24
     240:	b2 2b       	or	r27, r18
     242:	20 81       	ld	r18, Z
     244:	82 2b       	or	r24, r18
     246:	21 81       	ldd	r18, Z+1	; 0x01
     248:	bc 01       	movw	r22, r24
     24a:	cd 01       	movw	r24, r26
     24c:	72 2b       	or	r23, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
}
     24e:	08 95       	ret

00000250 <write16>:
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 16-bit integer to write.
 */
void write16(uint8_t* p, uint16_t i)
{
    p[1] = (uint8_t) ((i & 0xff00) >> 8);
     250:	fc 01       	movw	r30, r24
     252:	71 83       	std	Z+1, r23	; 0x01
    p[0] = (uint8_t) ((i & 0x00ff) >> 0);
     254:	60 83       	st	Z, r22
     256:	08 95       	ret

00000258 <write32>:
 *
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 32-bit integer to write.
 */
void write32(uint8_t* p, uint32_t i)
{
     258:	fc 01       	movw	r30, r24
    p[3] = (uint8_t) ((i & 0xff000000) >> 24);
     25a:	73 83       	std	Z+3, r23	; 0x03
    p[2] = (uint8_t) ((i & 0x00ff0000) >> 16);
     25c:	62 83       	std	Z+2, r22	; 0x02
    p[1] = (uint8_t) ((i & 0x0000ff00) >>  8);
     25e:	51 83       	std	Z+1, r21	; 0x01
    p[0] = (uint8_t) ((i & 0x000000ff) >>  0);
     260:	40 83       	st	Z, r20
     262:	08 95       	ret

00000264 <fat_get_next_cluster>:
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
}
     264:	8f 92       	push	r8
     266:	9f 92       	push	r9
     268:	af 92       	push	r10
     26a:	bf 92       	push	r11
     26c:	cf 92       	push	r12
     26e:	df 92       	push	r13
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	00 d0       	rcall	.+0      	; 0x27e <fat_get_next_cluster+0x1a>
     27e:	00 d0       	rcall	.+0      	; 0x280 <fat_get_next_cluster+0x1c>
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	00 97       	sbiw	r24, 0x00	; 0
     286:	09 f4       	brne	.+2      	; 0x28a <fat_get_next_cluster+0x26>
     288:	85 c0       	rjmp	.+266    	; 0x394 <fat_get_next_cluster+0x130>
     28a:	42 30       	cpi	r20, 0x02	; 2
     28c:	51 05       	cpc	r21, r1
     28e:	61 05       	cpc	r22, r1
     290:	71 05       	cpc	r23, r1
     292:	08 f4       	brcc	.+2      	; 0x296 <fat_get_next_cluster+0x32>
     294:	84 c0       	rjmp	.+264    	; 0x39e <fat_get_next_cluster+0x13a>
     296:	fc 01       	movw	r30, r24
     298:	a0 81       	ld	r26, Z
     29a:	b1 81       	ldd	r27, Z+1	; 0x01
     29c:	18 96       	adiw	r26, 0x08	; 8
     29e:	8c 91       	ld	r24, X
     2a0:	18 97       	sbiw	r26, 0x08	; 8
     2a2:	8b 30       	cpi	r24, 0x0B	; 11
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <fat_get_next_cluster+0x44>
     2a6:	40 c0       	rjmp	.+128    	; 0x328 <fat_get_next_cluster+0xc4>
     2a8:	4a 01       	movw	r8, r20
     2aa:	5b 01       	movw	r10, r22
     2ac:	24 2f       	mov	r18, r20
     2ae:	39 2d       	mov	r19, r9
     2b0:	4a 2d       	mov	r20, r10
     2b2:	5b 2d       	mov	r21, r11
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	02 e0       	ldi	r16, 0x02	; 2
     2be:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
     2c2:	a2 84       	ldd	r10, Z+10	; 0x0a
     2c4:	b3 84       	ldd	r11, Z+11	; 0x0b
     2c6:	c4 84       	ldd	r12, Z+12	; 0x0c
     2c8:	d5 84       	ldd	r13, Z+13	; 0x0d
     2ca:	e6 84       	ldd	r14, Z+14	; 0x0e
     2cc:	f7 84       	ldd	r15, Z+15	; 0x0f
     2ce:	00 89       	ldd	r16, Z+16	; 0x10
     2d0:	11 89       	ldd	r17, Z+17	; 0x11
     2d2:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
     2d6:	ed 91       	ld	r30, X+
     2d8:	fc 91       	ld	r31, X
     2da:	68 94       	set
     2dc:	ee 24       	eor	r14, r14
     2de:	e2 f8       	bld	r14, 2
     2e0:	f1 2c       	mov	r15, r1
     2e2:	8e 01       	movw	r16, r28
     2e4:	0f 5f       	subi	r16, 0xFF	; 255
     2e6:	1f 4f       	sbci	r17, 0xFF	; 255
     2e8:	09 95       	icall
     2ea:	88 23       	and	r24, r24
     2ec:	c1 f0       	breq	.+48     	; 0x31e <fat_get_next_cluster+0xba>
     2ee:	c9 80       	ldd	r12, Y+1	; 0x01
     2f0:	da 80       	ldd	r13, Y+2	; 0x02
     2f2:	eb 80       	ldd	r14, Y+3	; 0x03
     2f4:	fc 80       	ldd	r15, Y+4	; 0x04
     2f6:	c1 14       	cp	r12, r1
     2f8:	d1 04       	cpc	r13, r1
     2fa:	e1 04       	cpc	r14, r1
     2fc:	f1 04       	cpc	r15, r1
     2fe:	79 f0       	breq	.+30     	; 0x31e <fat_get_next_cluster+0xba>
     300:	d7 01       	movw	r26, r14
     302:	c6 01       	movw	r24, r12
     304:	80 5f       	subi	r24, 0xF0	; 240
     306:	9f 4f       	sbci	r25, 0xFF	; 255
     308:	af 4f       	sbci	r26, 0xFF	; 255
     30a:	bf 40       	sbci	r27, 0x0F	; 15
     30c:	40 97       	sbiw	r24, 0x10	; 16
     30e:	a1 05       	cpc	r26, r1
     310:	b1 05       	cpc	r27, r1
     312:	28 f0       	brcs	.+10     	; 0x31e <fat_get_next_cluster+0xba>
     314:	6c 2d       	mov	r22, r12
     316:	7d 2d       	mov	r23, r13
     318:	8e 2d       	mov	r24, r14
     31a:	9f 2d       	mov	r25, r15
     31c:	44 c0       	rjmp	.+136    	; 0x3a6 <fat_get_next_cluster+0x142>
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	3f c0       	rjmp	.+126    	; 0x3a6 <fat_get_next_cluster+0x142>
     328:	4a 01       	movw	r8, r20
     32a:	5b 01       	movw	r10, r22
     32c:	24 2f       	mov	r18, r20
     32e:	39 2d       	mov	r19, r9
     330:	4a 2d       	mov	r20, r10
     332:	5b 2d       	mov	r21, r11
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	01 e0       	ldi	r16, 0x01	; 1
     33e:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
     342:	a2 84       	ldd	r10, Z+10	; 0x0a
     344:	b3 84       	ldd	r11, Z+11	; 0x0b
     346:	c4 84       	ldd	r12, Z+12	; 0x0c
     348:	d5 84       	ldd	r13, Z+13	; 0x0d
     34a:	e6 84       	ldd	r14, Z+14	; 0x0e
     34c:	f7 84       	ldd	r15, Z+15	; 0x0f
     34e:	00 89       	ldd	r16, Z+16	; 0x10
     350:	11 89       	ldd	r17, Z+17	; 0x11
     352:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
     356:	ed 91       	ld	r30, X+
     358:	fc 91       	ld	r31, X
     35a:	68 94       	set
     35c:	ee 24       	eor	r14, r14
     35e:	e1 f8       	bld	r14, 1
     360:	f1 2c       	mov	r15, r1
     362:	8e 01       	movw	r16, r28
     364:	0f 5f       	subi	r16, 0xFF	; 255
     366:	1f 4f       	sbci	r17, 0xFF	; 255
     368:	09 95       	icall
     36a:	88 23       	and	r24, r24
     36c:	71 f0       	breq	.+28     	; 0x38a <fat_get_next_cluster+0x126>
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	9a 81       	ldd	r25, Y+2	; 0x02
     372:	6c 01       	movw	r12, r24
     374:	e1 2c       	mov	r14, r1
     376:	f1 2c       	mov	r15, r1
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	8f 3e       	cpi	r24, 0xEF	; 239
     37c:	9f 4f       	sbci	r25, 0xFF	; 255
     37e:	28 f4       	brcc	.+10     	; 0x38a <fat_get_next_cluster+0x126>
     380:	6c 2d       	mov	r22, r12
     382:	7d 2d       	mov	r23, r13
     384:	8e 2d       	mov	r24, r14
     386:	9f 2d       	mov	r25, r15
     388:	0e c0       	rjmp	.+28     	; 0x3a6 <fat_get_next_cluster+0x142>
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	09 c0       	rjmp	.+18     	; 0x3a6 <fat_get_next_cluster+0x142>
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	04 c0       	rjmp	.+8      	; 0x3a6 <fat_get_next_cluster+0x142>
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	cf 90       	pop	r12
     3be:	bf 90       	pop	r11
     3c0:	af 90       	pop	r10
     3c2:	9f 90       	pop	r9
     3c4:	8f 90       	pop	r8
     3c6:	08 95       	ret

000003c8 <fat_free_clusters>:
     3c8:	2f 92       	push	r2
     3ca:	3f 92       	push	r3
     3cc:	4f 92       	push	r4
     3ce:	5f 92       	push	r5
     3d0:	6f 92       	push	r6
     3d2:	7f 92       	push	r7
     3d4:	8f 92       	push	r8
     3d6:	9f 92       	push	r9
     3d8:	af 92       	push	r10
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
     3f0:	62 97       	sbiw	r28, 0x12	; 18
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61
     3fc:	3c 01       	movw	r6, r24
     3fe:	1a 01       	movw	r2, r20
     400:	2b 01       	movw	r4, r22
     402:	89 2b       	or	r24, r25
     404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	e8 c0       	rjmp	.+464    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     408:	42 30       	cpi	r20, 0x02	; 2
     40a:	51 05       	cpc	r21, r1
     40c:	61 05       	cpc	r22, r1
     40e:	71 05       	cpc	r23, r1
     410:	08 f4       	brcc	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	e4 c0       	rjmp	.+456    	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     414:	d3 01       	movw	r26, r6
     416:	1a 96       	adiw	r26, 0x0a	; 10
     418:	bc 91       	ld	r27, X
     41a:	bd 83       	std	Y+5, r27	; 0x05
     41c:	f3 01       	movw	r30, r6
     41e:	f3 85       	ldd	r31, Z+11	; 0x0b
     420:	fe 83       	std	Y+6, r31	; 0x06
     422:	d3 01       	movw	r26, r6
     424:	1c 96       	adiw	r26, 0x0c	; 12
     426:	bc 91       	ld	r27, X
     428:	bf 83       	std	Y+7, r27	; 0x07
     42a:	f3 01       	movw	r30, r6
     42c:	f5 85       	ldd	r31, Z+13	; 0x0d
     42e:	f8 87       	std	Y+8, r31	; 0x08
     430:	d3 01       	movw	r26, r6
     432:	1e 96       	adiw	r26, 0x0e	; 14
     434:	bc 91       	ld	r27, X
     436:	b9 87       	std	Y+9, r27	; 0x09
     438:	f3 01       	movw	r30, r6
     43a:	f7 85       	ldd	r31, Z+15	; 0x0f
     43c:	fa 87       	std	Y+10, r31	; 0x0a
     43e:	d3 01       	movw	r26, r6
     440:	50 96       	adiw	r26, 0x10	; 16
     442:	bc 91       	ld	r27, X
     444:	bb 87       	std	Y+11, r27	; 0x0b
     446:	f3 01       	movw	r30, r6
     448:	f1 89       	ldd	r31, Z+17	; 0x11
     44a:	fc 87       	std	Y+12, r31	; 0x0c
     44c:	d3 01       	movw	r26, r6
     44e:	ed 91       	ld	r30, X+
     450:	fc 91       	ld	r31, X
     452:	80 85       	ldd	r24, Z+8	; 0x08
     454:	8b 30       	cpi	r24, 0x0B	; 11
     456:	31 f0       	breq	.+12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     458:	45 2b       	or	r20, r21
     45a:	46 2b       	or	r20, r22
     45c:	47 2b       	or	r20, r23
     45e:	09 f0       	breq	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     460:	5d c0       	rjmp	.+186    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     462:	b4 c0       	rjmp	.+360    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     464:	45 2b       	or	r20, r21
     466:	46 2b       	or	r20, r22
     468:	47 2b       	or	r20, r23
     46a:	19 f4       	brne	.+6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     46c:	51 c0       	rjmp	.+162    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     46e:	14 01       	movw	r2, r8
     470:	25 01       	movw	r4, r10
     472:	52 01       	movw	r10, r4
     474:	41 01       	movw	r8, r2
     476:	22 2d       	mov	r18, r2
     478:	39 2d       	mov	r19, r9
     47a:	4a 2d       	mov	r20, r10
     47c:	5b 2d       	mov	r21, r11
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	02 e0       	ldi	r16, 0x02	; 2
     488:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
     48c:	ad 80       	ldd	r10, Y+5	; 0x05
     48e:	be 80       	ldd	r11, Y+6	; 0x06
     490:	cf 80       	ldd	r12, Y+7	; 0x07
     492:	d8 84       	ldd	r13, Y+8	; 0x08
     494:	e9 84       	ldd	r14, Y+9	; 0x09
     496:	fa 84       	ldd	r15, Y+10	; 0x0a
     498:	0b 85       	ldd	r16, Y+11	; 0x0b
     49a:	1c 85       	ldd	r17, Y+12	; 0x0c
     49c:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
     4a0:	d2 2e       	mov	r13, r18
     4a2:	c3 2e       	mov	r12, r19
     4a4:	4d 87       	std	Y+13, r20	; 0x0d
     4a6:	5e 87       	std	Y+14, r21	; 0x0e
     4a8:	6f 87       	std	Y+15, r22	; 0x0f
     4aa:	78 8b       	std	Y+16, r23	; 0x10
     4ac:	89 8b       	std	Y+17, r24	; 0x11
     4ae:	9a 8b       	std	Y+18, r25	; 0x12
     4b0:	d3 01       	movw	r26, r6
     4b2:	ed 91       	ld	r30, X+
     4b4:	fc 91       	ld	r31, X
     4b6:	01 90       	ld	r0, Z+
     4b8:	f0 81       	ld	r31, Z
     4ba:	e0 2d       	mov	r30, r0
     4bc:	68 94       	set
     4be:	ee 24       	eor	r14, r14
     4c0:	e2 f8       	bld	r14, 2
     4c2:	f1 2c       	mov	r15, r1
     4c4:	8e 01       	movw	r16, r28
     4c6:	0f 5f       	subi	r16, 0xFF	; 255
     4c8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ca:	09 95       	icall
     4cc:	88 23       	and	r24, r24
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4d0:	2a c1       	rjmp	.+596    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     4d2:	89 80       	ldd	r8, Y+1	; 0x01
     4d4:	9a 80       	ldd	r9, Y+2	; 0x02
     4d6:	ab 80       	ldd	r10, Y+3	; 0x03
     4d8:	bc 80       	ldd	r11, Y+4	; 0x04
     4da:	81 14       	cp	r8, r1
     4dc:	91 04       	cpc	r9, r1
     4de:	a1 04       	cpc	r10, r1
     4e0:	b1 04       	cpc	r11, r1
     4e2:	c1 f0       	breq	.+48     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     4e4:	d5 01       	movw	r26, r10
     4e6:	c4 01       	movw	r24, r8
     4e8:	80 5f       	subi	r24, 0xF0	; 240
     4ea:	9f 4f       	sbci	r25, 0xFF	; 255
     4ec:	af 4f       	sbci	r26, 0xFF	; 255
     4ee:	bf 40       	sbci	r27, 0x0F	; 15
     4f0:	08 97       	sbiw	r24, 0x08	; 8
     4f2:	a1 05       	cpc	r26, r1
     4f4:	b1 05       	cpc	r27, r1
     4f6:	80 f0       	brcs	.+32     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     4f8:	d5 01       	movw	r26, r10
     4fa:	c4 01       	movw	r24, r8
     4fc:	88 5f       	subi	r24, 0xF8	; 248
     4fe:	9f 4f       	sbci	r25, 0xFF	; 255
     500:	af 4f       	sbci	r26, 0xFF	; 255
     502:	bf 40       	sbci	r27, 0x0F	; 15
     504:	08 97       	sbiw	r24, 0x08	; 8
     506:	a1 05       	cpc	r26, r1
     508:	b1 05       	cpc	r27, r1
     50a:	08 f4       	brcc	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     50c:	84 c0       	rjmp	.+264    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     50e:	a9 c0       	rjmp	.+338    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	09 c1       	rjmp	.+530    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	07 c1       	rjmp	.+526    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	05 c1       	rjmp	.+522    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     51c:	52 01       	movw	r10, r4
     51e:	41 01       	movw	r8, r2
     520:	22 2d       	mov	r18, r2
     522:	39 2d       	mov	r19, r9
     524:	4a 2d       	mov	r20, r10
     526:	5b 2d       	mov	r21, r11
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	01 e0       	ldi	r16, 0x01	; 1
     532:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
     536:	ad 80       	ldd	r10, Y+5	; 0x05
     538:	be 80       	ldd	r11, Y+6	; 0x06
     53a:	cf 80       	ldd	r12, Y+7	; 0x07
     53c:	d8 84       	ldd	r13, Y+8	; 0x08
     53e:	e9 84       	ldd	r14, Y+9	; 0x09
     540:	fa 84       	ldd	r15, Y+10	; 0x0a
     542:	0b 85       	ldd	r16, Y+11	; 0x0b
     544:	1c 85       	ldd	r17, Y+12	; 0x0c
     546:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
     54a:	d2 2e       	mov	r13, r18
     54c:	c3 2e       	mov	r12, r19
     54e:	44 2e       	mov	r4, r20
     550:	55 2e       	mov	r5, r21
     552:	86 2e       	mov	r8, r22
     554:	97 2e       	mov	r9, r23
     556:	a8 2e       	mov	r10, r24
     558:	b9 2e       	mov	r11, r25
     55a:	d3 01       	movw	r26, r6
     55c:	ed 91       	ld	r30, X+
     55e:	fc 91       	ld	r31, X
     560:	01 90       	ld	r0, Z+
     562:	f0 81       	ld	r31, Z
     564:	e0 2d       	mov	r30, r0
     566:	68 94       	set
     568:	ee 24       	eor	r14, r14
     56a:	e1 f8       	bld	r14, 1
     56c:	f1 2c       	mov	r15, r1
     56e:	8e 01       	movw	r16, r28
     570:	0f 5f       	subi	r16, 0xFF	; 255
     572:	1f 4f       	sbci	r17, 0xFF	; 255
     574:	09 95       	icall
     576:	88 23       	and	r24, r24
     578:	09 f4       	brne	.+2      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     57a:	d5 c0       	rjmp	.+426    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     57c:	29 80       	ldd	r2, Y+1	; 0x01
     57e:	3a 80       	ldd	r3, Y+2	; 0x02
     580:	21 14       	cp	r2, r1
     582:	31 04       	cpc	r3, r1
     584:	29 f1       	breq	.+74     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     586:	c1 01       	movw	r24, r2
     588:	40 96       	adiw	r24, 0x10	; 16
     58a:	08 97       	sbiw	r24, 0x08	; 8
     58c:	18 f1       	brcs	.+70     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     58e:	b8 ef       	ldi	r27, 0xF8	; 248
     590:	2b 16       	cp	r2, r27
     592:	bf ef       	ldi	r27, 0xFF	; 255
     594:	3b 06       	cpc	r3, r27
     596:	08 f0       	brcs	.+2      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     598:	6e c0       	rjmp	.+220    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     59a:	1a 82       	std	Y+2, r1	; 0x02
     59c:	19 82       	std	Y+1, r1	; 0x01
     59e:	d3 01       	movw	r26, r6
     5a0:	ed 91       	ld	r30, X+
     5a2:	fc 91       	ld	r31, X
     5a4:	04 80       	ldd	r0, Z+4	; 0x04
     5a6:	f5 81       	ldd	r31, Z+5	; 0x05
     5a8:	e0 2d       	mov	r30, r0
     5aa:	2d 2d       	mov	r18, r13
     5ac:	3c 2d       	mov	r19, r12
     5ae:	44 2d       	mov	r20, r4
     5b0:	55 2d       	mov	r21, r5
     5b2:	68 2d       	mov	r22, r8
     5b4:	79 2d       	mov	r23, r9
     5b6:	8a 2d       	mov	r24, r10
     5b8:	9b 2d       	mov	r25, r11
     5ba:	09 95       	icall
     5bc:	41 2c       	mov	r4, r1
     5be:	51 2c       	mov	r5, r1
     5c0:	21 14       	cp	r2, r1
     5c2:	31 04       	cpc	r3, r1
     5c4:	41 04       	cpc	r4, r1
     5c6:	51 04       	cpc	r5, r1
     5c8:	09 f0       	breq	.+2      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5ca:	a8 cf       	rjmp	.-176    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	ab c0       	rjmp	.+342    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	a9 c0       	rjmp	.+338    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	a7 c0       	rjmp	.+334    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	a5 c0       	rjmp	.+330    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	a3 c0       	rjmp	.+326    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     5e0:	19 82       	std	Y+1, r1	; 0x01
     5e2:	1a 82       	std	Y+2, r1	; 0x02
     5e4:	1b 82       	std	Y+3, r1	; 0x03
     5e6:	1c 82       	std	Y+4, r1	; 0x04
     5e8:	d3 01       	movw	r26, r6
     5ea:	ed 91       	ld	r30, X+
     5ec:	fc 91       	ld	r31, X
     5ee:	04 80       	ldd	r0, Z+4	; 0x04
     5f0:	f5 81       	ldd	r31, Z+5	; 0x05
     5f2:	e0 2d       	mov	r30, r0
     5f4:	68 94       	set
     5f6:	ee 24       	eor	r14, r14
     5f8:	e2 f8       	bld	r14, 2
     5fa:	f1 2c       	mov	r15, r1
     5fc:	8e 01       	movw	r16, r28
     5fe:	0f 5f       	subi	r16, 0xFF	; 255
     600:	1f 4f       	sbci	r17, 0xFF	; 255
     602:	2d 2d       	mov	r18, r13
     604:	3c 2d       	mov	r19, r12
     606:	4d 85       	ldd	r20, Y+13	; 0x0d
     608:	5e 85       	ldd	r21, Y+14	; 0x0e
     60a:	6f 85       	ldd	r22, Y+15	; 0x0f
     60c:	78 89       	ldd	r23, Y+16	; 0x10
     60e:	89 89       	ldd	r24, Y+17	; 0x11
     610:	9a 89       	ldd	r25, Y+18	; 0x12
     612:	09 95       	icall
     614:	7d cf       	rjmp	.-262    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     616:	f3 01       	movw	r30, r6
     618:	86 a5       	ldd	r24, Z+46	; 0x2e
     61a:	97 a5       	ldd	r25, Z+47	; 0x2f
     61c:	a0 a9       	ldd	r26, Z+48	; 0x30
     61e:	b1 a9       	ldd	r27, Z+49	; 0x31
     620:	89 2b       	or	r24, r25
     622:	8a 2b       	or	r24, r26
     624:	8b 2b       	or	r24, r27
     626:	09 f4       	brne	.+2      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     628:	5f c0       	rjmp	.+190    	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
     62a:	da cf       	rjmp	.-76     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     62c:	19 82       	std	Y+1, r1	; 0x01
     62e:	1a 82       	std	Y+2, r1	; 0x02
     630:	1b 82       	std	Y+3, r1	; 0x03
     632:	1c 82       	std	Y+4, r1	; 0x04
     634:	d3 01       	movw	r26, r6
     636:	ed 91       	ld	r30, X+
     638:	fc 91       	ld	r31, X
     63a:	04 80       	ldd	r0, Z+4	; 0x04
     63c:	f5 81       	ldd	r31, Z+5	; 0x05
     63e:	e0 2d       	mov	r30, r0
     640:	68 94       	set
     642:	ee 24       	eor	r14, r14
     644:	e2 f8       	bld	r14, 2
     646:	f1 2c       	mov	r15, r1
     648:	8e 01       	movw	r16, r28
     64a:	0f 5f       	subi	r16, 0xFF	; 255
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
     64e:	2d 2d       	mov	r18, r13
     650:	3c 2d       	mov	r19, r12
     652:	4d 85       	ldd	r20, Y+13	; 0x0d
     654:	5e 85       	ldd	r21, Y+14	; 0x0e
     656:	6f 85       	ldd	r22, Y+15	; 0x0f
     658:	78 89       	ldd	r23, Y+16	; 0x10
     65a:	89 89       	ldd	r24, Y+17	; 0x11
     65c:	9a 89       	ldd	r25, Y+18	; 0x12
     65e:	09 95       	icall
     660:	06 cf       	rjmp	.-500    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     662:	f3 01       	movw	r30, r6
     664:	86 a5       	ldd	r24, Z+46	; 0x2e
     666:	97 a5       	ldd	r25, Z+47	; 0x2f
     668:	a0 a9       	ldd	r26, Z+48	; 0x30
     66a:	b1 a9       	ldd	r27, Z+49	; 0x31
     66c:	89 2b       	or	r24, r25
     66e:	8a 2b       	or	r24, r26
     670:	8b 2b       	or	r24, r27
     672:	e1 f6       	brne	.-72     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     674:	19 c0       	rjmp	.+50     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
     676:	1a 82       	std	Y+2, r1	; 0x02
     678:	19 82       	std	Y+1, r1	; 0x01
     67a:	d3 01       	movw	r26, r6
     67c:	ed 91       	ld	r30, X+
     67e:	fc 91       	ld	r31, X
     680:	04 80       	ldd	r0, Z+4	; 0x04
     682:	f5 81       	ldd	r31, Z+5	; 0x05
     684:	e0 2d       	mov	r30, r0
     686:	68 94       	set
     688:	ee 24       	eor	r14, r14
     68a:	e1 f8       	bld	r14, 1
     68c:	f1 2c       	mov	r15, r1
     68e:	8e 01       	movw	r16, r28
     690:	0f 5f       	subi	r16, 0xFF	; 255
     692:	1f 4f       	sbci	r17, 0xFF	; 255
     694:	2d 2d       	mov	r18, r13
     696:	3c 2d       	mov	r19, r12
     698:	44 2d       	mov	r20, r4
     69a:	55 2d       	mov	r21, r5
     69c:	68 2d       	mov	r22, r8
     69e:	79 2d       	mov	r23, r9
     6a0:	8a 2d       	mov	r24, r10
     6a2:	9b 2d       	mov	r25, r11
     6a4:	09 95       	icall
     6a6:	92 cf       	rjmp	.-220    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     6a8:	f3 01       	movw	r30, r6
     6aa:	26 a6       	std	Z+46, r2	; 0x2e
     6ac:	37 a6       	std	Z+47, r3	; 0x2f
     6ae:	40 aa       	std	Z+48, r4	; 0x30
     6b0:	51 aa       	std	Z+49, r5	; 0x31
     6b2:	19 82       	std	Y+1, r1	; 0x01
     6b4:	1a 82       	std	Y+2, r1	; 0x02
     6b6:	1b 82       	std	Y+3, r1	; 0x03
     6b8:	1c 82       	std	Y+4, r1	; 0x04
     6ba:	01 90       	ld	r0, Z+
     6bc:	f0 81       	ld	r31, Z
     6be:	e0 2d       	mov	r30, r0
     6c0:	04 80       	ldd	r0, Z+4	; 0x04
     6c2:	f5 81       	ldd	r31, Z+5	; 0x05
     6c4:	e0 2d       	mov	r30, r0
     6c6:	68 94       	set
     6c8:	ee 24       	eor	r14, r14
     6ca:	e2 f8       	bld	r14, 2
     6cc:	f1 2c       	mov	r15, r1
     6ce:	8e 01       	movw	r16, r28
     6d0:	0f 5f       	subi	r16, 0xFF	; 255
     6d2:	1f 4f       	sbci	r17, 0xFF	; 255
     6d4:	2d 2d       	mov	r18, r13
     6d6:	3c 2d       	mov	r19, r12
     6d8:	4d 85       	ldd	r20, Y+13	; 0x0d
     6da:	5e 85       	ldd	r21, Y+14	; 0x0e
     6dc:	6f 85       	ldd	r22, Y+15	; 0x0f
     6de:	78 89       	ldd	r23, Y+16	; 0x10
     6e0:	89 89       	ldd	r24, Y+17	; 0x11
     6e2:	9a 89       	ldd	r25, Y+18	; 0x12
     6e4:	09 95       	icall
     6e6:	c3 ce       	rjmp	.-634    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     6e8:	26 a6       	std	Z+46, r2	; 0x2e
     6ea:	37 a6       	std	Z+47, r3	; 0x2f
     6ec:	40 aa       	std	Z+48, r4	; 0x30
     6ee:	51 aa       	std	Z+49, r5	; 0x31
     6f0:	19 82       	std	Y+1, r1	; 0x01
     6f2:	1a 82       	std	Y+2, r1	; 0x02
     6f4:	1b 82       	std	Y+3, r1	; 0x03
     6f6:	1c 82       	std	Y+4, r1	; 0x04
     6f8:	01 90       	ld	r0, Z+
     6fa:	f0 81       	ld	r31, Z
     6fc:	e0 2d       	mov	r30, r0
     6fe:	04 80       	ldd	r0, Z+4	; 0x04
     700:	f5 81       	ldd	r31, Z+5	; 0x05
     702:	e0 2d       	mov	r30, r0
     704:	68 94       	set
     706:	ee 24       	eor	r14, r14
     708:	e2 f8       	bld	r14, 2
     70a:	f1 2c       	mov	r15, r1
     70c:	8e 01       	movw	r16, r28
     70e:	0f 5f       	subi	r16, 0xFF	; 255
     710:	1f 4f       	sbci	r17, 0xFF	; 255
     712:	2d 2d       	mov	r18, r13
     714:	3c 2d       	mov	r19, r12
     716:	4d 85       	ldd	r20, Y+13	; 0x0d
     718:	5e 85       	ldd	r21, Y+14	; 0x0e
     71a:	6f 85       	ldd	r22, Y+15	; 0x0f
     71c:	78 89       	ldd	r23, Y+16	; 0x10
     71e:	89 89       	ldd	r24, Y+17	; 0x11
     720:	9a 89       	ldd	r25, Y+18	; 0x12
     722:	09 95       	icall
     724:	f5 ce       	rjmp	.-534    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     726:	62 96       	adiw	r28, 0x12	; 18
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	bf 90       	pop	r11
     744:	af 90       	pop	r10
     746:	9f 90       	pop	r9
     748:	8f 90       	pop	r8
     74a:	7f 90       	pop	r7
     74c:	6f 90       	pop	r6
     74e:	5f 90       	pop	r5
     750:	4f 90       	pop	r4
     752:	3f 90       	pop	r3
     754:	2f 90       	pop	r2
     756:	08 95       	ret

00000758 <fat_append_clusters>:
     758:	2f 92       	push	r2
     75a:	3f 92       	push	r3
     75c:	4f 92       	push	r4
     75e:	5f 92       	push	r5
     760:	6f 92       	push	r6
     762:	7f 92       	push	r7
     764:	8f 92       	push	r8
     766:	9f 92       	push	r9
     768:	af 92       	push	r10
     76a:	bf 92       	push	r11
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	a9 97       	sbiw	r28, 0x29	; 41
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	9b a3       	std	Y+35, r25	; 0x23
     78e:	8a a3       	std	Y+34, r24	; 0x22
     790:	4e a3       	std	Y+38, r20	; 0x26
     792:	5f a3       	std	Y+39, r21	; 0x27
     794:	68 a7       	std	Y+40, r22	; 0x28
     796:	79 a7       	std	Y+41, r23	; 0x29
     798:	0b 87       	std	Y+11, r16	; 0x0b
     79a:	1c 87       	std	Y+12, r17	; 0x0c
     79c:	2d 87       	std	Y+13, r18	; 0x0d
     79e:	3e 87       	std	Y+14, r19	; 0x0e
     7a0:	00 97       	sbiw	r24, 0x00	; 0
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <fat_append_clusters+0x4e>
     7a4:	14 c2       	rjmp	.+1064   	; 0xbce <__stack+0x2cf>
     7a6:	dc 01       	movw	r26, r24
     7a8:	ed 91       	ld	r30, X+
     7aa:	fc 91       	ld	r31, X
     7ac:	11 97       	sbiw	r26, 0x01	; 1
     7ae:	20 81       	ld	r18, Z
     7b0:	31 81       	ldd	r19, Z+1	; 0x01
     7b2:	3d 8f       	std	Y+29, r19	; 0x1d
     7b4:	2c 8f       	std	Y+28, r18	; 0x1c
     7b6:	44 81       	ldd	r20, Z+4	; 0x04
     7b8:	55 81       	ldd	r21, Z+5	; 0x05
     7ba:	5d a3       	std	Y+37, r21	; 0x25
     7bc:	4c a3       	std	Y+36, r20	; 0x24
     7be:	1a 96       	adiw	r26, 0x0a	; 10
     7c0:	5c 91       	ld	r21, X
     7c2:	1a 97       	sbiw	r26, 0x0a	; 10
     7c4:	5c 8b       	std	Y+20, r21	; 0x14
     7c6:	1b 96       	adiw	r26, 0x0b	; 11
     7c8:	8c 91       	ld	r24, X
     7ca:	1b 97       	sbiw	r26, 0x0b	; 11
     7cc:	8d 8b       	std	Y+21, r24	; 0x15
     7ce:	1c 96       	adiw	r26, 0x0c	; 12
     7d0:	9c 91       	ld	r25, X
     7d2:	1c 97       	sbiw	r26, 0x0c	; 12
     7d4:	9e 8b       	std	Y+22, r25	; 0x16
     7d6:	1d 96       	adiw	r26, 0x0d	; 13
     7d8:	ac 91       	ld	r26, X
     7da:	af 8b       	std	Y+23, r26	; 0x17
     7dc:	aa a1       	ldd	r26, Y+34	; 0x22
     7de:	bb a1       	ldd	r27, Y+35	; 0x23
     7e0:	1e 96       	adiw	r26, 0x0e	; 14
     7e2:	bc 91       	ld	r27, X
     7e4:	b8 8f       	std	Y+24, r27	; 0x18
     7e6:	aa a1       	ldd	r26, Y+34	; 0x22
     7e8:	bb a1       	ldd	r27, Y+35	; 0x23
     7ea:	1f 96       	adiw	r26, 0x0f	; 15
     7ec:	bc 91       	ld	r27, X
     7ee:	b9 8f       	std	Y+25, r27	; 0x19
     7f0:	aa a1       	ldd	r26, Y+34	; 0x22
     7f2:	bb a1       	ldd	r27, Y+35	; 0x23
     7f4:	50 96       	adiw	r26, 0x10	; 16
     7f6:	bc 91       	ld	r27, X
     7f8:	ba 8f       	std	Y+26, r27	; 0x1a
     7fa:	aa a1       	ldd	r26, Y+34	; 0x22
     7fc:	bb a1       	ldd	r27, Y+35	; 0x23
     7fe:	51 96       	adiw	r26, 0x11	; 17
     800:	bc 91       	ld	r27, X
     802:	bb 8f       	std	Y+27, r27	; 0x1b
     804:	aa a1       	ldd	r26, Y+34	; 0x22
     806:	bb a1       	ldd	r27, Y+35	; 0x23
     808:	9e 96       	adiw	r26, 0x2e	; 46
     80a:	4d 90       	ld	r4, X+
     80c:	5d 90       	ld	r5, X+
     80e:	6d 90       	ld	r6, X+
     810:	7c 90       	ld	r7, X
     812:	d1 97       	sbiw	r26, 0x31	; 49
     814:	b0 85       	ldd	r27, Z+8	; 0x08
     816:	bb 8b       	std	Y+19, r27	; 0x13
     818:	bb 30       	cpi	r27, 0x0B	; 11
     81a:	a9 f4       	brne	.+42     	; 0x846 <fat_append_clusters+0xee>
     81c:	ea a1       	ldd	r30, Y+34	; 0x22
     81e:	fb a1       	ldd	r31, Y+35	; 0x23
     820:	82 89       	ldd	r24, Z+18	; 0x12
     822:	93 89       	ldd	r25, Z+19	; 0x13
     824:	a4 89       	ldd	r26, Z+20	; 0x14
     826:	b5 89       	ldd	r27, Z+21	; 0x15
     828:	9c 01       	movw	r18, r24
     82a:	ad 01       	movw	r20, r26
     82c:	56 95       	lsr	r21
     82e:	47 95       	ror	r20
     830:	37 95       	ror	r19
     832:	27 95       	ror	r18
     834:	56 95       	lsr	r21
     836:	47 95       	ror	r20
     838:	37 95       	ror	r19
     83a:	27 95       	ror	r18
     83c:	2e 8f       	std	Y+30, r18	; 0x1e
     83e:	3f 8f       	std	Y+31, r19	; 0x1f
     840:	48 a3       	std	Y+32, r20	; 0x20
     842:	59 a3       	std	Y+33, r21	; 0x21
     844:	10 c0       	rjmp	.+32     	; 0x866 <fat_append_clusters+0x10e>
     846:	ea a1       	ldd	r30, Y+34	; 0x22
     848:	fb a1       	ldd	r31, Y+35	; 0x23
     84a:	82 89       	ldd	r24, Z+18	; 0x12
     84c:	93 89       	ldd	r25, Z+19	; 0x13
     84e:	a4 89       	ldd	r26, Z+20	; 0x14
     850:	b5 89       	ldd	r27, Z+21	; 0x15
     852:	9c 01       	movw	r18, r24
     854:	ad 01       	movw	r20, r26
     856:	56 95       	lsr	r21
     858:	47 95       	ror	r20
     85a:	37 95       	ror	r19
     85c:	27 95       	ror	r18
     85e:	2e 8f       	std	Y+30, r18	; 0x1e
     860:	3f 8f       	std	Y+31, r19	; 0x1f
     862:	48 a3       	std	Y+32, r20	; 0x20
     864:	59 a3       	std	Y+33, r21	; 0x21
     866:	aa a1       	ldd	r26, Y+34	; 0x22
     868:	bb a1       	ldd	r27, Y+35	; 0x23
     86a:	9e 96       	adiw	r26, 0x2e	; 46
     86c:	1d 92       	st	X+, r1
     86e:	1d 92       	st	X+, r1
     870:	1d 92       	st	X+, r1
     872:	1c 92       	st	X, r1
     874:	d1 97       	sbiw	r26, 0x31	; 49
     876:	2e 8d       	ldd	r18, Y+30	; 0x1e
     878:	3f 8d       	ldd	r19, Y+31	; 0x1f
     87a:	48 a1       	ldd	r20, Y+32	; 0x20
     87c:	59 a1       	ldd	r21, Y+33	; 0x21
     87e:	21 15       	cp	r18, r1
     880:	31 05       	cpc	r19, r1
     882:	41 05       	cpc	r20, r1
     884:	51 05       	cpc	r21, r1
     886:	09 f4       	brne	.+2      	; 0x88a <fat_append_clusters+0x132>
     888:	1d c1       	rjmp	.+570    	; 0xac4 <__stack+0x1c5>
     88a:	2f 83       	std	Y+7, r18	; 0x07
     88c:	38 87       	std	Y+8, r19	; 0x08
     88e:	49 87       	std	Y+9, r20	; 0x09
     890:	5a 87       	std	Y+10, r21	; 0x0a
     892:	1f 86       	std	Y+15, r1	; 0x0f
     894:	18 8a       	std	Y+16, r1	; 0x10
     896:	19 8a       	std	Y+17, r1	; 0x11
     898:	1a 8a       	std	Y+18, r1	; 0x12
     89a:	32 e0       	ldi	r19, 0x02	; 2
     89c:	43 16       	cp	r4, r19
     89e:	51 04       	cpc	r5, r1
     8a0:	61 04       	cpc	r6, r1
     8a2:	71 04       	cpc	r7, r1
     8a4:	78 f0       	brcs	.+30     	; 0x8c4 <fat_append_clusters+0x16c>
     8a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     8aa:	a8 a1       	ldd	r26, Y+32	; 0x20
     8ac:	b9 a1       	ldd	r27, Y+33	; 0x21
     8ae:	48 16       	cp	r4, r24
     8b0:	59 06       	cpc	r5, r25
     8b2:	6a 06       	cpc	r6, r26
     8b4:	7b 06       	cpc	r7, r27
     8b6:	58 f0       	brcs	.+22     	; 0x8ce <fat_append_clusters+0x176>
     8b8:	41 2c       	mov	r4, r1
     8ba:	51 2c       	mov	r5, r1
     8bc:	32 01       	movw	r6, r4
     8be:	68 94       	set
     8c0:	41 f8       	bld	r4, 1
     8c2:	05 c0       	rjmp	.+10     	; 0x8ce <fat_append_clusters+0x176>
     8c4:	41 2c       	mov	r4, r1
     8c6:	51 2c       	mov	r5, r1
     8c8:	32 01       	movw	r6, r4
     8ca:	68 94       	set
     8cc:	41 f8       	bld	r4, 1
     8ce:	9b 89       	ldd	r25, Y+19	; 0x13
     8d0:	9b 30       	cpi	r25, 0x0B	; 11
     8d2:	61 f5       	brne	.+88     	; 0x92c <__stack+0x2d>
     8d4:	53 01       	movw	r10, r6
     8d6:	42 01       	movw	r8, r4
     8d8:	24 2d       	mov	r18, r4
     8da:	39 2d       	mov	r19, r9
     8dc:	4a 2d       	mov	r20, r10
     8de:	5b 2d       	mov	r21, r11
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	02 e0       	ldi	r16, 0x02	; 2
     8ea:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
     8ee:	ac 88       	ldd	r10, Y+20	; 0x14
     8f0:	bd 88       	ldd	r11, Y+21	; 0x15
     8f2:	ce 88       	ldd	r12, Y+22	; 0x16
     8f4:	df 88       	ldd	r13, Y+23	; 0x17
     8f6:	e8 8c       	ldd	r14, Y+24	; 0x18
     8f8:	f9 8c       	ldd	r15, Y+25	; 0x19
     8fa:	0a 8d       	ldd	r16, Y+26	; 0x1a
     8fc:	1b 8d       	ldd	r17, Y+27	; 0x1b
     8fe:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
     902:	d2 2e       	mov	r13, r18
     904:	c3 2e       	mov	r12, r19
     906:	b4 2e       	mov	r11, r20
     908:	a5 2e       	mov	r10, r21
     90a:	96 2e       	mov	r9, r22
     90c:	87 2e       	mov	r8, r23
     90e:	38 2e       	mov	r3, r24
     910:	29 2e       	mov	r2, r25
     912:	68 94       	set
     914:	ee 24       	eor	r14, r14
     916:	e2 f8       	bld	r14, 2
     918:	f1 2c       	mov	r15, r1
     91a:	8e 01       	movw	r16, r28
     91c:	0d 5f       	subi	r16, 0xFD	; 253
     91e:	1f 4f       	sbci	r17, 0xFF	; 255
     920:	ec 8d       	ldd	r30, Y+28	; 0x1c
     922:	fd 8d       	ldd	r31, Y+29	; 0x1d
     924:	09 95       	icall
     926:	81 11       	cpse	r24, r1
     928:	6b c1       	rjmp	.+726    	; 0xc00 <__stack+0x301>
     92a:	56 c1       	rjmp	.+684    	; 0xbd8 <__stack+0x2d9>
     92c:	53 01       	movw	r10, r6
     92e:	42 01       	movw	r8, r4
     930:	24 2d       	mov	r18, r4
     932:	39 2d       	mov	r19, r9
     934:	4a 2d       	mov	r20, r10
     936:	5b 2d       	mov	r21, r11
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	01 e0       	ldi	r16, 0x01	; 1
     942:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
     946:	ac 88       	ldd	r10, Y+20	; 0x14
     948:	bd 88       	ldd	r11, Y+21	; 0x15
     94a:	ce 88       	ldd	r12, Y+22	; 0x16
     94c:	df 88       	ldd	r13, Y+23	; 0x17
     94e:	e8 8c       	ldd	r14, Y+24	; 0x18
     950:	f9 8c       	ldd	r15, Y+25	; 0x19
     952:	0a 8d       	ldd	r16, Y+26	; 0x1a
     954:	1b 8d       	ldd	r17, Y+27	; 0x1b
     956:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
     95a:	d2 2e       	mov	r13, r18
     95c:	c3 2e       	mov	r12, r19
     95e:	b4 2e       	mov	r11, r20
     960:	a5 2e       	mov	r10, r21
     962:	96 2e       	mov	r9, r22
     964:	87 2e       	mov	r8, r23
     966:	38 2e       	mov	r3, r24
     968:	29 2e       	mov	r2, r25
     96a:	68 94       	set
     96c:	ee 24       	eor	r14, r14
     96e:	e1 f8       	bld	r14, 1
     970:	f1 2c       	mov	r15, r1
     972:	8e 01       	movw	r16, r28
     974:	0f 5f       	subi	r16, 0xFF	; 255
     976:	1f 4f       	sbci	r17, 0xFF	; 255
     978:	ec 8d       	ldd	r30, Y+28	; 0x1c
     97a:	fd 8d       	ldd	r31, Y+29	; 0x1d
     97c:	09 95       	icall
     97e:	81 11       	cpse	r24, r1
     980:	49 c1       	rjmp	.+658    	; 0xc14 <__stack+0x315>
     982:	2f c1       	rjmp	.+606    	; 0xbe2 <__stack+0x2e3>
     984:	2b 85       	ldd	r18, Y+11	; 0x0b
     986:	3c 85       	ldd	r19, Y+12	; 0x0c
     988:	4d 85       	ldd	r20, Y+13	; 0x0d
     98a:	5e 85       	ldd	r21, Y+14	; 0x0e
     98c:	23 2b       	or	r18, r19
     98e:	24 2b       	or	r18, r20
     990:	25 2b       	or	r18, r21
     992:	49 f4       	brne	.+18     	; 0x9a6 <__stack+0xa7>
     994:	aa a1       	ldd	r26, Y+34	; 0x22
     996:	bb a1       	ldd	r27, Y+35	; 0x23
     998:	9e 96       	adiw	r26, 0x2e	; 46
     99a:	4d 92       	st	X+, r4
     99c:	5d 92       	st	X+, r5
     99e:	6d 92       	st	X+, r6
     9a0:	7c 92       	st	X, r7
     9a2:	d1 97       	sbiw	r26, 0x31	; 49
     9a4:	9c c0       	rjmp	.+312    	; 0xade <__stack+0x1df>
     9a6:	2f 85       	ldd	r18, Y+15	; 0x0f
     9a8:	38 89       	ldd	r19, Y+16	; 0x10
     9aa:	49 89       	ldd	r20, Y+17	; 0x11
     9ac:	5a 89       	ldd	r21, Y+18	; 0x12
     9ae:	23 2b       	or	r18, r19
     9b0:	24 2b       	or	r18, r20
     9b2:	25 2b       	or	r18, r21
     9b4:	49 f4       	brne	.+18     	; 0x9c8 <__stack+0xc9>
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	9f ef       	ldi	r25, 0xFF	; 255
     9ba:	af ef       	ldi	r26, 0xFF	; 255
     9bc:	bf e0       	ldi	r27, 0x0F	; 15
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	9c 83       	std	Y+4, r25	; 0x04
     9c2:	ad 83       	std	Y+5, r26	; 0x05
     9c4:	be 83       	std	Y+6, r27	; 0x06
     9c6:	08 c0       	rjmp	.+16     	; 0x9d8 <__stack+0xd9>
     9c8:	2f 85       	ldd	r18, Y+15	; 0x0f
     9ca:	38 89       	ldd	r19, Y+16	; 0x10
     9cc:	49 89       	ldd	r20, Y+17	; 0x11
     9ce:	5a 89       	ldd	r21, Y+18	; 0x12
     9d0:	2b 83       	std	Y+3, r18	; 0x03
     9d2:	3c 83       	std	Y+4, r19	; 0x04
     9d4:	4d 83       	std	Y+5, r20	; 0x05
     9d6:	5e 83       	std	Y+6, r21	; 0x06
     9d8:	68 94       	set
     9da:	ee 24       	eor	r14, r14
     9dc:	e2 f8       	bld	r14, 2
     9de:	f1 2c       	mov	r15, r1
     9e0:	8e 01       	movw	r16, r28
     9e2:	0d 5f       	subi	r16, 0xFD	; 253
     9e4:	1f 4f       	sbci	r17, 0xFF	; 255
     9e6:	2d 2d       	mov	r18, r13
     9e8:	3c 2d       	mov	r19, r12
     9ea:	4b 2d       	mov	r20, r11
     9ec:	5a 2d       	mov	r21, r10
     9ee:	69 2d       	mov	r22, r9
     9f0:	78 2d       	mov	r23, r8
     9f2:	83 2d       	mov	r24, r3
     9f4:	92 2d       	mov	r25, r2
     9f6:	ec a1       	ldd	r30, Y+36	; 0x24
     9f8:	fd a1       	ldd	r31, Y+37	; 0x25
     9fa:	09 95       	icall
     9fc:	81 11       	cpse	r24, r1
     9fe:	38 c0       	rjmp	.+112    	; 0xa70 <__stack+0x171>
     a00:	d9 c0       	rjmp	.+434    	; 0xbb4 <__stack+0x2b5>
     a02:	2b 85       	ldd	r18, Y+11	; 0x0b
     a04:	3c 85       	ldd	r19, Y+12	; 0x0c
     a06:	4d 85       	ldd	r20, Y+13	; 0x0d
     a08:	5e 85       	ldd	r21, Y+14	; 0x0e
     a0a:	23 2b       	or	r18, r19
     a0c:	24 2b       	or	r18, r20
     a0e:	25 2b       	or	r18, r21
     a10:	49 f4       	brne	.+18     	; 0xa24 <__stack+0x125>
     a12:	aa a1       	ldd	r26, Y+34	; 0x22
     a14:	bb a1       	ldd	r27, Y+35	; 0x23
     a16:	9e 96       	adiw	r26, 0x2e	; 46
     a18:	4d 92       	st	X+, r4
     a1a:	5d 92       	st	X+, r5
     a1c:	6d 92       	st	X+, r6
     a1e:	7c 92       	st	X, r7
     a20:	d1 97       	sbiw	r26, 0x31	; 49
     a22:	5d c0       	rjmp	.+186    	; 0xade <__stack+0x1df>
     a24:	2f 85       	ldd	r18, Y+15	; 0x0f
     a26:	38 89       	ldd	r19, Y+16	; 0x10
     a28:	49 89       	ldd	r20, Y+17	; 0x11
     a2a:	5a 89       	ldd	r21, Y+18	; 0x12
     a2c:	23 2b       	or	r18, r19
     a2e:	24 2b       	or	r18, r20
     a30:	25 2b       	or	r18, r21
     a32:	29 f4       	brne	.+10     	; 0xa3e <__stack+0x13f>
     a34:	4f ef       	ldi	r20, 0xFF	; 255
     a36:	5f ef       	ldi	r21, 0xFF	; 255
     a38:	5a 83       	std	Y+2, r21	; 0x02
     a3a:	49 83       	std	Y+1, r20	; 0x01
     a3c:	04 c0       	rjmp	.+8      	; 0xa46 <__stack+0x147>
     a3e:	8f 85       	ldd	r24, Y+15	; 0x0f
     a40:	98 89       	ldd	r25, Y+16	; 0x10
     a42:	9a 83       	std	Y+2, r25	; 0x02
     a44:	89 83       	std	Y+1, r24	; 0x01
     a46:	68 94       	set
     a48:	ee 24       	eor	r14, r14
     a4a:	e1 f8       	bld	r14, 1
     a4c:	f1 2c       	mov	r15, r1
     a4e:	8e 01       	movw	r16, r28
     a50:	0f 5f       	subi	r16, 0xFF	; 255
     a52:	1f 4f       	sbci	r17, 0xFF	; 255
     a54:	2d 2d       	mov	r18, r13
     a56:	3c 2d       	mov	r19, r12
     a58:	4b 2d       	mov	r20, r11
     a5a:	5a 2d       	mov	r21, r10
     a5c:	69 2d       	mov	r22, r9
     a5e:	78 2d       	mov	r23, r8
     a60:	83 2d       	mov	r24, r3
     a62:	92 2d       	mov	r25, r2
     a64:	ec a1       	ldd	r30, Y+36	; 0x24
     a66:	fd a1       	ldd	r31, Y+37	; 0x25
     a68:	09 95       	icall
     a6a:	88 23       	and	r24, r24
     a6c:	09 f4       	brne	.+2      	; 0xa70 <__stack+0x171>
     a6e:	a2 c0       	rjmp	.+324    	; 0xbb4 <__stack+0x2b5>
     a70:	2b 85       	ldd	r18, Y+11	; 0x0b
     a72:	3c 85       	ldd	r19, Y+12	; 0x0c
     a74:	4d 85       	ldd	r20, Y+13	; 0x0d
     a76:	5e 85       	ldd	r21, Y+14	; 0x0e
     a78:	21 50       	subi	r18, 0x01	; 1
     a7a:	31 09       	sbc	r19, r1
     a7c:	41 09       	sbc	r20, r1
     a7e:	51 09       	sbc	r21, r1
     a80:	2b 87       	std	Y+11, r18	; 0x0b
     a82:	3c 87       	std	Y+12, r19	; 0x0c
     a84:	4d 87       	std	Y+13, r20	; 0x0d
     a86:	5e 87       	std	Y+14, r21	; 0x0e
     a88:	4f 86       	std	Y+15, r4	; 0x0f
     a8a:	58 8a       	std	Y+16, r5	; 0x10
     a8c:	69 8a       	std	Y+17, r6	; 0x11
     a8e:	7a 8a       	std	Y+18, r7	; 0x12
     a90:	8f 81       	ldd	r24, Y+7	; 0x07
     a92:	98 85       	ldd	r25, Y+8	; 0x08
     a94:	a9 85       	ldd	r26, Y+9	; 0x09
     a96:	ba 85       	ldd	r27, Y+10	; 0x0a
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	a1 09       	sbc	r26, r1
     a9c:	b1 09       	sbc	r27, r1
     a9e:	8f 83       	std	Y+7, r24	; 0x07
     aa0:	98 87       	std	Y+8, r25	; 0x08
     aa2:	a9 87       	std	Y+9, r26	; 0x09
     aa4:	ba 87       	std	Y+10, r27	; 0x0a
     aa6:	9f ef       	ldi	r25, 0xFF	; 255
     aa8:	49 1a       	sub	r4, r25
     aaa:	59 0a       	sbc	r5, r25
     aac:	69 0a       	sbc	r6, r25
     aae:	79 0a       	sbc	r7, r25
     ab0:	2f 81       	ldd	r18, Y+7	; 0x07
     ab2:	38 85       	ldd	r19, Y+8	; 0x08
     ab4:	49 85       	ldd	r20, Y+9	; 0x09
     ab6:	5a 85       	ldd	r21, Y+10	; 0x0a
     ab8:	23 2b       	or	r18, r19
     aba:	24 2b       	or	r18, r20
     abc:	25 2b       	or	r18, r21
     abe:	09 f0       	breq	.+2      	; 0xac2 <__stack+0x1c3>
     ac0:	ec ce       	rjmp	.-552    	; 0x89a <fat_append_clusters+0x142>
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__stack+0x1cd>
     ac4:	1f 86       	std	Y+15, r1	; 0x0f
     ac6:	18 8a       	std	Y+16, r1	; 0x10
     ac8:	19 8a       	std	Y+17, r1	; 0x11
     aca:	1a 8a       	std	Y+18, r1	; 0x12
     acc:	8b 85       	ldd	r24, Y+11	; 0x0b
     ace:	9c 85       	ldd	r25, Y+12	; 0x0c
     ad0:	ad 85       	ldd	r26, Y+13	; 0x0d
     ad2:	be 85       	ldd	r27, Y+14	; 0x0e
     ad4:	89 2b       	or	r24, r25
     ad6:	8a 2b       	or	r24, r26
     ad8:	8b 2b       	or	r24, r27
     ada:	09 f0       	breq	.+2      	; 0xade <__stack+0x1df>
     adc:	6b c0       	rjmp	.+214    	; 0xbb4 <__stack+0x2b5>
     ade:	2e a1       	ldd	r18, Y+38	; 0x26
     ae0:	3f a1       	ldd	r19, Y+39	; 0x27
     ae2:	48 a5       	ldd	r20, Y+40	; 0x28
     ae4:	59 a5       	ldd	r21, Y+41	; 0x29
     ae6:	22 30       	cpi	r18, 0x02	; 2
     ae8:	31 05       	cpc	r19, r1
     aea:	41 05       	cpc	r20, r1
     aec:	51 05       	cpc	r21, r1
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <__stack+0x1f3>
     af0:	7d c0       	rjmp	.+250    	; 0xbec <__stack+0x2ed>
     af2:	3b 89       	ldd	r19, Y+19	; 0x13
     af4:	3b 30       	cpi	r19, 0x0B	; 11
     af6:	99 f5       	brne	.+102    	; 0xb5e <__stack+0x25f>
     af8:	8f 85       	ldd	r24, Y+15	; 0x0f
     afa:	98 89       	ldd	r25, Y+16	; 0x10
     afc:	a9 89       	ldd	r26, Y+17	; 0x11
     afe:	ba 89       	ldd	r27, Y+18	; 0x12
     b00:	8b 83       	std	Y+3, r24	; 0x03
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	ad 83       	std	Y+5, r26	; 0x05
     b06:	be 83       	std	Y+6, r27	; 0x06
     b08:	2e a1       	ldd	r18, Y+38	; 0x26
     b0a:	3f a1       	ldd	r19, Y+39	; 0x27
     b0c:	48 a5       	ldd	r20, Y+40	; 0x28
     b0e:	59 a5       	ldd	r21, Y+41	; 0x29
     b10:	49 01       	movw	r8, r18
     b12:	5a 01       	movw	r10, r20
     b14:	39 2d       	mov	r19, r9
     b16:	4a 2d       	mov	r20, r10
     b18:	5b 2d       	mov	r21, r11
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	02 e0       	ldi	r16, 0x02	; 2
     b24:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
     b28:	ac 88       	ldd	r10, Y+20	; 0x14
     b2a:	bd 88       	ldd	r11, Y+21	; 0x15
     b2c:	ce 88       	ldd	r12, Y+22	; 0x16
     b2e:	df 88       	ldd	r13, Y+23	; 0x17
     b30:	e8 8c       	ldd	r14, Y+24	; 0x18
     b32:	f9 8c       	ldd	r15, Y+25	; 0x19
     b34:	0a 8d       	ldd	r16, Y+26	; 0x1a
     b36:	1b 8d       	ldd	r17, Y+27	; 0x1b
     b38:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
     b3c:	68 94       	set
     b3e:	ee 24       	eor	r14, r14
     b40:	e2 f8       	bld	r14, 2
     b42:	f1 2c       	mov	r15, r1
     b44:	8e 01       	movw	r16, r28
     b46:	0d 5f       	subi	r16, 0xFD	; 253
     b48:	1f 4f       	sbci	r17, 0xFF	; 255
     b4a:	ec a1       	ldd	r30, Y+36	; 0x24
     b4c:	fd a1       	ldd	r31, Y+37	; 0x25
     b4e:	09 95       	icall
     b50:	88 23       	and	r24, r24
     b52:	81 f1       	breq	.+96     	; 0xbb4 <__stack+0x2b5>
     b54:	6f 85       	ldd	r22, Y+15	; 0x0f
     b56:	78 89       	ldd	r23, Y+16	; 0x10
     b58:	89 89       	ldd	r24, Y+17	; 0x11
     b5a:	9a 89       	ldd	r25, Y+18	; 0x12
     b5c:	61 c0       	rjmp	.+194    	; 0xc20 <__stack+0x321>
     b5e:	2f 85       	ldd	r18, Y+15	; 0x0f
     b60:	38 89       	ldd	r19, Y+16	; 0x10
     b62:	3a 83       	std	Y+2, r19	; 0x02
     b64:	29 83       	std	Y+1, r18	; 0x01
     b66:	8e a1       	ldd	r24, Y+38	; 0x26
     b68:	9f a1       	ldd	r25, Y+39	; 0x27
     b6a:	a8 a5       	ldd	r26, Y+40	; 0x28
     b6c:	b9 a5       	ldd	r27, Y+41	; 0x29
     b6e:	4c 01       	movw	r8, r24
     b70:	5d 01       	movw	r10, r26
     b72:	28 2f       	mov	r18, r24
     b74:	39 2d       	mov	r19, r9
     b76:	4a 2d       	mov	r20, r10
     b78:	5b 2d       	mov	r21, r11
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	01 e0       	ldi	r16, 0x01	; 1
     b84:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
     b88:	ac 88       	ldd	r10, Y+20	; 0x14
     b8a:	bd 88       	ldd	r11, Y+21	; 0x15
     b8c:	ce 88       	ldd	r12, Y+22	; 0x16
     b8e:	df 88       	ldd	r13, Y+23	; 0x17
     b90:	e8 8c       	ldd	r14, Y+24	; 0x18
     b92:	f9 8c       	ldd	r15, Y+25	; 0x19
     b94:	0a 8d       	ldd	r16, Y+26	; 0x1a
     b96:	1b 8d       	ldd	r17, Y+27	; 0x1b
     b98:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
     b9c:	68 94       	set
     b9e:	ee 24       	eor	r14, r14
     ba0:	e1 f8       	bld	r14, 1
     ba2:	f1 2c       	mov	r15, r1
     ba4:	8e 01       	movw	r16, r28
     ba6:	0f 5f       	subi	r16, 0xFF	; 255
     ba8:	1f 4f       	sbci	r17, 0xFF	; 255
     baa:	ec a1       	ldd	r30, Y+36	; 0x24
     bac:	fd a1       	ldd	r31, Y+37	; 0x25
     bae:	09 95       	icall
     bb0:	81 11       	cpse	r24, r1
     bb2:	21 c0       	rjmp	.+66     	; 0xbf6 <__stack+0x2f7>
     bb4:	4f 85       	ldd	r20, Y+15	; 0x0f
     bb6:	58 89       	ldd	r21, Y+16	; 0x10
     bb8:	69 89       	ldd	r22, Y+17	; 0x11
     bba:	7a 89       	ldd	r23, Y+18	; 0x12
     bbc:	8a a1       	ldd	r24, Y+34	; 0x22
     bbe:	9b a1       	ldd	r25, Y+35	; 0x23
     bc0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <fat_free_clusters>
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	29 c0       	rjmp	.+82     	; 0xc20 <__stack+0x321>
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	24 c0       	rjmp	.+72     	; 0xc20 <__stack+0x321>
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	1f c0       	rjmp	.+62     	; 0xc20 <__stack+0x321>
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	1a c0       	rjmp	.+52     	; 0xc20 <__stack+0x321>
     bec:	6f 85       	ldd	r22, Y+15	; 0x0f
     bee:	78 89       	ldd	r23, Y+16	; 0x10
     bf0:	89 89       	ldd	r24, Y+17	; 0x11
     bf2:	9a 89       	ldd	r25, Y+18	; 0x12
     bf4:	15 c0       	rjmp	.+42     	; 0xc20 <__stack+0x321>
     bf6:	6f 85       	ldd	r22, Y+15	; 0x0f
     bf8:	78 89       	ldd	r23, Y+16	; 0x10
     bfa:	89 89       	ldd	r24, Y+17	; 0x11
     bfc:	9a 89       	ldd	r25, Y+18	; 0x12
     bfe:	10 c0       	rjmp	.+32     	; 0xc20 <__stack+0x321>
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	ad 81       	ldd	r26, Y+5	; 0x05
     c06:	be 81       	ldd	r27, Y+6	; 0x06
     c08:	89 2b       	or	r24, r25
     c0a:	8a 2b       	or	r24, r26
     c0c:	8b 2b       	or	r24, r27
     c0e:	09 f0       	breq	.+2      	; 0xc12 <__stack+0x313>
     c10:	3f cf       	rjmp	.-386    	; 0xa90 <__stack+0x191>
     c12:	b8 ce       	rjmp	.-656    	; 0x984 <__stack+0x85>
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	89 2b       	or	r24, r25
     c1a:	09 f0       	breq	.+2      	; 0xc1e <__stack+0x31f>
     c1c:	39 cf       	rjmp	.-398    	; 0xa90 <__stack+0x191>
     c1e:	f1 ce       	rjmp	.-542    	; 0xa02 <__stack+0x103>
     c20:	a9 96       	adiw	r28, 0x29	; 41
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	df 90       	pop	r13
     c3a:	cf 90       	pop	r12
     c3c:	bf 90       	pop	r11
     c3e:	af 90       	pop	r10
     c40:	9f 90       	pop	r9
     c42:	8f 90       	pop	r8
     c44:	7f 90       	pop	r7
     c46:	6f 90       	pop	r6
     c48:	5f 90       	pop	r5
     c4a:	4f 90       	pop	r4
     c4c:	3f 90       	pop	r3
     c4e:	2f 90       	pop	r2
     c50:	08 95       	ret

00000c52 <fat_clear_cluster_callback>:
     c52:	80 e1       	ldi	r24, 0x10	; 16
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	08 95       	ret

00000c58 <fat_calc_83_checksum>:
     c58:	9c 01       	movw	r18, r24
     c5a:	fc 01       	movw	r30, r24
     c5c:	81 91       	ld	r24, Z+
     c5e:	25 5f       	subi	r18, 0xF5	; 245
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
     c62:	80 fb       	bst	r24, 0
     c64:	87 95       	ror	r24
     c66:	87 f9       	bld	r24, 7
     c68:	91 91       	ld	r25, Z+
     c6a:	89 0f       	add	r24, r25
     c6c:	e2 17       	cp	r30, r18
     c6e:	f3 07       	cpc	r31, r19
     c70:	c1 f7       	brne	.-16     	; 0xc62 <fat_calc_83_checksum+0xa>
     c72:	08 95       	ret

00000c74 <fat_clear_cluster>:
     c74:	8f 92       	push	r8
     c76:	9f 92       	push	r9
     c78:	af 92       	push	r10
     c7a:	bf 92       	push	r11
     c7c:	cf 92       	push	r12
     c7e:	df 92       	push	r13
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	68 97       	sbiw	r28, 0x18	; 24
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	42 30       	cpi	r20, 0x02	; 2
     c9e:	51 05       	cpc	r21, r1
     ca0:	61 05       	cpc	r22, r1
     ca2:	71 05       	cpc	r23, r1
     ca4:	08 f4       	brcc	.+2      	; 0xca8 <fat_clear_cluster+0x34>
     ca6:	5a c0       	rjmp	.+180    	; 0xd5c <fat_clear_cluster+0xe8>
     ca8:	4c 01       	movw	r8, r24
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	a1 f1       	breq	.+104    	; 0xd16 <fat_clear_cluster+0xa2>
     cae:	42 50       	subi	r20, 0x02	; 2
     cb0:	51 09       	sbc	r21, r1
     cb2:	61 09       	sbc	r22, r1
     cb4:	71 09       	sbc	r23, r1
     cb6:	6a 01       	movw	r12, r20
     cb8:	7b 01       	movw	r14, r22
     cba:	00 e0       	ldi	r16, 0x00	; 0
     cbc:	10 e0       	ldi	r17, 0x00	; 0
     cbe:	98 01       	movw	r18, r16
     cc0:	49 8b       	std	Y+17, r20	; 0x11
     cc2:	da 8a       	std	Y+18, r13	; 0x12
     cc4:	eb 8a       	std	Y+19, r14	; 0x13
     cc6:	fc 8a       	std	Y+20, r15	; 0x14
     cc8:	0d 8b       	std	Y+21, r16	; 0x15
     cca:	1e 8b       	std	Y+22, r17	; 0x16
     ccc:	2f 8b       	std	Y+23, r18	; 0x17
     cce:	38 8f       	std	Y+24, r19	; 0x18
     cd0:	dc 01       	movw	r26, r24
     cd2:	58 96       	adiw	r26, 0x18	; 24
     cd4:	0d 91       	ld	r16, X+
     cd6:	1c 91       	ld	r17, X
     cd8:	59 97       	sbiw	r26, 0x19	; 25
     cda:	a0 2e       	mov	r10, r16
     cdc:	b1 2e       	mov	r11, r17
     cde:	c1 2c       	mov	r12, r1
     ce0:	d1 2c       	mov	r13, r1
     ce2:	e1 2c       	mov	r14, r1
     ce4:	f1 2c       	mov	r15, r1
     ce6:	00 e0       	ldi	r16, 0x00	; 0
     ce8:	10 e0       	ldi	r17, 0x00	; 0
     cea:	29 89       	ldd	r18, Y+17	; 0x11
     cec:	3a 89       	ldd	r19, Y+18	; 0x12
     cee:	4b 89       	ldd	r20, Y+19	; 0x13
     cf0:	5c 89       	ldd	r21, Y+20	; 0x14
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__muldi3>
     cfe:	f4 01       	movw	r30, r8
     d00:	a2 8c       	ldd	r10, Z+26	; 0x1a
     d02:	b3 8c       	ldd	r11, Z+27	; 0x1b
     d04:	c4 8c       	ldd	r12, Z+28	; 0x1c
     d06:	d5 8c       	ldd	r13, Z+29	; 0x1d
     d08:	e6 8c       	ldd	r14, Z+30	; 0x1e
     d0a:	f7 8c       	ldd	r15, Z+31	; 0x1f
     d0c:	00 a1       	ldd	r16, Z+32	; 0x20
     d0e:	11 a1       	ldd	r17, Z+33	; 0x21
     d10:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
     d14:	08 c0       	rjmp	.+16     	; 0xd26 <fat_clear_cluster+0xb2>
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	8e 01       	movw	r16, r28
     d28:	0f 5f       	subi	r16, 0xFF	; 255
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	e0 e1       	ldi	r30, 0x10	; 16
     d2e:	d8 01       	movw	r26, r16
     d30:	1d 92       	st	X+, r1
     d32:	ea 95       	dec	r30
     d34:	e9 f7       	brne	.-6      	; 0xd30 <fat_clear_cluster+0xbc>
     d36:	f4 01       	movw	r30, r8
     d38:	e0 8c       	ldd	r14, Z+24	; 0x18
     d3a:	f1 8c       	ldd	r15, Z+25	; 0x19
     d3c:	01 90       	ld	r0, Z+
     d3e:	f0 81       	ld	r31, Z
     d40:	e0 2d       	mov	r30, r0
     d42:	06 80       	ldd	r0, Z+6	; 0x06
     d44:	f7 81       	ldd	r31, Z+7	; 0x07
     d46:	e0 2d       	mov	r30, r0
     d48:	a1 2c       	mov	r10, r1
     d4a:	b1 2c       	mov	r11, r1
     d4c:	0f 2e       	mov	r0, r31
     d4e:	f9 e2       	ldi	r31, 0x29	; 41
     d50:	cf 2e       	mov	r12, r31
     d52:	f6 e0       	ldi	r31, 0x06	; 6
     d54:	df 2e       	mov	r13, r31
     d56:	f0 2d       	mov	r31, r0
     d58:	09 95       	icall
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <fat_clear_cluster+0xea>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	68 96       	adiw	r28, 0x18	; 24
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	bf 90       	pop	r11
     d7c:	af 90       	pop	r10
     d7e:	9f 90       	pop	r9
     d80:	8f 90       	pop	r8
     d82:	08 95       	ret

00000d84 <fat_dir_entry_read_callback>:
     d84:	2f 92       	push	r2
     d86:	3f 92       	push	r3
     d88:	4f 92       	push	r4
     d8a:	5f 92       	push	r5
     d8c:	6f 92       	push	r6
     d8e:	7f 92       	push	r7
     d90:	8f 92       	push	r8
     d92:	9f 92       	push	r9
     d94:	af 92       	push	r10
     d96:	bf 92       	push	r11
     d98:	cf 92       	push	r12
     d9a:	df 92       	push	r13
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	2d 97       	sbiw	r28, 0x0d	; 13
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	f7 01       	movw	r30, r14
     dba:	a0 80       	ld	r10, Z
     dbc:	b1 80       	ldd	r11, Z+1	; 0x01
     dbe:	a2 81       	ldd	r26, Z+2	; 0x02
     dc0:	b3 81       	ldd	r27, Z+3	; 0x03
     dc2:	90 96       	adiw	r26, 0x20	; 32
     dc4:	b3 83       	std	Z+3, r27	; 0x03
     dc6:	a2 83       	std	Z+2, r26	; 0x02
     dc8:	dc 01       	movw	r26, r24
     dca:	fc 90       	ld	r15, X
     dcc:	b5 ee       	ldi	r27, 0xE5	; 229
     dce:	fb 16       	cp	r15, r27
     dd0:	11 f0       	breq	.+4      	; 0xdd6 <fat_dir_entry_read_callback+0x52>
     dd2:	f1 10       	cpse	r15, r1
     dd4:	03 c0       	rjmp	.+6      	; 0xddc <fat_dir_entry_read_callback+0x58>
     dd6:	14 82       	std	Z+4, r1	; 0x04
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	30 c1       	rjmp	.+608    	; 0x103c <fat_dir_entry_read_callback+0x2b8>
     ddc:	45 01       	movw	r8, r10
     dde:	dc 01       	movw	r26, r24
     de0:	1b 96       	adiw	r26, 0x0b	; 11
     de2:	fc 90       	ld	r15, X
     de4:	bf e0       	ldi	r27, 0x0F	; 15
     de6:	fb 12       	cpse	r15, r27
     de8:	48 c0       	rjmp	.+144    	; 0xe7a <fat_dir_entry_read_callback+0xf6>
     dea:	f4 80       	ldd	r15, Z+4	; 0x04
     dec:	ff 20       	and	r15, r15
     dee:	29 f0       	breq	.+10     	; 0xdfa <fat_dir_entry_read_callback+0x76>
     df0:	dc 01       	movw	r26, r24
     df2:	1d 96       	adiw	r26, 0x0d	; 13
     df4:	ec 90       	ld	r14, X
     df6:	fe 14       	cp	r15, r14
     df8:	a9 f0       	breq	.+42     	; 0xe24 <fat_dir_entry_read_callback+0xa0>
     dfa:	0f 2e       	mov	r0, r31
     dfc:	f1 e3       	ldi	r31, 0x31	; 49
     dfe:	ff 2e       	mov	r15, r31
     e00:	f0 2d       	mov	r31, r0
     e02:	d5 01       	movw	r26, r10
     e04:	1d 92       	st	X+, r1
     e06:	fa 94       	dec	r15
     e08:	e9 f7       	brne	.-6      	; 0xe04 <fat_dir_entry_read_callback+0x80>
     e0a:	dc 01       	movw	r26, r24
     e0c:	1d 96       	adiw	r26, 0x0d	; 13
     e0e:	fc 90       	ld	r15, X
     e10:	f4 82       	std	Z+4, r15	; 0x04
     e12:	f5 01       	movw	r30, r10
     e14:	01 a7       	std	Z+41, r16	; 0x29
     e16:	12 a7       	std	Z+42, r17	; 0x2a
     e18:	23 a7       	std	Z+43, r18	; 0x2b
     e1a:	34 a7       	std	Z+44, r19	; 0x2c
     e1c:	45 a7       	std	Z+45, r20	; 0x2d
     e1e:	56 a7       	std	Z+46, r21	; 0x2e
     e20:	67 a7       	std	Z+47, r22	; 0x2f
     e22:	70 ab       	std	Z+48, r23	; 0x30
     e24:	dc 01       	movw	r26, r24
     e26:	2c 91       	ld	r18, X
     e28:	2f 73       	andi	r18, 0x3F	; 63
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	21 50       	subi	r18, 0x01	; 1
     e2e:	31 09       	sbc	r19, r1
     e30:	4d e0       	ldi	r20, 0x0D	; 13
     e32:	42 9f       	mul	r20, r18
     e34:	b0 01       	movw	r22, r0
     e36:	43 9f       	mul	r20, r19
     e38:	70 0d       	add	r23, r0
     e3a:	11 24       	eor	r1, r1
     e3c:	2d e0       	ldi	r18, 0x0D	; 13
     e3e:	e4 e0       	ldi	r30, 0x04	; 4
     e40:	f1 e0       	ldi	r31, 0x01	; 1
     e42:	de 01       	movw	r26, r28
     e44:	11 96       	adiw	r26, 0x01	; 1
     e46:	01 90       	ld	r0, Z+
     e48:	0d 92       	st	X+, r0
     e4a:	2a 95       	dec	r18
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <fat_dir_entry_read_callback+0xc2>
     e4e:	6f 31       	cpi	r22, 0x1F	; 31
     e50:	71 05       	cpc	r23, r1
     e52:	08 f4       	brcc	.+2      	; 0xe56 <fat_dir_entry_read_callback+0xd2>
     e54:	d6 c0       	rjmp	.+428    	; 0x1002 <fat_dir_entry_read_callback+0x27e>
     e56:	0f c0       	rjmp	.+30     	; 0xe76 <fat_dir_entry_read_callback+0xf2>
     e58:	21 91       	ld	r18, Z+
     e5a:	8c 01       	movw	r16, r24
     e5c:	02 0f       	add	r16, r18
     e5e:	11 1d       	adc	r17, r1
     e60:	d8 01       	movw	r26, r16
     e62:	2c 91       	ld	r18, X
     e64:	d5 01       	movw	r26, r10
     e66:	2d 93       	st	X+, r18
     e68:	5d 01       	movw	r10, r26
     e6a:	e6 17       	cp	r30, r22
     e6c:	f7 07       	cpc	r31, r23
     e6e:	19 f0       	breq	.+6      	; 0xe76 <fat_dir_entry_read_callback+0xf2>
     e70:	e4 17       	cp	r30, r20
     e72:	f5 07       	cpc	r31, r21
     e74:	89 f7       	brne	.-30     	; 0xe58 <fat_dir_entry_read_callback+0xd4>
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	e1 c0       	rjmp	.+450    	; 0x103c <fat_dir_entry_read_callback+0x2b8>
     e7a:	7f 01       	movw	r14, r30
     e7c:	77 2e       	mov	r7, r23
     e7e:	66 2e       	mov	r6, r22
     e80:	55 2e       	mov	r5, r21
     e82:	44 2e       	mov	r4, r20
     e84:	33 2e       	mov	r3, r19
     e86:	22 2e       	mov	r2, r18
     e88:	6c 01       	movw	r12, r24
     e8a:	f5 01       	movw	r30, r10
     e8c:	80 81       	ld	r24, Z
     e8e:	88 23       	and	r24, r24
     e90:	49 f0       	breq	.+18     	; 0xea4 <fat_dir_entry_read_callback+0x120>
     e92:	c6 01       	movw	r24, r12
     e94:	0e 94 2c 06 	call	0xc58	; 0xc58 <fat_calc_83_checksum>
     e98:	d7 01       	movw	r26, r14
     e9a:	14 96       	adiw	r26, 0x04	; 4
     e9c:	9c 91       	ld	r25, X
     e9e:	98 17       	cp	r25, r24
     ea0:	09 f4       	brne	.+2      	; 0xea4 <fat_dir_entry_read_callback+0x120>
     ea2:	79 c0       	rjmp	.+242    	; 0xf96 <fat_dir_entry_read_callback+0x212>
     ea4:	81 e3       	ldi	r24, 0x31	; 49
     ea6:	f5 01       	movw	r30, r10
     ea8:	11 92       	st	Z+, r1
     eaa:	8a 95       	dec	r24
     eac:	e9 f7       	brne	.-6      	; 0xea8 <fat_dir_entry_read_callback+0x124>
     eae:	d5 01       	movw	r26, r10
     eb0:	99 96       	adiw	r26, 0x29	; 41
     eb2:	0c 93       	st	X, r16
     eb4:	99 97       	sbiw	r26, 0x29	; 41
     eb6:	9a 96       	adiw	r26, 0x2a	; 42
     eb8:	1c 93       	st	X, r17
     eba:	9a 97       	sbiw	r26, 0x2a	; 42
     ebc:	9b 96       	adiw	r26, 0x2b	; 43
     ebe:	2c 92       	st	X, r2
     ec0:	9b 97       	sbiw	r26, 0x2b	; 43
     ec2:	9c 96       	adiw	r26, 0x2c	; 44
     ec4:	3c 92       	st	X, r3
     ec6:	9c 97       	sbiw	r26, 0x2c	; 44
     ec8:	9d 96       	adiw	r26, 0x2d	; 45
     eca:	4c 92       	st	X, r4
     ecc:	9d 97       	sbiw	r26, 0x2d	; 45
     ece:	9e 96       	adiw	r26, 0x2e	; 46
     ed0:	5c 92       	st	X, r5
     ed2:	9e 97       	sbiw	r26, 0x2e	; 46
     ed4:	9f 96       	adiw	r26, 0x2f	; 47
     ed6:	6c 92       	st	X, r6
     ed8:	9f 97       	sbiw	r26, 0x2f	; 47
     eda:	d0 96       	adiw	r26, 0x30	; 48
     edc:	7c 92       	st	X, r7
     ede:	f6 01       	movw	r30, r12
     ee0:	90 81       	ld	r25, Z
     ee2:	90 32       	cpi	r25, 0x20	; 32
     ee4:	e9 f0       	breq	.+58     	; 0xf20 <fat_dir_entry_read_callback+0x19c>
     ee6:	a5 01       	movw	r20, r10
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <fat_dir_entry_read_callback+0x170>
     eec:	31 96       	adiw	r30, 0x01	; 1
     eee:	90 81       	ld	r25, Z
     ef0:	90 32       	cpi	r25, 0x20	; 32
     ef2:	b9 f0       	breq	.+46     	; 0xf22 <fat_dir_entry_read_callback+0x19e>
     ef4:	da 01       	movw	r26, r20
     ef6:	9d 93       	st	X+, r25
     ef8:	ad 01       	movw	r20, r26
     efa:	d6 01       	movw	r26, r12
     efc:	1c 96       	adiw	r26, 0x0c	; 12
     efe:	2c 91       	ld	r18, X
     f00:	23 ff       	sbrs	r18, 3
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <fat_dir_entry_read_callback+0x194>
     f04:	20 81       	ld	r18, Z
     f06:	21 54       	subi	r18, 0x41	; 65
     f08:	2a 31       	cpi	r18, 0x1A	; 26
     f0a:	30 f4       	brcc	.+12     	; 0xf18 <fat_dir_entry_read_callback+0x194>
     f0c:	9a 01       	movw	r18, r20
     f0e:	21 50       	subi	r18, 0x01	; 1
     f10:	31 09       	sbc	r19, r1
     f12:	90 5e       	subi	r25, 0xE0	; 224
     f14:	d9 01       	movw	r26, r18
     f16:	9c 93       	st	X, r25
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	88 30       	cpi	r24, 0x08	; 8
     f1c:	39 f7       	brne	.-50     	; 0xeec <fat_dir_entry_read_callback+0x168>
     f1e:	01 c0       	rjmp	.+2      	; 0xf22 <fat_dir_entry_read_callback+0x19e>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	f5 01       	movw	r30, r10
     f24:	90 81       	ld	r25, Z
     f26:	95 30       	cpi	r25, 0x05	; 5
     f28:	11 f4       	brne	.+4      	; 0xf2e <fat_dir_entry_read_callback+0x1aa>
     f2a:	95 ee       	ldi	r25, 0xE5	; 229
     f2c:	90 83       	st	Z, r25
     f2e:	d6 01       	movw	r26, r12
     f30:	18 96       	adiw	r26, 0x08	; 8
     f32:	9c 91       	ld	r25, X
     f34:	18 97       	sbiw	r26, 0x08	; 8
     f36:	90 32       	cpi	r25, 0x20	; 32
     f38:	51 f1       	breq	.+84     	; 0xf8e <fat_dir_entry_read_callback+0x20a>
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	98 0f       	add	r25, r24
     f3e:	2e e2       	ldi	r18, 0x2E	; 46
     f40:	f5 01       	movw	r30, r10
     f42:	e8 0f       	add	r30, r24
     f44:	f1 1d       	adc	r31, r1
     f46:	20 83       	st	Z, r18
     f48:	18 96       	adiw	r26, 0x08	; 8
     f4a:	2c 91       	ld	r18, X
     f4c:	20 32       	cpi	r18, 0x20	; 32
     f4e:	e1 f0       	breq	.+56     	; 0xf88 <fat_dir_entry_read_callback+0x204>
     f50:	f6 01       	movw	r30, r12
     f52:	8c 5f       	subi	r24, 0xFC	; 252
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <fat_dir_entry_read_callback+0x1da>
     f56:	31 96       	adiw	r30, 0x01	; 1
     f58:	20 85       	ldd	r18, Z+8	; 0x08
     f5a:	20 32       	cpi	r18, 0x20	; 32
     f5c:	b9 f0       	breq	.+46     	; 0xf8c <fat_dir_entry_read_callback+0x208>
     f5e:	a4 01       	movw	r20, r8
     f60:	49 0f       	add	r20, r25
     f62:	51 1d       	adc	r21, r1
     f64:	da 01       	movw	r26, r20
     f66:	2c 93       	st	X, r18
     f68:	d6 01       	movw	r26, r12
     f6a:	1c 96       	adiw	r26, 0x0c	; 12
     f6c:	3c 91       	ld	r19, X
     f6e:	34 ff       	sbrs	r19, 4
     f70:	07 c0       	rjmp	.+14     	; 0xf80 <fat_dir_entry_read_callback+0x1fc>
     f72:	30 85       	ldd	r19, Z+8	; 0x08
     f74:	31 54       	subi	r19, 0x41	; 65
     f76:	3a 31       	cpi	r19, 0x1A	; 26
     f78:	18 f4       	brcc	.+6      	; 0xf80 <fat_dir_entry_read_callback+0x1fc>
     f7a:	20 5e       	subi	r18, 0xE0	; 224
     f7c:	da 01       	movw	r26, r20
     f7e:	2c 93       	st	X, r18
     f80:	9f 5f       	subi	r25, 0xFF	; 255
     f82:	98 13       	cpse	r25, r24
     f84:	e8 cf       	rjmp	.-48     	; 0xf56 <fat_dir_entry_read_callback+0x1d2>
     f86:	03 c0       	rjmp	.+6      	; 0xf8e <fat_dir_entry_read_callback+0x20a>
     f88:	89 2f       	mov	r24, r25
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <fat_dir_entry_read_callback+0x20a>
     f8c:	89 2f       	mov	r24, r25
     f8e:	f5 01       	movw	r30, r10
     f90:	e8 0f       	add	r30, r24
     f92:	f1 1d       	adc	r31, r1
     f94:	10 82       	st	Z, r1
     f96:	f6 01       	movw	r30, r12
     f98:	83 85       	ldd	r24, Z+11	; 0x0b
     f9a:	d5 01       	movw	r26, r10
     f9c:	90 96       	adiw	r26, 0x20	; 32
     f9e:	8c 93       	st	X, r24
     fa0:	c6 01       	movw	r24, r12
     fa2:	4a 96       	adiw	r24, 0x1a	; 26
     fa4:	0e 94 0c 01 	call	0x218	; 0x218 <read16>
     fa8:	a0 e0       	ldi	r26, 0x00	; 0
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	f5 01       	movw	r30, r10
     fae:	81 a3       	std	Z+33, r24	; 0x21
     fb0:	92 a3       	std	Z+34, r25	; 0x22
     fb2:	a3 a3       	std	Z+35, r26	; 0x23
     fb4:	b4 a3       	std	Z+36, r27	; 0x24
     fb6:	c6 01       	movw	r24, r12
     fb8:	44 96       	adiw	r24, 0x14	; 20
     fba:	0e 94 0c 01 	call	0x218	; 0x218 <read16>
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	dc 01       	movw	r26, r24
     fc4:	99 27       	eor	r25, r25
     fc6:	88 27       	eor	r24, r24
     fc8:	f5 01       	movw	r30, r10
     fca:	41 a1       	ldd	r20, Z+33	; 0x21
     fcc:	52 a1       	ldd	r21, Z+34	; 0x22
     fce:	63 a1       	ldd	r22, Z+35	; 0x23
     fd0:	74 a1       	ldd	r23, Z+36	; 0x24
     fd2:	84 2b       	or	r24, r20
     fd4:	95 2b       	or	r25, r21
     fd6:	a6 2b       	or	r26, r22
     fd8:	b7 2b       	or	r27, r23
     fda:	81 a3       	std	Z+33, r24	; 0x21
     fdc:	92 a3       	std	Z+34, r25	; 0x22
     fde:	a3 a3       	std	Z+35, r26	; 0x23
     fe0:	b4 a3       	std	Z+36, r27	; 0x24
     fe2:	c6 01       	movw	r24, r12
     fe4:	4c 96       	adiw	r24, 0x1c	; 28
     fe6:	0e 94 16 01 	call	0x22c	; 0x22c <read32>
     fea:	d5 01       	movw	r26, r10
     fec:	95 96       	adiw	r26, 0x25	; 37
     fee:	6d 93       	st	X+, r22
     ff0:	7d 93       	st	X+, r23
     ff2:	8d 93       	st	X+, r24
     ff4:	9c 93       	st	X, r25
     ff6:	98 97       	sbiw	r26, 0x28	; 40
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	f7 01       	movw	r30, r14
     ffc:	85 83       	std	Z+5, r24	; 0x05
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	1d c0       	rjmp	.+58     	; 0x103c <fat_dir_entry_read_callback+0x2b8>
    1002:	29 81       	ldd	r18, Y+1	; 0x01
    1004:	fc 01       	movw	r30, r24
    1006:	e2 0f       	add	r30, r18
    1008:	f1 1d       	adc	r31, r1
    100a:	20 81       	ld	r18, Z
    100c:	f5 01       	movw	r30, r10
    100e:	e6 0f       	add	r30, r22
    1010:	f7 1f       	adc	r31, r23
    1012:	20 83       	st	Z, r18
    1014:	fe 01       	movw	r30, r28
    1016:	32 96       	adiw	r30, 0x02	; 2
    1018:	db 01       	movw	r26, r22
    101a:	11 96       	adiw	r26, 0x01	; 1
    101c:	aa 0e       	add	r10, r26
    101e:	bb 1e       	adc	r11, r27
    1020:	4f e1       	ldi	r20, 0x1F	; 31
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	46 1b       	sub	r20, r22
    1026:	57 0b       	sbc	r21, r23
    1028:	01 e0       	ldi	r16, 0x01	; 1
    102a:	10 e0       	ldi	r17, 0x00	; 0
    102c:	0c 0f       	add	r16, r28
    102e:	1d 1f       	adc	r17, r29
    1030:	40 0f       	add	r20, r16
    1032:	51 1f       	adc	r21, r17
    1034:	be 01       	movw	r22, r28
    1036:	62 5f       	subi	r22, 0xF2	; 242
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	1a cf       	rjmp	.-460    	; 0xe70 <fat_dir_entry_read_callback+0xec>
    103c:	2d 96       	adiw	r28, 0x0d	; 13
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	bf 90       	pop	r11
    105a:	af 90       	pop	r10
    105c:	9f 90       	pop	r9
    105e:	8f 90       	pop	r8
    1060:	7f 90       	pop	r7
    1062:	6f 90       	pop	r6
    1064:	5f 90       	pop	r5
    1066:	4f 90       	pop	r4
    1068:	3f 90       	pop	r3
    106a:	2f 90       	pop	r2
    106c:	08 95       	ret

0000106e <fat_write_dir_entry>:
    106e:	2f 92       	push	r2
    1070:	3f 92       	push	r3
    1072:	4f 92       	push	r4
    1074:	5f 92       	push	r5
    1076:	6f 92       	push	r6
    1078:	7f 92       	push	r7
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	a5 97       	sbiw	r28, 0x25	; 37
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <fat_write_dir_entry+0x3a>
    10a6:	6b c1       	rjmp	.+726    	; 0x137e <fat_write_dir_entry+0x310>
    10a8:	61 15       	cp	r22, r1
    10aa:	71 05       	cpc	r23, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <fat_write_dir_entry+0x42>
    10ae:	69 c1       	rjmp	.+722    	; 0x1382 <fat_write_dir_entry+0x314>
    10b0:	6b 01       	movw	r12, r22
    10b2:	fc 01       	movw	r30, r24
    10b4:	01 90       	ld	r0, Z+
    10b6:	f0 81       	ld	r31, Z
    10b8:	e0 2d       	mov	r30, r0
    10ba:	84 81       	ldd	r24, Z+4	; 0x04
    10bc:	95 81       	ldd	r25, Z+5	; 0x05
    10be:	9b a3       	std	Y+35, r25	; 0x23
    10c0:	8a a3       	std	Y+34, r24	; 0x22
    10c2:	db 01       	movw	r26, r22
    10c4:	99 96       	adiw	r26, 0x29	; 41
    10c6:	9c 90       	ld	r9, X
    10c8:	99 97       	sbiw	r26, 0x29	; 41
    10ca:	9a 96       	adiw	r26, 0x2a	; 42
    10cc:	8c 90       	ld	r8, X
    10ce:	9a 97       	sbiw	r26, 0x2a	; 42
    10d0:	9b 96       	adiw	r26, 0x2b	; 43
    10d2:	7c 90       	ld	r7, X
    10d4:	9b 97       	sbiw	r26, 0x2b	; 43
    10d6:	9c 96       	adiw	r26, 0x2c	; 44
    10d8:	6c 90       	ld	r6, X
    10da:	9c 97       	sbiw	r26, 0x2c	; 44
    10dc:	9d 96       	adiw	r26, 0x2d	; 45
    10de:	5c 90       	ld	r5, X
    10e0:	9d 97       	sbiw	r26, 0x2d	; 45
    10e2:	9e 96       	adiw	r26, 0x2e	; 46
    10e4:	4c 90       	ld	r4, X
    10e6:	9e 97       	sbiw	r26, 0x2e	; 46
    10e8:	9f 96       	adiw	r26, 0x2f	; 47
    10ea:	3c 90       	ld	r3, X
    10ec:	9f 97       	sbiw	r26, 0x2f	; 47
    10ee:	d0 96       	adiw	r26, 0x30	; 48
    10f0:	2c 90       	ld	r2, X
    10f2:	7d a3       	std	Y+37, r23	; 0x25
    10f4:	6c a3       	std	Y+36, r22	; 0x24
    10f6:	fb 01       	movw	r30, r22
    10f8:	01 90       	ld	r0, Z+
    10fa:	00 20       	and	r0, r0
    10fc:	e9 f7       	brne	.-6      	; 0x10f8 <fat_write_dir_entry+0x8a>
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	5f 01       	movw	r10, r30
    1102:	a6 1a       	sub	r10, r22
    1104:	b7 0a       	sbc	r11, r23
    1106:	1a 2d       	mov	r17, r10
    1108:	c5 01       	movw	r24, r10
    110a:	99 27       	eor	r25, r25
    110c:	0c 96       	adiw	r24, 0x0c	; 12
    110e:	6d e0       	ldi	r22, 0x0D	; 13
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	0e 94 6d 25 	call	0x4ada	; 0x4ada <__divmodhi4>
    1116:	69 a3       	std	Y+33, r22	; 0x21
    1118:	4b e0       	ldi	r20, 0x0B	; 11
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	60 e2       	ldi	r22, 0x20	; 32
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	0e 94 89 26 	call	0x4d12	; 0x4d12 <memset>
    1128:	6e e2       	ldi	r22, 0x2E	; 46
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	c6 01       	movw	r24, r12
    112e:	0e 94 d1 26 	call	0x4da2	; 0x4da2 <strrchr>
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	d1 f0       	breq	.+52     	; 0x116a <fat_write_dir_entry+0xfc>
    1136:	fc 01       	movw	r30, r24
    1138:	21 81       	ldd	r18, Z+1	; 0x01
    113a:	22 23       	and	r18, r18
    113c:	b1 f0       	breq	.+44     	; 0x116a <fat_write_dir_entry+0xfc>
    113e:	bc 01       	movw	r22, r24
    1140:	6f 5f       	subi	r22, 0xFF	; 255
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	fb 01       	movw	r30, r22
    1146:	01 90       	ld	r0, Z+
    1148:	00 20       	and	r0, r0
    114a:	e9 f7       	brne	.-6      	; 0x1146 <fat_write_dir_entry+0xd8>
    114c:	31 97       	sbiw	r30, 0x01	; 1
    114e:	e6 1b       	sub	r30, r22
    1150:	f7 0b       	sbc	r31, r23
    1152:	aa 94       	dec	r10
    1154:	1a 2d       	mov	r17, r10
    1156:	1e 1b       	sub	r17, r30
    1158:	e4 30       	cpi	r30, 0x04	; 4
    115a:	08 f0       	brcs	.+2      	; 0x115e <fat_write_dir_entry+0xf0>
    115c:	e3 e0       	ldi	r30, 0x03	; 3
    115e:	4e 2f       	mov	r20, r30
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	ce 01       	movw	r24, r28
    1164:	09 96       	adiw	r24, 0x09	; 9
    1166:	0e 94 80 26 	call	0x4d00	; 0x4d00 <memcpy>
    116a:	19 30       	cpi	r17, 0x09	; 9
    116c:	d0 f4       	brcc	.+52     	; 0x11a2 <fat_write_dir_entry+0x134>
    116e:	41 2f       	mov	r20, r17
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	b6 01       	movw	r22, r12
    1174:	ce 01       	movw	r24, r28
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	0e 94 80 26 	call	0x4d00	; 0x4d00 <memcpy>
    117c:	d6 01       	movw	r26, r12
    117e:	8c 91       	ld	r24, X
    1180:	8e 32       	cpi	r24, 0x2E	; 46
    1182:	61 f5       	brne	.+88     	; 0x11dc <fat_write_dir_entry+0x16e>
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	8c 91       	ld	r24, X
    1188:	11 97       	sbiw	r26, 0x01	; 1
    118a:	8e 32       	cpi	r24, 0x2E	; 46
    118c:	31 f4       	brne	.+12     	; 0x119a <fat_write_dir_entry+0x12c>
    118e:	12 96       	adiw	r26, 0x02	; 2
    1190:	8c 91       	ld	r24, X
    1192:	81 11       	cpse	r24, r1
    1194:	23 c0       	rjmp	.+70     	; 0x11dc <fat_write_dir_entry+0x16e>
    1196:	19 a2       	std	Y+33, r1	; 0x21
    1198:	21 c0       	rjmp	.+66     	; 0x11dc <fat_write_dir_entry+0x16e>
    119a:	81 11       	cpse	r24, r1
    119c:	1f c0       	rjmp	.+62     	; 0x11dc <fat_write_dir_entry+0x16e>
    119e:	19 a2       	std	Y+33, r1	; 0x21
    11a0:	1d c0       	rjmp	.+58     	; 0x11dc <fat_write_dir_entry+0x16e>
    11a2:	88 e0       	ldi	r24, 0x08	; 8
    11a4:	f6 01       	movw	r30, r12
    11a6:	de 01       	movw	r26, r28
    11a8:	11 96       	adiw	r26, 0x01	; 1
    11aa:	01 90       	ld	r0, Z+
    11ac:	0d 92       	st	X+, r0
    11ae:	8a 95       	dec	r24
    11b0:	e1 f7       	brne	.-8      	; 0x11aa <fat_write_dir_entry+0x13c>
    11b2:	f6 01       	movw	r30, r12
    11b4:	81 a1       	ldd	r24, Z+33	; 0x21
    11b6:	80 3a       	cpi	r24, 0xA0	; 160
    11b8:	28 f4       	brcc	.+10     	; 0x11c4 <fat_write_dir_entry+0x156>
    11ba:	98 2f       	mov	r25, r24
    11bc:	92 95       	swap	r25
    11be:	9f 70       	andi	r25, 0x0F	; 15
    11c0:	90 5d       	subi	r25, 0xD0	; 208
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <fat_write_dir_entry+0x15e>
    11c4:	98 2f       	mov	r25, r24
    11c6:	92 95       	swap	r25
    11c8:	9f 70       	andi	r25, 0x0F	; 15
    11ca:	9f 59       	subi	r25, 0x9F	; 159
    11cc:	9f 83       	std	Y+7, r25	; 0x07
    11ce:	8f 70       	andi	r24, 0x0F	; 15
    11d0:	8a 30       	cpi	r24, 0x0A	; 10
    11d2:	10 f4       	brcc	.+4      	; 0x11d8 <fat_write_dir_entry+0x16a>
    11d4:	80 5d       	subi	r24, 0xD0	; 208
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <fat_write_dir_entry+0x16c>
    11d8:	8f 59       	subi	r24, 0x9F	; 159
    11da:	88 87       	std	Y+8, r24	; 0x08
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	85 3e       	cpi	r24, 0xE5	; 229
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <fat_write_dir_entry+0x178>
    11e2:	85 e0       	ldi	r24, 0x05	; 5
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	fe 01       	movw	r30, r28
    11e8:	3c 96       	adiw	r30, 0x0c	; 12
    11ea:	85 e1       	ldi	r24, 0x15	; 21
    11ec:	df 01       	movw	r26, r30
    11ee:	1d 92       	st	X+, r1
    11f0:	8a 95       	dec	r24
    11f2:	e9 f7       	brne	.-6      	; 0x11ee <fat_write_dir_entry+0x180>
    11f4:	f6 01       	movw	r30, r12
    11f6:	80 a1       	ldd	r24, Z+32	; 0x20
    11f8:	8c 87       	std	Y+12, r24	; 0x0c
    11fa:	81 a1       	ldd	r24, Z+33	; 0x21
    11fc:	92 a1       	ldd	r25, Z+34	; 0x22
    11fe:	a3 a1       	ldd	r26, Z+35	; 0x23
    1200:	b4 a1       	ldd	r27, Z+36	; 0x24
    1202:	bd 01       	movw	r22, r26
    1204:	88 27       	eor	r24, r24
    1206:	99 27       	eor	r25, r25
    1208:	ce 01       	movw	r24, r28
    120a:	45 96       	adiw	r24, 0x15	; 21
    120c:	0e 94 28 01 	call	0x250	; 0x250 <write16>
    1210:	d6 01       	movw	r26, r12
    1212:	91 96       	adiw	r26, 0x21	; 33
    1214:	6d 91       	ld	r22, X+
    1216:	7c 91       	ld	r23, X
    1218:	92 97       	sbiw	r26, 0x22	; 34
    121a:	ce 01       	movw	r24, r28
    121c:	4b 96       	adiw	r24, 0x1b	; 27
    121e:	0e 94 28 01 	call	0x250	; 0x250 <write16>
    1222:	f6 01       	movw	r30, r12
    1224:	45 a1       	ldd	r20, Z+37	; 0x25
    1226:	56 a1       	ldd	r21, Z+38	; 0x26
    1228:	67 a1       	ldd	r22, Z+39	; 0x27
    122a:	70 a5       	ldd	r23, Z+40	; 0x28
    122c:	ce 01       	movw	r24, r28
    122e:	4d 96       	adiw	r24, 0x1d	; 29
    1230:	0e 94 2c 01 	call	0x258	; 0x258 <write32>
    1234:	89 a1       	ldd	r24, Y+33	; 0x21
    1236:	f0 e2       	ldi	r31, 0x20	; 32
    1238:	8f 9f       	mul	r24, r31
    123a:	a0 01       	movw	r20, r0
    123c:	11 24       	eor	r1, r1
    123e:	24 2f       	mov	r18, r20
    1240:	35 2f       	mov	r19, r21
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a9 2c       	mov	r10, r9
    1250:	b8 2c       	mov	r11, r8
    1252:	c7 2c       	mov	r12, r7
    1254:	d6 2c       	mov	r13, r6
    1256:	e5 2c       	mov	r14, r5
    1258:	f4 2c       	mov	r15, r4
    125a:	03 2d       	mov	r16, r3
    125c:	12 2d       	mov	r17, r2
    125e:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    1262:	68 94       	set
    1264:	ee 24       	eor	r14, r14
    1266:	e5 f8       	bld	r14, 5
    1268:	f1 2c       	mov	r15, r1
    126a:	8e 01       	movw	r16, r28
    126c:	0f 5f       	subi	r16, 0xFF	; 255
    126e:	1f 4f       	sbci	r17, 0xFF	; 255
    1270:	ea a1       	ldd	r30, Y+34	; 0x22
    1272:	fb a1       	ldd	r31, Y+35	; 0x23
    1274:	09 95       	icall
    1276:	88 23       	and	r24, r24
    1278:	09 f4       	brne	.+2      	; 0x127c <fat_write_dir_entry+0x20e>
    127a:	8c c0       	rjmp	.+280    	; 0x1394 <fat_write_dir_entry+0x326>
    127c:	c8 01       	movw	r24, r16
    127e:	0e 94 2c 06 	call	0xc58	; 0xc58 <fat_calc_83_checksum>
    1282:	a8 2e       	mov	r10, r24
    1284:	f9 a1       	ldd	r31, Y+33	; 0x21
    1286:	ff 23       	and	r31, r31
    1288:	09 f4       	brne	.+2      	; 0x128c <fat_write_dir_entry+0x21e>
    128a:	7d c0       	rjmp	.+250    	; 0x1386 <fat_write_dir_entry+0x318>
    128c:	df 2e       	mov	r13, r31
    128e:	0f 2e       	mov	r0, r31
    1290:	fd e0       	ldi	r31, 0x0D	; 13
    1292:	bf 2e       	mov	r11, r31
    1294:	f0 2d       	mov	r31, r0
    1296:	0f 2e       	mov	r0, r31
    1298:	ff e0       	ldi	r31, 0x0F	; 15
    129a:	cf 2e       	mov	r12, r31
    129c:	f0 2d       	mov	r31, r0
    129e:	40 e2       	ldi	r20, 0x20	; 32
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	6f ef       	ldi	r22, 0xFF	; 255
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	ce 01       	movw	r24, r28
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	0e 94 89 26 	call	0x4d12	; 0x4d12 <memset>
    12ae:	8d 2d       	mov	r24, r13
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	b8 9e       	mul	r11, r24
    12b6:	f0 01       	movw	r30, r0
    12b8:	b9 9e       	mul	r11, r25
    12ba:	f0 0d       	add	r31, r0
    12bc:	11 24       	eor	r1, r1
    12be:	8c a1       	ldd	r24, Y+36	; 0x24
    12c0:	9d a1       	ldd	r25, Y+37	; 0x25
    12c2:	e8 0f       	add	r30, r24
    12c4:	f9 1f       	adc	r31, r25
    12c6:	bf 01       	movw	r22, r30
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <fat_write_dir_entry+0x260>
    12cc:	31 96       	adiw	r30, 0x01	; 1
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	98 0f       	add	r25, r24
    12d2:	db 01       	movw	r26, r22
    12d4:	4d 91       	ld	r20, X+
    12d6:	bd 01       	movw	r22, r26
    12d8:	21 e0       	ldi	r18, 0x01	; 1
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	2c 0f       	add	r18, r28
    12de:	3d 1f       	adc	r19, r29
    12e0:	28 0f       	add	r18, r24
    12e2:	31 1d       	adc	r19, r1
    12e4:	d9 01       	movw	r26, r18
    12e6:	4c 93       	st	X, r20
    12e8:	8e 5f       	subi	r24, 0xFE	; 254
    12ea:	21 e0       	ldi	r18, 0x01	; 1
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	2c 0f       	add	r18, r28
    12f0:	3d 1f       	adc	r19, r29
    12f2:	29 0f       	add	r18, r25
    12f4:	31 1d       	adc	r19, r1
    12f6:	d9 01       	movw	r26, r18
    12f8:	1c 92       	st	X, r1
    12fa:	8b 30       	cpi	r24, 0x0B	; 11
    12fc:	09 f4       	brne	.+2      	; 0x1300 <fat_write_dir_entry+0x292>
    12fe:	45 c0       	rjmp	.+138    	; 0x138a <fat_write_dir_entry+0x31c>
    1300:	8a 31       	cpi	r24, 0x1A	; 26
    1302:	11 f4       	brne	.+4      	; 0x1308 <fat_write_dir_entry+0x29a>
    1304:	8c e1       	ldi	r24, 0x1C	; 28
    1306:	42 c0       	rjmp	.+132    	; 0x138c <fat_write_dir_entry+0x31e>
    1308:	90 81       	ld	r25, Z
    130a:	99 23       	and	r25, r25
    130c:	11 f0       	breq	.+4      	; 0x1312 <fat_write_dir_entry+0x2a4>
    130e:	8f 31       	cpi	r24, 0x1F	; 31
    1310:	e8 f2       	brcs	.-70     	; 0x12cc <fat_write_dir_entry+0x25e>
    1312:	d9 82       	std	Y+1, r13	; 0x01
    1314:	b9 a1       	ldd	r27, Y+33	; 0x21
    1316:	bd 11       	cpse	r27, r13
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <fat_write_dir_entry+0x2b2>
    131a:	8d 2d       	mov	r24, r13
    131c:	80 64       	ori	r24, 0x40	; 64
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	cc 86       	std	Y+12, r12	; 0x0c
    1322:	ae 86       	std	Y+14, r10	; 0x0e
    1324:	1d 86       	std	Y+13, r1	; 0x0d
    1326:	1b 8e       	std	Y+27, r1	; 0x1b
    1328:	1c 8e       	std	Y+28, r1	; 0x1c
    132a:	68 94       	set
    132c:	ee 24       	eor	r14, r14
    132e:	e5 f8       	bld	r14, 5
    1330:	f1 2c       	mov	r15, r1
    1332:	8e 01       	movw	r16, r28
    1334:	0f 5f       	subi	r16, 0xFF	; 255
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	29 2d       	mov	r18, r9
    133a:	38 2d       	mov	r19, r8
    133c:	47 2d       	mov	r20, r7
    133e:	56 2d       	mov	r21, r6
    1340:	65 2d       	mov	r22, r5
    1342:	74 2d       	mov	r23, r4
    1344:	83 2d       	mov	r24, r3
    1346:	92 2d       	mov	r25, r2
    1348:	ea a1       	ldd	r30, Y+34	; 0x22
    134a:	fb a1       	ldd	r31, Y+35	; 0x23
    134c:	09 95       	icall
    134e:	29 2d       	mov	r18, r9
    1350:	38 2d       	mov	r19, r8
    1352:	47 2d       	mov	r20, r7
    1354:	56 2d       	mov	r21, r6
    1356:	65 2d       	mov	r22, r5
    1358:	74 2d       	mov	r23, r4
    135a:	83 2d       	mov	r24, r3
    135c:	92 2d       	mov	r25, r2
    135e:	a0 e2       	ldi	r26, 0x20	; 32
    1360:	0e 94 56 26 	call	0x4cac	; 0x4cac <__adddi3_s8>
    1364:	92 2e       	mov	r9, r18
    1366:	83 2e       	mov	r8, r19
    1368:	74 2e       	mov	r7, r20
    136a:	65 2e       	mov	r6, r21
    136c:	56 2e       	mov	r5, r22
    136e:	47 2e       	mov	r4, r23
    1370:	38 2e       	mov	r3, r24
    1372:	29 2e       	mov	r2, r25
    1374:	da 94       	dec	r13
    1376:	d1 10       	cpse	r13, r1
    1378:	92 cf       	rjmp	.-220    	; 0x129e <fat_write_dir_entry+0x230>
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	0b c0       	rjmp	.+22     	; 0x1394 <fat_write_dir_entry+0x326>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	09 c0       	rjmp	.+18     	; 0x1394 <fat_write_dir_entry+0x326>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <fat_write_dir_entry+0x326>
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <fat_write_dir_entry+0x326>
    138a:	8e e0       	ldi	r24, 0x0E	; 14
    138c:	90 81       	ld	r25, Z
    138e:	91 11       	cpse	r25, r1
    1390:	9d cf       	rjmp	.-198    	; 0x12cc <fat_write_dir_entry+0x25e>
    1392:	bf cf       	rjmp	.-130    	; 0x1312 <fat_write_dir_entry+0x2a4>
    1394:	a5 96       	adiw	r28, 0x25	; 37
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	ff 90       	pop	r15
    13aa:	ef 90       	pop	r14
    13ac:	df 90       	pop	r13
    13ae:	cf 90       	pop	r12
    13b0:	bf 90       	pop	r11
    13b2:	af 90       	pop	r10
    13b4:	9f 90       	pop	r9
    13b6:	8f 90       	pop	r8
    13b8:	7f 90       	pop	r7
    13ba:	6f 90       	pop	r6
    13bc:	5f 90       	pop	r5
    13be:	4f 90       	pop	r4
    13c0:	3f 90       	pop	r3
    13c2:	2f 90       	pop	r2
    13c4:	08 95       	ret

000013c6 <fat_find_offset_for_dir_entry>:
    13c6:	2f 92       	push	r2
    13c8:	3f 92       	push	r3
    13ca:	4f 92       	push	r4
    13cc:	5f 92       	push	r5
    13ce:	6f 92       	push	r6
    13d0:	7f 92       	push	r7
    13d2:	8f 92       	push	r8
    13d4:	9f 92       	push	r9
    13d6:	af 92       	push	r10
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	a0 97       	sbiw	r28, 0x20	; 32
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	fc 01       	movw	r30, r24
    13fc:	8b 01       	movw	r16, r22
    13fe:	89 2b       	or	r24, r25
    1400:	09 f4       	brne	.+2      	; 0x1404 <fat_find_offset_for_dir_entry+0x3e>
    1402:	dc c1       	rjmp	.+952    	; 0x17bc <fat_find_offset_for_dir_entry+0x3f6>
    1404:	41 15       	cp	r20, r1
    1406:	51 05       	cpc	r21, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <fat_find_offset_for_dir_entry+0x46>
    140a:	e1 c1       	rjmp	.+962    	; 0x17ce <fat_find_offset_for_dir_entry+0x408>
    140c:	da 01       	movw	r26, r20
    140e:	0d 90       	ld	r0, X+
    1410:	00 20       	and	r0, r0
    1412:	e9 f7       	brne	.-6      	; 0x140e <fat_find_offset_for_dir_entry+0x48>
    1414:	9d 01       	movw	r18, r26
    1416:	24 1b       	sub	r18, r20
    1418:	35 0b       	sbc	r19, r21
    141a:	25 5f       	subi	r18, 0xF5	; 245
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	a5 ec       	ldi	r26, 0xC5	; 197
    1420:	be e4       	ldi	r27, 0x4E	; 78
    1422:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    1426:	96 95       	lsr	r25
    1428:	87 95       	ror	r24
    142a:	96 95       	lsr	r25
    142c:	87 95       	ror	r24
    142e:	21 e0       	ldi	r18, 0x01	; 1
    1430:	28 0f       	add	r18, r24
    1432:	28 a3       	std	Y+32, r18	; 0x20
    1434:	d8 01       	movw	r26, r16
    1436:	93 96       	adiw	r26, 0x23	; 35
    1438:	4d 91       	ld	r20, X+
    143a:	5d 91       	ld	r21, X+
    143c:	6d 91       	ld	r22, X+
    143e:	7c 91       	ld	r23, X
    1440:	96 97       	sbiw	r26, 0x26	; 38
    1442:	4c 8b       	std	Y+20, r20	; 0x14
    1444:	5d 8b       	std	Y+21, r21	; 0x15
    1446:	6e 8b       	std	Y+22, r22	; 0x16
    1448:	7f 8b       	std	Y+23, r23	; 0x17
    144a:	45 2b       	or	r20, r21
    144c:	46 2b       	or	r20, r22
    144e:	47 2b       	or	r20, r23
    1450:	09 f0       	breq	.+2      	; 0x1454 <fat_find_offset_for_dir_entry+0x8e>
    1452:	40 c0       	rjmp	.+128    	; 0x14d4 <fat_find_offset_for_dir_entry+0x10e>
    1454:	a0 81       	ld	r26, Z
    1456:	b1 81       	ldd	r27, Z+1	; 0x01
    1458:	18 96       	adiw	r26, 0x08	; 8
    145a:	8c 91       	ld	r24, X
    145c:	8b 30       	cpi	r24, 0x0B	; 11
    145e:	c9 f4       	brne	.+50     	; 0x1492 <fat_find_offset_for_dir_entry+0xcc>
    1460:	02 a5       	ldd	r16, Z+42	; 0x2a
    1462:	13 a5       	ldd	r17, Z+43	; 0x2b
    1464:	24 a5       	ldd	r18, Z+44	; 0x2c
    1466:	35 a5       	ldd	r19, Z+45	; 0x2d
    1468:	0c 8b       	std	Y+20, r16	; 0x14
    146a:	1d 8b       	std	Y+21, r17	; 0x15
    146c:	2e 8b       	std	Y+22, r18	; 0x16
    146e:	3f 8b       	std	Y+23, r19	; 0x17
    1470:	18 8e       	std	Y+24, r1	; 0x18
    1472:	19 8e       	std	Y+25, r1	; 0x19
    1474:	1a 8e       	std	Y+26, r1	; 0x1a
    1476:	1b 8e       	std	Y+27, r1	; 0x1b
    1478:	1c 8e       	std	Y+28, r1	; 0x1c
    147a:	1d 8e       	std	Y+29, r1	; 0x1d
    147c:	1e 8e       	std	Y+30, r1	; 0x1e
    147e:	1f 8e       	std	Y+31, r1	; 0x1f
    1480:	1c 86       	std	Y+12, r1	; 0x0c
    1482:	1d 86       	std	Y+13, r1	; 0x0d
    1484:	1e 86       	std	Y+14, r1	; 0x0e
    1486:	1f 86       	std	Y+15, r1	; 0x0f
    1488:	18 8a       	std	Y+16, r1	; 0x10
    148a:	19 8a       	std	Y+17, r1	; 0x11
    148c:	1a 8a       	std	Y+18, r1	; 0x12
    148e:	1b 8a       	std	Y+19, r1	; 0x13
    1490:	31 c0       	rjmp	.+98     	; 0x14f4 <fat_find_offset_for_dir_entry+0x12e>
    1492:	12 a1       	ldd	r17, Z+34	; 0x22
    1494:	1c 87       	std	Y+12, r17	; 0x0c
    1496:	23 a1       	ldd	r18, Z+35	; 0x23
    1498:	2d 87       	std	Y+13, r18	; 0x0d
    149a:	34 a1       	ldd	r19, Z+36	; 0x24
    149c:	3e 87       	std	Y+14, r19	; 0x0e
    149e:	45 a1       	ldd	r20, Z+37	; 0x25
    14a0:	4f 87       	std	Y+15, r20	; 0x0f
    14a2:	56 a1       	ldd	r21, Z+38	; 0x26
    14a4:	58 8b       	std	Y+16, r21	; 0x10
    14a6:	67 a1       	ldd	r22, Z+39	; 0x27
    14a8:	69 8b       	std	Y+17, r22	; 0x11
    14aa:	70 a5       	ldd	r23, Z+40	; 0x28
    14ac:	7a 8b       	std	Y+18, r23	; 0x12
    14ae:	81 a5       	ldd	r24, Z+41	; 0x29
    14b0:	8b 8b       	std	Y+19, r24	; 0x13
    14b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    14b4:	98 8f       	std	Y+24, r25	; 0x18
    14b6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    14b8:	a9 8f       	std	Y+25, r26	; 0x19
    14ba:	b4 8d       	ldd	r27, Z+28	; 0x1c
    14bc:	ba 8f       	std	Y+26, r27	; 0x1a
    14be:	05 8d       	ldd	r16, Z+29	; 0x1d
    14c0:	0b 8f       	std	Y+27, r16	; 0x1b
    14c2:	16 8d       	ldd	r17, Z+30	; 0x1e
    14c4:	1c 8f       	std	Y+28, r17	; 0x1c
    14c6:	27 8d       	ldd	r18, Z+31	; 0x1f
    14c8:	2d 8f       	std	Y+29, r18	; 0x1d
    14ca:	30 a1       	ldd	r19, Z+32	; 0x20
    14cc:	3e 8f       	std	Y+30, r19	; 0x1e
    14ce:	41 a1       	ldd	r20, Z+33	; 0x21
    14d0:	4f 8f       	std	Y+31, r20	; 0x1f
    14d2:	10 c0       	rjmp	.+32     	; 0x14f4 <fat_find_offset_for_dir_entry+0x12e>
    14d4:	18 8e       	std	Y+24, r1	; 0x18
    14d6:	19 8e       	std	Y+25, r1	; 0x19
    14d8:	1a 8e       	std	Y+26, r1	; 0x1a
    14da:	1b 8e       	std	Y+27, r1	; 0x1b
    14dc:	1c 8e       	std	Y+28, r1	; 0x1c
    14de:	1d 8e       	std	Y+29, r1	; 0x1d
    14e0:	1e 8e       	std	Y+30, r1	; 0x1e
    14e2:	1f 8e       	std	Y+31, r1	; 0x1f
    14e4:	1c 86       	std	Y+12, r1	; 0x0c
    14e6:	1d 86       	std	Y+13, r1	; 0x0d
    14e8:	1e 86       	std	Y+14, r1	; 0x0e
    14ea:	1f 86       	std	Y+15, r1	; 0x0f
    14ec:	18 8a       	std	Y+16, r1	; 0x10
    14ee:	19 8a       	std	Y+17, r1	; 0x11
    14f0:	1a 8a       	std	Y+18, r1	; 0x12
    14f2:	1b 8a       	std	Y+19, r1	; 0x13
    14f4:	fb 83       	std	Y+3, r31	; 0x03
    14f6:	ea 83       	std	Y+2, r30	; 0x02
    14f8:	4c 84       	ldd	r4, Y+12	; 0x0c
    14fa:	5d 84       	ldd	r5, Y+13	; 0x0d
    14fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    14fe:	7f 84       	ldd	r7, Y+15	; 0x0f
    1500:	88 88       	ldd	r8, Y+16	; 0x10
    1502:	99 88       	ldd	r9, Y+17	; 0x11
    1504:	2a 88       	ldd	r2, Y+18	; 0x12
    1506:	3b 88       	ldd	r3, Y+19	; 0x13
    1508:	1c 82       	std	Y+4, r1	; 0x04
    150a:	24 2d       	mov	r18, r4
    150c:	35 2d       	mov	r19, r5
    150e:	46 2d       	mov	r20, r6
    1510:	57 2d       	mov	r21, r7
    1512:	68 2d       	mov	r22, r8
    1514:	79 2d       	mov	r23, r9
    1516:	82 2d       	mov	r24, r2
    1518:	93 2d       	mov	r25, r3
    151a:	a8 8c       	ldd	r10, Y+24	; 0x18
    151c:	b9 8c       	ldd	r11, Y+25	; 0x19
    151e:	ca 8c       	ldd	r12, Y+26	; 0x1a
    1520:	db 8c       	ldd	r13, Y+27	; 0x1b
    1522:	ec 8c       	ldd	r14, Y+28	; 0x1c
    1524:	fd 8c       	ldd	r15, Y+29	; 0x1d
    1526:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1528:	1f 8d       	ldd	r17, Y+31	; 0x1f
    152a:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__cmpdi2>
    152e:	09 f0       	breq	.+2      	; 0x1532 <fat_find_offset_for_dir_entry+0x16c>
    1530:	df c0       	rjmp	.+446    	; 0x16f0 <fat_find_offset_for_dir_entry+0x32a>
    1532:	6c 89       	ldd	r22, Y+20	; 0x14
    1534:	7d 89       	ldd	r23, Y+21	; 0x15
    1536:	8e 89       	ldd	r24, Y+22	; 0x16
    1538:	9f 89       	ldd	r25, Y+23	; 0x17
    153a:	67 2b       	or	r22, r23
    153c:	68 2b       	or	r22, r24
    153e:	69 2b       	or	r22, r25
    1540:	09 f4       	brne	.+2      	; 0x1544 <fat_find_offset_for_dir_entry+0x17e>
    1542:	2a c1       	rjmp	.+596    	; 0x1798 <fat_find_offset_for_dir_entry+0x3d2>
    1544:	68 2d       	mov	r22, r8
    1546:	79 2d       	mov	r23, r9
    1548:	82 2d       	mov	r24, r2
    154a:	93 2d       	mov	r25, r3
    154c:	a0 e0       	ldi	r26, 0x00	; 0
    154e:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <__cmpdi2_s8>
    1552:	09 f4       	brne	.+2      	; 0x1556 <fat_find_offset_for_dir_entry+0x190>
    1554:	49 c1       	rjmp	.+658    	; 0x17e8 <fat_find_offset_for_dir_entry+0x422>
    1556:	4c 89       	ldd	r20, Y+20	; 0x14
    1558:	5d 89       	ldd	r21, Y+21	; 0x15
    155a:	6e 89       	ldd	r22, Y+22	; 0x16
    155c:	7f 89       	ldd	r23, Y+23	; 0x17
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	9b 81       	ldd	r25, Y+3	; 0x03
    1562:	0e 94 32 01 	call	0x264	; 0x264 <fat_get_next_cluster>
    1566:	61 15       	cp	r22, r1
    1568:	71 05       	cpc	r23, r1
    156a:	81 05       	cpc	r24, r1
    156c:	91 05       	cpc	r25, r1
    156e:	09 f0       	breq	.+2      	; 0x1572 <fat_find_offset_for_dir_entry+0x1ac>
    1570:	37 c1       	rjmp	.+622    	; 0x17e0 <fat_find_offset_for_dir_entry+0x41a>
    1572:	01 e0       	ldi	r16, 0x01	; 1
    1574:	10 e0       	ldi	r17, 0x00	; 0
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4c 89       	ldd	r20, Y+20	; 0x14
    157c:	5d 89       	ldd	r21, Y+21	; 0x15
    157e:	6e 89       	ldd	r22, Y+22	; 0x16
    1580:	7f 89       	ldd	r23, Y+23	; 0x17
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	0e 94 ac 03 	call	0x758	; 0x758 <fat_append_clusters>
    158a:	2b 01       	movw	r4, r22
    158c:	3c 01       	movw	r6, r24
    158e:	61 15       	cp	r22, r1
    1590:	71 05       	cpc	r23, r1
    1592:	81 05       	cpc	r24, r1
    1594:	91 05       	cpc	r25, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <fat_find_offset_for_dir_entry+0x1d4>
    1598:	ff c0       	rjmp	.+510    	; 0x1798 <fat_find_offset_for_dir_entry+0x3d2>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	02 97       	sbiw	r24, 0x02	; 2
    15a0:	a1 09       	sbc	r26, r1
    15a2:	b1 09       	sbc	r27, r1
    15a4:	8c 01       	movw	r16, r24
    15a6:	9d 01       	movw	r18, r26
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	ba 01       	movw	r22, r20
    15ae:	8c 83       	std	Y+4, r24	; 0x04
    15b0:	1d 83       	std	Y+5, r17	; 0x05
    15b2:	2e 83       	std	Y+6, r18	; 0x06
    15b4:	3f 83       	std	Y+7, r19	; 0x07
    15b6:	48 87       	std	Y+8, r20	; 0x08
    15b8:	59 87       	std	Y+9, r21	; 0x09
    15ba:	6a 87       	std	Y+10, r22	; 0x0a
    15bc:	7b 87       	std	Y+11, r23	; 0x0b
    15be:	aa 81       	ldd	r26, Y+2	; 0x02
    15c0:	bb 81       	ldd	r27, Y+3	; 0x03
    15c2:	58 96       	adiw	r26, 0x18	; 24
    15c4:	0d 91       	ld	r16, X+
    15c6:	1c 91       	ld	r17, X
    15c8:	59 97       	sbiw	r26, 0x19	; 25
    15ca:	a0 2e       	mov	r10, r16
    15cc:	b1 2e       	mov	r11, r17
    15ce:	c1 2c       	mov	r12, r1
    15d0:	d1 2c       	mov	r13, r1
    15d2:	e1 2c       	mov	r14, r1
    15d4:	f1 2c       	mov	r15, r1
    15d6:	00 e0       	ldi	r16, 0x00	; 0
    15d8:	10 e0       	ldi	r17, 0x00	; 0
    15da:	2c 81       	ldd	r18, Y+4	; 0x04
    15dc:	3d 81       	ldd	r19, Y+5	; 0x05
    15de:	4e 81       	ldd	r20, Y+6	; 0x06
    15e0:	5f 81       	ldd	r21, Y+7	; 0x07
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__muldi3>
    15ee:	ea 81       	ldd	r30, Y+2	; 0x02
    15f0:	fb 81       	ldd	r31, Y+3	; 0x03
    15f2:	a2 8c       	ldd	r10, Z+26	; 0x1a
    15f4:	b3 8c       	ldd	r11, Z+27	; 0x1b
    15f6:	c4 8c       	ldd	r12, Z+28	; 0x1c
    15f8:	d5 8c       	ldd	r13, Z+29	; 0x1d
    15fa:	e6 8c       	ldd	r14, Z+30	; 0x1e
    15fc:	f7 8c       	ldd	r15, Z+31	; 0x1f
    15fe:	00 a1       	ldd	r16, Z+32	; 0x20
    1600:	11 a1       	ldd	r17, Z+33	; 0x21
    1602:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    1606:	2c 87       	std	Y+12, r18	; 0x0c
    1608:	3d 87       	std	Y+13, r19	; 0x0d
    160a:	4e 87       	std	Y+14, r20	; 0x0e
    160c:	5f 87       	std	Y+15, r21	; 0x0f
    160e:	68 8b       	std	Y+16, r22	; 0x10
    1610:	79 8b       	std	Y+17, r23	; 0x11
    1612:	8a 8b       	std	Y+18, r24	; 0x12
    1614:	9b 8b       	std	Y+19, r25	; 0x13
    1616:	b3 01       	movw	r22, r6
    1618:	a2 01       	movw	r20, r4
    161a:	cf 01       	movw	r24, r30
    161c:	0e 94 3a 06 	call	0xc74	; 0xc74 <fat_clear_cluster>
    1620:	c4 c0       	rjmp	.+392    	; 0x17aa <fat_find_offset_for_dir_entry+0x3e4>
    1622:	8c 89       	ldd	r24, Y+20	; 0x14
    1624:	9d 89       	ldd	r25, Y+21	; 0x15
    1626:	ae 89       	ldd	r26, Y+22	; 0x16
    1628:	bf 89       	ldd	r27, Y+23	; 0x17
    162a:	02 97       	sbiw	r24, 0x02	; 2
    162c:	a1 09       	sbc	r26, r1
    162e:	b1 09       	sbc	r27, r1
    1630:	1c 01       	movw	r2, r24
    1632:	2d 01       	movw	r4, r26
    1634:	aa 81       	ldd	r26, Y+2	; 0x02
    1636:	bb 81       	ldd	r27, Y+3	; 0x03
    1638:	58 96       	adiw	r26, 0x18	; 24
    163a:	0d 91       	ld	r16, X+
    163c:	1c 91       	ld	r17, X
    163e:	59 97       	sbiw	r26, 0x19	; 25
    1640:	a0 2e       	mov	r10, r16
    1642:	b1 2e       	mov	r11, r17
    1644:	c1 2c       	mov	r12, r1
    1646:	d1 2c       	mov	r13, r1
    1648:	e1 2c       	mov	r14, r1
    164a:	f1 2c       	mov	r15, r1
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	10 e0       	ldi	r17, 0x00	; 0
    1650:	22 2d       	mov	r18, r2
    1652:	33 2d       	mov	r19, r3
    1654:	44 2d       	mov	r20, r4
    1656:	55 2d       	mov	r21, r5
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__muldi3>
    1664:	ea 81       	ldd	r30, Y+2	; 0x02
    1666:	fb 81       	ldd	r31, Y+3	; 0x03
    1668:	a2 8c       	ldd	r10, Z+26	; 0x1a
    166a:	b3 8c       	ldd	r11, Z+27	; 0x1b
    166c:	c4 8c       	ldd	r12, Z+28	; 0x1c
    166e:	d5 8c       	ldd	r13, Z+29	; 0x1d
    1670:	e6 8c       	ldd	r14, Z+30	; 0x1e
    1672:	f7 8c       	ldd	r15, Z+31	; 0x1f
    1674:	00 a1       	ldd	r16, Z+32	; 0x20
    1676:	11 a1       	ldd	r17, Z+33	; 0x21
    1678:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    167c:	2c 87       	std	Y+12, r18	; 0x0c
    167e:	3d 87       	std	Y+13, r19	; 0x0d
    1680:	4e 87       	std	Y+14, r20	; 0x0e
    1682:	5f 87       	std	Y+15, r21	; 0x0f
    1684:	68 8b       	std	Y+16, r22	; 0x10
    1686:	79 8b       	std	Y+17, r23	; 0x11
    1688:	8a 8b       	std	Y+18, r24	; 0x12
    168a:	9b 8b       	std	Y+19, r25	; 0x13
    168c:	08 c0       	rjmp	.+16     	; 0x169e <fat_find_offset_for_dir_entry+0x2d8>
    168e:	1c 86       	std	Y+12, r1	; 0x0c
    1690:	1d 86       	std	Y+13, r1	; 0x0d
    1692:	1e 86       	std	Y+14, r1	; 0x0e
    1694:	1f 86       	std	Y+15, r1	; 0x0f
    1696:	18 8a       	std	Y+16, r1	; 0x10
    1698:	19 8a       	std	Y+17, r1	; 0x11
    169a:	1a 8a       	std	Y+18, r1	; 0x12
    169c:	1b 8a       	std	Y+19, r1	; 0x13
    169e:	aa 81       	ldd	r26, Y+2	; 0x02
    16a0:	bb 81       	ldd	r27, Y+3	; 0x03
    16a2:	58 96       	adiw	r26, 0x18	; 24
    16a4:	8d 90       	ld	r8, X+
    16a6:	9c 90       	ld	r9, X
    16a8:	59 97       	sbiw	r26, 0x19	; 25
    16aa:	28 2d       	mov	r18, r8
    16ac:	39 2d       	mov	r19, r9
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	ac 84       	ldd	r10, Y+12	; 0x0c
    16bc:	bd 84       	ldd	r11, Y+13	; 0x0d
    16be:	ce 84       	ldd	r12, Y+14	; 0x0e
    16c0:	df 84       	ldd	r13, Y+15	; 0x0f
    16c2:	e8 88       	ldd	r14, Y+16	; 0x10
    16c4:	f9 88       	ldd	r15, Y+17	; 0x11
    16c6:	0a 89       	ldd	r16, Y+18	; 0x12
    16c8:	1b 89       	ldd	r17, Y+19	; 0x13
    16ca:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    16ce:	28 8f       	std	Y+24, r18	; 0x18
    16d0:	39 8f       	std	Y+25, r19	; 0x19
    16d2:	4a 8f       	std	Y+26, r20	; 0x1a
    16d4:	5b 8f       	std	Y+27, r21	; 0x1b
    16d6:	6c 8f       	std	Y+28, r22	; 0x1c
    16d8:	7d 8f       	std	Y+29, r23	; 0x1d
    16da:	8e 8f       	std	Y+30, r24	; 0x1e
    16dc:	9f 8f       	std	Y+31, r25	; 0x1f
    16de:	4a 2c       	mov	r4, r10
    16e0:	5b 2c       	mov	r5, r11
    16e2:	6c 2c       	mov	r6, r12
    16e4:	7d 2c       	mov	r7, r13
    16e6:	8e 2c       	mov	r8, r14
    16e8:	9f 2c       	mov	r9, r15
    16ea:	20 2e       	mov	r2, r16
    16ec:	31 2e       	mov	r3, r17
    16ee:	1c 82       	std	Y+4, r1	; 0x04
    16f0:	aa 81       	ldd	r26, Y+2	; 0x02
    16f2:	bb 81       	ldd	r27, Y+3	; 0x03
    16f4:	ed 91       	ld	r30, X+
    16f6:	fc 91       	ld	r31, X
    16f8:	01 90       	ld	r0, Z+
    16fa:	f0 81       	ld	r31, Z
    16fc:	e0 2d       	mov	r30, r0
    16fe:	ee 24       	eor	r14, r14
    1700:	e3 94       	inc	r14
    1702:	f1 2c       	mov	r15, r1
    1704:	8e 01       	movw	r16, r28
    1706:	0f 5f       	subi	r16, 0xFF	; 255
    1708:	1f 4f       	sbci	r17, 0xFF	; 255
    170a:	24 2d       	mov	r18, r4
    170c:	35 2d       	mov	r19, r5
    170e:	46 2d       	mov	r20, r6
    1710:	57 2d       	mov	r21, r7
    1712:	68 2d       	mov	r22, r8
    1714:	79 2d       	mov	r23, r9
    1716:	82 2d       	mov	r24, r2
    1718:	93 2d       	mov	r25, r3
    171a:	09 95       	icall
    171c:	88 23       	and	r24, r24
    171e:	e1 f1       	breq	.+120    	; 0x1798 <fat_find_offset_for_dir_entry+0x3d2>
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	85 3e       	cpi	r24, 0xE5	; 229
    1724:	11 f0       	breq	.+4      	; 0x172a <fat_find_offset_for_dir_entry+0x364>
    1726:	81 11       	cpse	r24, r1
    1728:	1a c0       	rjmp	.+52     	; 0x175e <fat_find_offset_for_dir_entry+0x398>
    172a:	bc 81       	ldd	r27, Y+4	; 0x04
    172c:	bf 5f       	subi	r27, 0xFF	; 255
    172e:	bc 83       	std	Y+4, r27	; 0x04
    1730:	e8 a1       	ldd	r30, Y+32	; 0x20
    1732:	be 17       	cp	r27, r30
    1734:	d0 f5       	brcc	.+116    	; 0x17aa <fat_find_offset_for_dir_entry+0x3e4>
    1736:	24 2d       	mov	r18, r4
    1738:	35 2d       	mov	r19, r5
    173a:	46 2d       	mov	r20, r6
    173c:	57 2d       	mov	r21, r7
    173e:	68 2d       	mov	r22, r8
    1740:	79 2d       	mov	r23, r9
    1742:	82 2d       	mov	r24, r2
    1744:	93 2d       	mov	r25, r3
    1746:	a0 e2       	ldi	r26, 0x20	; 32
    1748:	0e 94 56 26 	call	0x4cac	; 0x4cac <__adddi3_s8>
    174c:	42 2e       	mov	r4, r18
    174e:	53 2e       	mov	r5, r19
    1750:	64 2e       	mov	r6, r20
    1752:	75 2e       	mov	r7, r21
    1754:	86 2e       	mov	r8, r22
    1756:	97 2e       	mov	r9, r23
    1758:	28 2e       	mov	r2, r24
    175a:	39 2e       	mov	r3, r25
    175c:	d6 ce       	rjmp	.-596    	; 0x150a <fat_find_offset_for_dir_entry+0x144>
    175e:	24 2d       	mov	r18, r4
    1760:	35 2d       	mov	r19, r5
    1762:	46 2d       	mov	r20, r6
    1764:	57 2d       	mov	r21, r7
    1766:	68 2d       	mov	r22, r8
    1768:	79 2d       	mov	r23, r9
    176a:	82 2d       	mov	r24, r2
    176c:	93 2d       	mov	r25, r3
    176e:	a0 e2       	ldi	r26, 0x20	; 32
    1770:	0e 94 56 26 	call	0x4cac	; 0x4cac <__adddi3_s8>
    1774:	2c 87       	std	Y+12, r18	; 0x0c
    1776:	3d 87       	std	Y+13, r19	; 0x0d
    1778:	4e 87       	std	Y+14, r20	; 0x0e
    177a:	5f 87       	std	Y+15, r21	; 0x0f
    177c:	68 8b       	std	Y+16, r22	; 0x10
    177e:	79 8b       	std	Y+17, r23	; 0x11
    1780:	8a 8b       	std	Y+18, r24	; 0x12
    1782:	9b 8b       	std	Y+19, r25	; 0x13
    1784:	42 2e       	mov	r4, r18
    1786:	53 2e       	mov	r5, r19
    1788:	64 2e       	mov	r6, r20
    178a:	75 2e       	mov	r7, r21
    178c:	86 2e       	mov	r8, r22
    178e:	97 2e       	mov	r9, r23
    1790:	28 2e       	mov	r2, r24
    1792:	39 2e       	mov	r3, r25
    1794:	1c 82       	std	Y+4, r1	; 0x04
    1796:	b9 ce       	rjmp	.-654    	; 0x150a <fat_find_offset_for_dir_entry+0x144>
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	2a c0       	rjmp	.+84     	; 0x17fe <fat_find_offset_for_dir_entry+0x438>
    17aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    17ae:	4e 85       	ldd	r20, Y+14	; 0x0e
    17b0:	5f 85       	ldd	r21, Y+15	; 0x0f
    17b2:	68 89       	ldd	r22, Y+16	; 0x10
    17b4:	79 89       	ldd	r23, Y+17	; 0x11
    17b6:	8a 89       	ldd	r24, Y+18	; 0x12
    17b8:	9b 89       	ldd	r25, Y+19	; 0x13
    17ba:	21 c0       	rjmp	.+66     	; 0x17fe <fat_find_offset_for_dir_entry+0x438>
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	18 c0       	rjmp	.+48     	; 0x17fe <fat_find_offset_for_dir_entry+0x438>
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0f c0       	rjmp	.+30     	; 0x17fe <fat_find_offset_for_dir_entry+0x438>
    17e0:	6c 8b       	std	Y+20, r22	; 0x14
    17e2:	7d 8b       	std	Y+21, r23	; 0x15
    17e4:	8e 8b       	std	Y+22, r24	; 0x16
    17e6:	9f 8b       	std	Y+23, r25	; 0x17
    17e8:	0c 89       	ldd	r16, Y+20	; 0x14
    17ea:	1d 89       	ldd	r17, Y+21	; 0x15
    17ec:	2e 89       	ldd	r18, Y+22	; 0x16
    17ee:	3f 89       	ldd	r19, Y+23	; 0x17
    17f0:	02 30       	cpi	r16, 0x02	; 2
    17f2:	11 05       	cpc	r17, r1
    17f4:	21 05       	cpc	r18, r1
    17f6:	31 05       	cpc	r19, r1
    17f8:	08 f0       	brcs	.+2      	; 0x17fc <fat_find_offset_for_dir_entry+0x436>
    17fa:	13 cf       	rjmp	.-474    	; 0x1622 <fat_find_offset_for_dir_entry+0x25c>
    17fc:	48 cf       	rjmp	.-368    	; 0x168e <fat_find_offset_for_dir_entry+0x2c8>
    17fe:	a0 96       	adiw	r28, 0x20	; 32
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	ef 90       	pop	r14
    1816:	df 90       	pop	r13
    1818:	cf 90       	pop	r12
    181a:	bf 90       	pop	r11
    181c:	af 90       	pop	r10
    181e:	9f 90       	pop	r9
    1820:	8f 90       	pop	r8
    1822:	7f 90       	pop	r7
    1824:	6f 90       	pop	r6
    1826:	5f 90       	pop	r5
    1828:	4f 90       	pop	r4
    182a:	3f 90       	pop	r3
    182c:	2f 90       	pop	r2
    182e:	08 95       	ret

00001830 <fat_open>:
    1830:	2f 92       	push	r2
    1832:	3f 92       	push	r3
    1834:	4f 92       	push	r4
    1836:	5f 92       	push	r5
    1838:	6f 92       	push	r6
    183a:	7f 92       	push	r7
    183c:	8f 92       	push	r8
    183e:	9f 92       	push	r9
    1840:	af 92       	push	r10
    1842:	bf 92       	push	r11
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	c5 55       	subi	r28, 0x55	; 85
    185a:	d1 09       	sbc	r29, r1
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	09 f4       	brne	.+2      	; 0x186c <fat_open+0x3c>
    186a:	47 c2       	rjmp	.+1166   	; 0x1cfa <fat_open+0x4ca>
    186c:	dc 01       	movw	r26, r24
    186e:	14 96       	adiw	r26, 0x04	; 4
    1870:	2d 91       	ld	r18, X+
    1872:	3c 91       	ld	r19, X
    1874:	15 97       	sbiw	r26, 0x05	; 5
    1876:	23 2b       	or	r18, r19
    1878:	09 f4       	brne	.+2      	; 0x187c <fat_open+0x4c>
    187a:	42 c2       	rjmp	.+1156   	; 0x1d00 <fat_open+0x4d0>
    187c:	16 96       	adiw	r26, 0x06	; 6
    187e:	2d 91       	ld	r18, X+
    1880:	3c 91       	ld	r19, X
    1882:	17 97       	sbiw	r26, 0x07	; 7
    1884:	23 2b       	or	r18, r19
    1886:	09 f4       	brne	.+2      	; 0x188a <fat_open+0x5a>
    1888:	3e c2       	rjmp	.+1148   	; 0x1d06 <fat_open+0x4d6>
    188a:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <fat_fs_handles>
    188e:	30 91 24 02 	lds	r19, 0x0224	; 0x800224 <fat_fs_handles+0x1>
    1892:	23 2b       	or	r18, r19
    1894:	09 f4       	brne	.+2      	; 0x1898 <fat_open+0x68>
    1896:	3a c2       	rjmp	.+1140   	; 0x1d0c <fat_open+0x4dc>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	73 c2       	rjmp	.+1254   	; 0x1d84 <fat_open+0x554>
    189e:	ce 01       	movw	r24, r28
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	0e 94 0c 01 	call	0x218	; 0x218 <read16>
    18a6:	98 af       	std	Y+56, r25	; 0x38
    18a8:	8f ab       	std	Y+55, r24	; 0x37
    18aa:	ce 01       	movw	r24, r28
    18ac:	04 96       	adiw	r24, 0x04	; 4
    18ae:	0e 94 0c 01 	call	0x218	; 0x218 <read16>
    18b2:	9a af       	std	Y+58, r25	; 0x3a
    18b4:	89 af       	std	Y+57, r24	; 0x39
    18b6:	bb 81       	ldd	r27, Y+3	; 0x03
    18b8:	2a 96       	adiw	r28, 0x0a	; 10
    18ba:	bf af       	std	Y+63, r27	; 0x3f
    18bc:	2a 97       	sbiw	r28, 0x0a	; 10
    18be:	ee 81       	ldd	r30, Y+6	; 0x06
    18c0:	2b 96       	adiw	r28, 0x0b	; 11
    18c2:	ef af       	std	Y+63, r30	; 0x3f
    18c4:	2b 97       	sbiw	r28, 0x0b	; 11
    18c6:	ce 01       	movw	r24, r28
    18c8:	07 96       	adiw	r24, 0x07	; 7
    18ca:	0e 94 0c 01 	call	0x218	; 0x218 <read16>
    18ce:	2d 96       	adiw	r28, 0x0d	; 13
    18d0:	9f af       	std	Y+63, r25	; 0x3f
    18d2:	8e af       	std	Y+62, r24	; 0x3e
    18d4:	2d 97       	sbiw	r28, 0x0d	; 13
    18d6:	ce 01       	movw	r24, r28
    18d8:	09 96       	adiw	r24, 0x09	; 9
    18da:	0e 94 0c 01 	call	0x218	; 0x218 <read16>
    18de:	7c 01       	movw	r14, r24
    18e0:	ce 01       	movw	r24, r28
    18e2:	0c 96       	adiw	r24, 0x0c	; 12
    18e4:	0e 94 0c 01 	call	0x218	; 0x218 <read16>
    18e8:	29 96       	adiw	r28, 0x09	; 9
    18ea:	9f af       	std	Y+63, r25	; 0x3f
    18ec:	8e af       	std	Y+62, r24	; 0x3e
    18ee:	29 97       	sbiw	r28, 0x09	; 9
    18f0:	ce 01       	movw	r24, r28
    18f2:	46 96       	adiw	r24, 0x16	; 22
    18f4:	0e 94 16 01 	call	0x22c	; 0x22c <read32>
    18f8:	5b 01       	movw	r10, r22
    18fa:	6c 01       	movw	r12, r24
    18fc:	ce 01       	movw	r24, r28
    18fe:	4a 96       	adiw	r24, 0x1a	; 26
    1900:	0e 94 16 01 	call	0x22c	; 0x22c <read32>
    1904:	27 96       	adiw	r28, 0x07	; 7
    1906:	6c af       	std	Y+60, r22	; 0x3c
    1908:	7d af       	std	Y+61, r23	; 0x3d
    190a:	8e af       	std	Y+62, r24	; 0x3e
    190c:	9f af       	std	Y+63, r25	; 0x3f
    190e:	27 97       	sbiw	r28, 0x07	; 7
    1910:	ce 01       	movw	r24, r28
    1912:	82 96       	adiw	r24, 0x22	; 34
    1914:	0e 94 16 01 	call	0x22c	; 0x22c <read32>
    1918:	65 96       	adiw	r28, 0x15	; 21
    191a:	6c af       	std	Y+60, r22	; 0x3c
    191c:	7d af       	std	Y+61, r23	; 0x3d
    191e:	8e af       	std	Y+62, r24	; 0x3e
    1920:	9f af       	std	Y+63, r25	; 0x3f
    1922:	65 97       	sbiw	r28, 0x15	; 21
    1924:	a1 14       	cp	r10, r1
    1926:	b1 04       	cpc	r11, r1
    1928:	c1 04       	cpc	r12, r1
    192a:	d1 04       	cpc	r13, r1
    192c:	39 f4       	brne	.+14     	; 0x193c <fat_open+0x10c>
    192e:	e1 14       	cp	r14, r1
    1930:	f1 04       	cpc	r15, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <fat_open+0x106>
    1934:	1e c2       	rjmp	.+1084   	; 0x1d72 <fat_open+0x542>
    1936:	57 01       	movw	r10, r14
    1938:	c1 2c       	mov	r12, r1
    193a:	d1 2c       	mov	r13, r1
    193c:	29 96       	adiw	r28, 0x09	; 9
    193e:	ee ac       	ldd	r14, Y+62	; 0x3e
    1940:	ff ac       	ldd	r15, Y+63	; 0x3f
    1942:	29 97       	sbiw	r28, 0x09	; 9
    1944:	e1 14       	cp	r14, r1
    1946:	f1 04       	cpc	r15, r1
    1948:	51 f0       	breq	.+20     	; 0x195e <fat_open+0x12e>
    194a:	87 01       	movw	r16, r14
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	27 96       	adiw	r28, 0x07	; 7
    1952:	0c af       	std	Y+60, r16	; 0x3c
    1954:	1d af       	std	Y+61, r17	; 0x3d
    1956:	2e af       	std	Y+62, r18	; 0x3e
    1958:	3f af       	std	Y+63, r19	; 0x3f
    195a:	27 97       	sbiw	r28, 0x07	; 7
    195c:	0b c0       	rjmp	.+22     	; 0x1974 <fat_open+0x144>
    195e:	27 96       	adiw	r28, 0x07	; 7
    1960:	4c ad       	ldd	r20, Y+60	; 0x3c
    1962:	5d ad       	ldd	r21, Y+61	; 0x3d
    1964:	6e ad       	ldd	r22, Y+62	; 0x3e
    1966:	7f ad       	ldd	r23, Y+63	; 0x3f
    1968:	27 97       	sbiw	r28, 0x07	; 7
    196a:	45 2b       	or	r20, r21
    196c:	46 2b       	or	r20, r22
    196e:	47 2b       	or	r20, r23
    1970:	09 f4       	brne	.+2      	; 0x1974 <fat_open+0x144>
    1972:	ff c1       	rjmp	.+1022   	; 0x1d72 <fat_open+0x542>
    1974:	2b 96       	adiw	r28, 0x0b	; 11
    1976:	5f ad       	ldd	r21, Y+63	; 0x3f
    1978:	2b 97       	sbiw	r28, 0x0b	; 11
    197a:	a5 2f       	mov	r26, r21
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	27 96       	adiw	r28, 0x07	; 7
    1980:	2c ad       	ldd	r18, Y+60	; 0x3c
    1982:	3d ad       	ldd	r19, Y+61	; 0x3d
    1984:	4e ad       	ldd	r20, Y+62	; 0x3e
    1986:	5f ad       	ldd	r21, Y+63	; 0x3f
    1988:	27 97       	sbiw	r28, 0x07	; 7
    198a:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <__muluhisi3>
    198e:	86 01       	movw	r16, r12
    1990:	75 01       	movw	r14, r10
    1992:	29 ad       	ldd	r18, Y+57	; 0x39
    1994:	3a ad       	ldd	r19, Y+58	; 0x3a
    1996:	e2 1a       	sub	r14, r18
    1998:	f3 0a       	sbc	r15, r19
    199a:	01 09       	sbc	r16, r1
    199c:	11 09       	sbc	r17, r1
    199e:	e6 1a       	sub	r14, r22
    19a0:	f7 0a       	sbc	r15, r23
    19a2:	08 0b       	sbc	r16, r24
    19a4:	19 0b       	sbc	r17, r25
    19a6:	8f a9       	ldd	r24, Y+55	; 0x37
    19a8:	98 ad       	ldd	r25, Y+56	; 0x38
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	2d 96       	adiw	r28, 0x0d	; 13
    19ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    19b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    19b2:	2d 97       	sbiw	r28, 0x0d	; 13
    19b4:	44 0f       	add	r20, r20
    19b6:	55 1f       	adc	r21, r21
    19b8:	42 95       	swap	r20
    19ba:	52 95       	swap	r21
    19bc:	50 7f       	andi	r21, 0xF0	; 240
    19be:	54 27       	eor	r21, r20
    19c0:	40 7f       	andi	r20, 0xF0	; 240
    19c2:	54 27       	eor	r21, r20
    19c4:	84 0f       	add	r24, r20
    19c6:	95 1f       	adc	r25, r21
    19c8:	6f a9       	ldd	r22, Y+55	; 0x37
    19ca:	78 ad       	ldd	r23, Y+56	; 0x38
    19cc:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <__udivmodhi4>
    19d0:	e6 1a       	sub	r14, r22
    19d2:	f7 0a       	sbc	r15, r23
    19d4:	01 09       	sbc	r16, r1
    19d6:	11 09       	sbc	r17, r1
    19d8:	c8 01       	movw	r24, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	2a 96       	adiw	r28, 0x0a	; 10
    19de:	4f ad       	ldd	r20, Y+63	; 0x3f
    19e0:	2a 97       	sbiw	r28, 0x0a	; 10
    19e2:	04 2f       	mov	r16, r20
    19e4:	10 e0       	ldi	r17, 0x00	; 0
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	a9 01       	movw	r20, r18
    19ec:	98 01       	movw	r18, r16
    19ee:	0e 94 81 25 	call	0x4b02	; 0x4b02 <__udivmodsi4>
    19f2:	61 96       	adiw	r28, 0x11	; 17
    19f4:	2c af       	std	Y+60, r18	; 0x3c
    19f6:	3d af       	std	Y+61, r19	; 0x3d
    19f8:	4e af       	std	Y+62, r20	; 0x3e
    19fa:	5f af       	std	Y+63, r21	; 0x3f
    19fc:	61 97       	sbiw	r28, 0x11	; 17
    19fe:	da 01       	movw	r26, r20
    1a00:	c9 01       	movw	r24, r18
    1a02:	85 3f       	cpi	r24, 0xF5	; 245
    1a04:	5f e0       	ldi	r21, 0x0F	; 15
    1a06:	95 07       	cpc	r25, r21
    1a08:	a1 05       	cpc	r26, r1
    1a0a:	b1 05       	cpc	r27, r1
    1a0c:	08 f4       	brcc	.+2      	; 0x1a10 <fat_open+0x1e0>
    1a0e:	b1 c1       	rjmp	.+866    	; 0x1d72 <fat_open+0x542>
    1a10:	85 3f       	cpi	r24, 0xF5	; 245
    1a12:	9f 4f       	sbci	r25, 0xFF	; 255
    1a14:	a1 05       	cpc	r26, r1
    1a16:	b1 05       	cpc	r27, r1
    1a18:	28 f4       	brcc	.+10     	; 0x1a24 <fat_open+0x1f4>
    1a1a:	86 e0       	ldi	r24, 0x06	; 6
    1a1c:	d3 01       	movw	r26, r6
    1a1e:	18 96       	adiw	r26, 0x08	; 8
    1a20:	8c 93       	st	X, r24
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <fat_open+0x1fa>
    1a24:	8b e0       	ldi	r24, 0x0B	; 11
    1a26:	f3 01       	movw	r30, r6
    1a28:	80 87       	std	Z+8, r24	; 0x08
    1a2a:	8c e2       	ldi	r24, 0x2C	; 44
    1a2c:	e5 e2       	ldi	r30, 0x25	; 37
    1a2e:	f2 e0       	ldi	r31, 0x02	; 2
    1a30:	df 01       	movw	r26, r30
    1a32:	1d 92       	st	X+, r1
    1a34:	8a 95       	dec	r24
    1a36:	e9 f7       	brne	.-6      	; 0x1a32 <fat_open+0x202>
    1a38:	0f a9       	ldd	r16, Y+55	; 0x37
    1a3a:	18 ad       	ldd	r17, Y+56	; 0x38
    1a3c:	78 01       	movw	r14, r16
    1a3e:	00 e0       	ldi	r16, 0x00	; 0
    1a40:	10 e0       	ldi	r17, 0x00	; 0
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	a9 01       	movw	r20, r18
    1a48:	ef a6       	std	Y+47, r14	; 0x2f
    1a4a:	f8 aa       	std	Y+48, r15	; 0x30
    1a4c:	09 ab       	std	Y+49, r16	; 0x31
    1a4e:	1a ab       	std	Y+50, r17	; 0x32
    1a50:	2b ab       	std	Y+51, r18	; 0x33
    1a52:	3c ab       	std	Y+52, r19	; 0x34
    1a54:	4d ab       	std	Y+53, r20	; 0x35
    1a56:	5e ab       	std	Y+54, r21	; 0x36
    1a58:	a6 01       	movw	r20, r12
    1a5a:	95 01       	movw	r18, r10
    1a5c:	60 e0       	ldi	r22, 0x00	; 0
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	cb 01       	movw	r24, r22
    1a62:	ab ae       	std	Y+59, r10	; 0x3b
    1a64:	3c af       	std	Y+60, r19	; 0x3c
    1a66:	4d af       	std	Y+61, r20	; 0x3d
    1a68:	5e af       	std	Y+62, r21	; 0x3e
    1a6a:	6f af       	std	Y+63, r22	; 0x3f
    1a6c:	21 96       	adiw	r28, 0x01	; 1
    1a6e:	7f af       	std	Y+63, r23	; 0x3f
    1a70:	21 97       	sbiw	r28, 0x01	; 1
    1a72:	22 96       	adiw	r28, 0x02	; 2
    1a74:	8f af       	std	Y+63, r24	; 0x3f
    1a76:	22 97       	sbiw	r28, 0x02	; 2
    1a78:	23 96       	adiw	r28, 0x03	; 3
    1a7a:	9f af       	std	Y+63, r25	; 0x3f
    1a7c:	23 97       	sbiw	r28, 0x03	; 3
    1a7e:	ae 2c       	mov	r10, r14
    1a80:	bf 2c       	mov	r11, r15
    1a82:	c1 2c       	mov	r12, r1
    1a84:	d1 2c       	mov	r13, r1
    1a86:	e1 2c       	mov	r14, r1
    1a88:	f1 2c       	mov	r15, r1
    1a8a:	00 e0       	ldi	r16, 0x00	; 0
    1a8c:	10 e0       	ldi	r17, 0x00	; 0
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__muldi3>
    1a9a:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <fat_fs_handles+0x2>
    1a9e:	30 93 26 02 	sts	0x0226, r19	; 0x800226 <fat_fs_handles+0x3>
    1aa2:	40 93 27 02 	sts	0x0227, r20	; 0x800227 <fat_fs_handles+0x4>
    1aa6:	50 93 28 02 	sts	0x0228, r21	; 0x800228 <fat_fs_handles+0x5>
    1aaa:	60 93 29 02 	sts	0x0229, r22	; 0x800229 <fat_fs_handles+0x6>
    1aae:	70 93 2a 02 	sts	0x022A, r23	; 0x80022a <fat_fs_handles+0x7>
    1ab2:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <fat_fs_handles+0x8>
    1ab6:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <fat_fs_handles+0x9>
    1aba:	e9 ad       	ldd	r30, Y+57	; 0x39
    1abc:	fa ad       	ldd	r31, Y+58	; 0x3a
    1abe:	af 01       	movw	r20, r30
    1ac0:	2e 2f       	mov	r18, r30
    1ac2:	35 2f       	mov	r19, r21
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__muldi3>
    1ad4:	a2 2c       	mov	r10, r2
    1ad6:	b3 2c       	mov	r11, r3
    1ad8:	c4 2c       	mov	r12, r4
    1ada:	d5 2c       	mov	r13, r5
    1adc:	ee a0       	ldd	r14, Y+38	; 0x26
    1ade:	fe a4       	ldd	r15, Y+46	; 0x2e
    1ae0:	08 2d       	mov	r16, r8
    1ae2:	19 2d       	mov	r17, r9
    1ae4:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    1ae8:	2e a7       	std	Y+46, r18	; 0x2e
    1aea:	39 af       	std	Y+57, r19	; 0x39
    1aec:	54 2e       	mov	r5, r20
    1aee:	45 2e       	mov	r4, r21
    1af0:	36 2e       	mov	r3, r22
    1af2:	27 2e       	mov	r2, r23
    1af4:	8b af       	std	Y+59, r24	; 0x3b
    1af6:	66 96       	adiw	r28, 0x16	; 22
    1af8:	9f af       	std	Y+63, r25	; 0x3f
    1afa:	66 97       	sbiw	r28, 0x16	; 22
    1afc:	20 93 2d 02 	sts	0x022D, r18	; 0x80022d <fat_fs_handles+0xa>
    1b00:	30 93 2e 02 	sts	0x022E, r19	; 0x80022e <fat_fs_handles+0xb>
    1b04:	40 93 2f 02 	sts	0x022F, r20	; 0x80022f <fat_fs_handles+0xc>
    1b08:	50 93 30 02 	sts	0x0230, r21	; 0x800230 <fat_fs_handles+0xd>
    1b0c:	60 93 31 02 	sts	0x0231, r22	; 0x800231 <fat_fs_handles+0xe>
    1b10:	70 93 32 02 	sts	0x0232, r23	; 0x800232 <fat_fs_handles+0xf>
    1b14:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <fat_fs_handles+0x10>
    1b18:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <fat_fs_handles+0x11>
    1b1c:	61 96       	adiw	r28, 0x11	; 17
    1b1e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b20:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b22:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b24:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b26:	61 97       	sbiw	r28, 0x11	; 17
    1b28:	2e 5f       	subi	r18, 0xFE	; 254
    1b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b30:	d3 01       	movw	r26, r6
    1b32:	18 96       	adiw	r26, 0x08	; 8
    1b34:	8c 91       	ld	r24, X
    1b36:	86 30       	cpi	r24, 0x06	; 6
    1b38:	29 f0       	breq	.+10     	; 0x1b44 <fat_open+0x314>
    1b3a:	64 e0       	ldi	r22, 0x04	; 4
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	04 c0       	rjmp	.+8      	; 0x1b4c <fat_open+0x31c>
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	e3 e2       	ldi	r30, 0x23	; 35
    1b4e:	f2 e0       	ldi	r31, 0x02	; 2
    1b50:	0e 94 49 25 	call	0x4a92	; 0x4a92 <__mulsi3>
    1b54:	62 8b       	std	Z+18, r22	; 0x12
    1b56:	73 8b       	std	Z+19, r23	; 0x13
    1b58:	84 8b       	std	Z+20, r24	; 0x14
    1b5a:	95 8b       	std	Z+21, r25	; 0x15
    1b5c:	af a8       	ldd	r10, Y+55	; 0x37
    1b5e:	b8 ac       	ldd	r11, Y+56	; 0x38
    1b60:	b7 8a       	std	Z+23, r11	; 0x17
    1b62:	a6 8a       	std	Z+22, r10	; 0x16
    1b64:	2a 96       	adiw	r28, 0x0a	; 10
    1b66:	cf ac       	ldd	r12, Y+63	; 0x3f
    1b68:	2a 97       	sbiw	r28, 0x0a	; 10
    1b6a:	ca 9c       	mul	r12, r10
    1b6c:	c0 01       	movw	r24, r0
    1b6e:	cb 9c       	mul	r12, r11
    1b70:	90 0d       	add	r25, r0
    1b72:	11 24       	eor	r1, r1
    1b74:	91 8f       	std	Z+25, r25	; 0x19
    1b76:	80 8f       	std	Z+24, r24	; 0x18
    1b78:	d3 01       	movw	r26, r6
    1b7a:	18 96       	adiw	r26, 0x08	; 8
    1b7c:	8c 91       	ld	r24, X
    1b7e:	86 30       	cpi	r24, 0x06	; 6
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <fat_open+0x354>
    1b82:	56 c0       	rjmp	.+172    	; 0x1c30 <fat_open+0x400>
    1b84:	29 96       	adiw	r28, 0x09	; 9
    1b86:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b88:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b8a:	29 97       	sbiw	r28, 0x09	; 9
    1b8c:	af 01       	movw	r20, r30
    1b8e:	af a4       	ldd	r10, Y+47	; 0x2f
    1b90:	b8 a8       	ldd	r11, Y+48	; 0x30
    1b92:	c1 2c       	mov	r12, r1
    1b94:	d1 2c       	mov	r13, r1
    1b96:	e1 2c       	mov	r14, r1
    1b98:	f1 2c       	mov	r15, r1
    1b9a:	00 e0       	ldi	r16, 0x00	; 0
    1b9c:	10 e0       	ldi	r17, 0x00	; 0
    1b9e:	2e 2f       	mov	r18, r30
    1ba0:	35 2f       	mov	r19, r21
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	50 e0       	ldi	r21, 0x00	; 0
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__muldi3>
    1bb2:	2b 96       	adiw	r28, 0x0b	; 11
    1bb4:	af ac       	ldd	r10, Y+63	; 0x3f
    1bb6:	2b 97       	sbiw	r28, 0x0b	; 11
    1bb8:	b1 2c       	mov	r11, r1
    1bba:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__muldi3>
    1bbe:	ae a4       	ldd	r10, Y+46	; 0x2e
    1bc0:	b9 ac       	ldd	r11, Y+57	; 0x39
    1bc2:	c5 2c       	mov	r12, r5
    1bc4:	d4 2c       	mov	r13, r4
    1bc6:	e3 2c       	mov	r14, r3
    1bc8:	f2 2c       	mov	r15, r2
    1bca:	0b ad       	ldd	r16, Y+59	; 0x3b
    1bcc:	66 96       	adiw	r28, 0x16	; 22
    1bce:	1f ad       	ldd	r17, Y+63	; 0x3f
    1bd0:	66 97       	sbiw	r28, 0x16	; 22
    1bd2:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    1bd6:	a2 2e       	mov	r10, r18
    1bd8:	b3 2e       	mov	r11, r19
    1bda:	c4 2e       	mov	r12, r20
    1bdc:	d5 2e       	mov	r13, r21
    1bde:	e6 2e       	mov	r14, r22
    1be0:	f7 2e       	mov	r15, r23
    1be2:	a8 2f       	mov	r26, r24
    1be4:	19 2f       	mov	r17, r25
    1be6:	e3 e2       	ldi	r30, 0x23	; 35
    1be8:	f2 e0       	ldi	r31, 0x02	; 2
    1bea:	22 a3       	std	Z+34, r18	; 0x22
    1bec:	33 a3       	std	Z+35, r19	; 0x23
    1bee:	44 a3       	std	Z+36, r20	; 0x24
    1bf0:	55 a3       	std	Z+37, r21	; 0x25
    1bf2:	66 a3       	std	Z+38, r22	; 0x26
    1bf4:	77 a3       	std	Z+39, r23	; 0x27
    1bf6:	80 a7       	std	Z+40, r24	; 0x28
    1bf8:	91 a7       	std	Z+41, r25	; 0x29
    1bfa:	2d 96       	adiw	r28, 0x0d	; 13
    1bfc:	2e ad       	ldd	r18, Y+62	; 0x3e
    1bfe:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c00:	2d 97       	sbiw	r28, 0x0d	; 13
    1c02:	19 01       	movw	r2, r18
    1c04:	33 2d       	mov	r19, r3
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	05 e0       	ldi	r16, 0x05	; 5
    1c14:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
    1c18:	0a 2f       	mov	r16, r26
    1c1a:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    1c1e:	22 8f       	std	Z+26, r18	; 0x1a
    1c20:	33 8f       	std	Z+27, r19	; 0x1b
    1c22:	44 8f       	std	Z+28, r20	; 0x1c
    1c24:	55 8f       	std	Z+29, r21	; 0x1d
    1c26:	66 8f       	std	Z+30, r22	; 0x1e
    1c28:	77 8f       	std	Z+31, r23	; 0x1f
    1c2a:	80 a3       	std	Z+32, r24	; 0x20
    1c2c:	91 a3       	std	Z+33, r25	; 0x21
    1c2e:	a8 c0       	rjmp	.+336    	; 0x1d80 <fat_open+0x550>
    1c30:	0f 2e       	mov	r0, r31
    1c32:	f3 e2       	ldi	r31, 0x23	; 35
    1c34:	8f 2e       	mov	r8, r31
    1c36:	f2 e0       	ldi	r31, 0x02	; 2
    1c38:	9f 2e       	mov	r9, r31
    1c3a:	f0 2d       	mov	r31, r0
    1c3c:	af a4       	ldd	r10, Y+47	; 0x2f
    1c3e:	b8 a8       	ldd	r11, Y+48	; 0x30
    1c40:	c1 2c       	mov	r12, r1
    1c42:	d1 2c       	mov	r13, r1
    1c44:	e1 2c       	mov	r14, r1
    1c46:	f1 2c       	mov	r15, r1
    1c48:	00 e0       	ldi	r16, 0x00	; 0
    1c4a:	10 e0       	ldi	r17, 0x00	; 0
    1c4c:	2b 96       	adiw	r28, 0x0b	; 11
    1c4e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1c50:	2b 97       	sbiw	r28, 0x0b	; 11
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__muldi3>
    1c64:	27 96       	adiw	r28, 0x07	; 7
    1c66:	cc ac       	ldd	r12, Y+60	; 0x3c
    1c68:	dd ac       	ldd	r13, Y+61	; 0x3d
    1c6a:	ee ac       	ldd	r14, Y+62	; 0x3e
    1c6c:	ff ac       	ldd	r15, Y+63	; 0x3f
    1c6e:	27 97       	sbiw	r28, 0x07	; 7
    1c70:	56 01       	movw	r10, r12
    1c72:	67 01       	movw	r12, r14
    1c74:	e1 2c       	mov	r14, r1
    1c76:	f1 2c       	mov	r15, r1
    1c78:	87 01       	movw	r16, r14
    1c7a:	ae a2       	std	Y+38, r10	; 0x26
    1c7c:	bf a2       	std	Y+39, r11	; 0x27
    1c7e:	c8 a6       	std	Y+40, r12	; 0x28
    1c80:	d9 a6       	std	Y+41, r13	; 0x29
    1c82:	ea a6       	std	Y+42, r14	; 0x2a
    1c84:	fb a6       	std	Y+43, r15	; 0x2b
    1c86:	0c a7       	std	Y+44, r16	; 0x2c
    1c88:	1d a7       	std	Y+45, r17	; 0x2d
    1c8a:	e1 2c       	mov	r14, r1
    1c8c:	f1 2c       	mov	r15, r1
    1c8e:	00 e0       	ldi	r16, 0x00	; 0
    1c90:	10 e0       	ldi	r17, 0x00	; 0
    1c92:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__muldi3>
    1c96:	ae a4       	ldd	r10, Y+46	; 0x2e
    1c98:	b9 ac       	ldd	r11, Y+57	; 0x39
    1c9a:	c5 2c       	mov	r12, r5
    1c9c:	d4 2c       	mov	r13, r4
    1c9e:	e3 2c       	mov	r14, r3
    1ca0:	f2 2c       	mov	r15, r2
    1ca2:	0b ad       	ldd	r16, Y+59	; 0x3b
    1ca4:	66 96       	adiw	r28, 0x16	; 22
    1ca6:	1f ad       	ldd	r17, Y+63	; 0x3f
    1ca8:	66 97       	sbiw	r28, 0x16	; 22
    1caa:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    1cae:	d4 01       	movw	r26, r8
    1cb0:	5a 96       	adiw	r26, 0x1a	; 26
    1cb2:	2c 93       	st	X, r18
    1cb4:	5a 97       	sbiw	r26, 0x1a	; 26
    1cb6:	5b 96       	adiw	r26, 0x1b	; 27
    1cb8:	3c 93       	st	X, r19
    1cba:	5b 97       	sbiw	r26, 0x1b	; 27
    1cbc:	5c 96       	adiw	r26, 0x1c	; 28
    1cbe:	4c 93       	st	X, r20
    1cc0:	5c 97       	sbiw	r26, 0x1c	; 28
    1cc2:	5d 96       	adiw	r26, 0x1d	; 29
    1cc4:	5c 93       	st	X, r21
    1cc6:	5d 97       	sbiw	r26, 0x1d	; 29
    1cc8:	5e 96       	adiw	r26, 0x1e	; 30
    1cca:	6c 93       	st	X, r22
    1ccc:	5e 97       	sbiw	r26, 0x1e	; 30
    1cce:	5f 96       	adiw	r26, 0x1f	; 31
    1cd0:	7c 93       	st	X, r23
    1cd2:	5f 97       	sbiw	r26, 0x1f	; 31
    1cd4:	90 96       	adiw	r26, 0x20	; 32
    1cd6:	8c 93       	st	X, r24
    1cd8:	90 97       	sbiw	r26, 0x20	; 32
    1cda:	91 96       	adiw	r26, 0x21	; 33
    1cdc:	9c 93       	st	X, r25
    1cde:	91 97       	sbiw	r26, 0x21	; 33
    1ce0:	65 96       	adiw	r28, 0x15	; 21
    1ce2:	ac ac       	ldd	r10, Y+60	; 0x3c
    1ce4:	bd ac       	ldd	r11, Y+61	; 0x3d
    1ce6:	ce ac       	ldd	r12, Y+62	; 0x3e
    1ce8:	df ac       	ldd	r13, Y+63	; 0x3f
    1cea:	65 97       	sbiw	r28, 0x15	; 21
    1cec:	9a 96       	adiw	r26, 0x2a	; 42
    1cee:	ad 92       	st	X+, r10
    1cf0:	bd 92       	st	X+, r11
    1cf2:	cd 92       	st	X+, r12
    1cf4:	dc 92       	st	X, r13
    1cf6:	9d 97       	sbiw	r26, 0x2d	; 45
    1cf8:	43 c0       	rjmp	.+134    	; 0x1d80 <fat_open+0x550>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	42 c0       	rjmp	.+132    	; 0x1d84 <fat_open+0x554>
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	3f c0       	rjmp	.+126    	; 0x1d84 <fat_open+0x554>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	3c c0       	rjmp	.+120    	; 0x1d84 <fat_open+0x554>
    1d0c:	3c 01       	movw	r6, r24
    1d0e:	e3 e2       	ldi	r30, 0x23	; 35
    1d10:	f2 e0       	ldi	r31, 0x02	; 2
    1d12:	82 e3       	ldi	r24, 0x32	; 50
    1d14:	df 01       	movw	r26, r30
    1d16:	1d 92       	st	X+, r1
    1d18:	8a 95       	dec	r24
    1d1a:	e9 f7       	brne	.-6      	; 0x1d16 <fat_open+0x4e6>
    1d1c:	71 82       	std	Z+1, r7	; 0x01
    1d1e:	60 82       	st	Z, r6
    1d20:	f3 01       	movw	r30, r6
    1d22:	81 84       	ldd	r8, Z+9	; 0x09
    1d24:	92 84       	ldd	r9, Z+10	; 0x0a
    1d26:	a3 84       	ldd	r10, Z+11	; 0x0b
    1d28:	b4 84       	ldd	r11, Z+12	; 0x0c
    1d2a:	28 2d       	mov	r18, r8
    1d2c:	39 2d       	mov	r19, r9
    1d2e:	4a 2d       	mov	r20, r10
    1d30:	5b 2d       	mov	r21, r11
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	09 e0       	ldi	r16, 0x09	; 9
    1d3c:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
    1d40:	22 2e       	mov	r2, r18
    1d42:	33 2e       	mov	r3, r19
    1d44:	44 2e       	mov	r4, r20
    1d46:	55 2e       	mov	r5, r21
    1d48:	6e a3       	std	Y+38, r22	; 0x26
    1d4a:	7e a7       	std	Y+46, r23	; 0x2e
    1d4c:	88 2e       	mov	r8, r24
    1d4e:	99 2e       	mov	r9, r25
    1d50:	ab e0       	ldi	r26, 0x0B	; 11
    1d52:	0e 94 56 26 	call	0x4cac	; 0x4cac <__adddi3_s8>
    1d56:	01 90       	ld	r0, Z+
    1d58:	f0 81       	ld	r31, Z
    1d5a:	e0 2d       	mov	r30, r0
    1d5c:	0f 2e       	mov	r0, r31
    1d5e:	f5 e2       	ldi	r31, 0x25	; 37
    1d60:	ef 2e       	mov	r14, r31
    1d62:	f1 2c       	mov	r15, r1
    1d64:	f0 2d       	mov	r31, r0
    1d66:	8e 01       	movw	r16, r28
    1d68:	0f 5f       	subi	r16, 0xFF	; 255
    1d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6c:	09 95       	icall
    1d6e:	81 11       	cpse	r24, r1
    1d70:	96 cd       	rjmp	.-1236   	; 0x189e <fat_open+0x6e>
    1d72:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <fat_fs_handles+0x1>
    1d76:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <fat_fs_handles>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <fat_open+0x554>
    1d80:	83 e2       	ldi	r24, 0x23	; 35
    1d82:	92 e0       	ldi	r25, 0x02	; 2
    1d84:	cb 5a       	subi	r28, 0xAB	; 171
    1d86:	df 4f       	sbci	r29, 0xFF	; 255
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	cf 90       	pop	r12
    1da2:	bf 90       	pop	r11
    1da4:	af 90       	pop	r10
    1da6:	9f 90       	pop	r9
    1da8:	8f 90       	pop	r8
    1daa:	7f 90       	pop	r7
    1dac:	6f 90       	pop	r6
    1dae:	5f 90       	pop	r5
    1db0:	4f 90       	pop	r4
    1db2:	3f 90       	pop	r3
    1db4:	2f 90       	pop	r2
    1db6:	08 95       	ret

00001db8 <fat_open_file>:
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	81 f0       	breq	.+32     	; 0x1de0 <fat_open_file+0x28>
    1dc0:	61 15       	cp	r22, r1
    1dc2:	71 05       	cpc	r23, r1
    1dc4:	81 f0       	breq	.+32     	; 0x1de6 <fat_open_file+0x2e>
    1dc6:	eb 01       	movw	r28, r22
    1dc8:	28 a1       	ldd	r18, Y+32	; 0x20
    1dca:	24 fd       	sbrc	r18, 4
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <fat_open_file+0x34>
    1dce:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <fat_file_handles>
    1dd2:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <fat_file_handles+0x1>
    1dd6:	23 2b       	or	r18, r19
    1dd8:	61 f0       	breq	.+24     	; 0x1df2 <fat_open_file+0x3a>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	27 c0       	rjmp	.+78     	; 0x1e2e <fat_open_file+0x76>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	24 c0       	rjmp	.+72     	; 0x1e2e <fat_open_file+0x76>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	21 c0       	rjmp	.+66     	; 0x1e2e <fat_open_file+0x76>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	1e c0       	rjmp	.+60     	; 0x1e2e <fat_open_file+0x76>
    1df2:	21 e3       	ldi	r18, 0x31	; 49
    1df4:	fb 01       	movw	r30, r22
    1df6:	a6 ee       	ldi	r26, 0xE6	; 230
    1df8:	b1 e0       	ldi	r27, 0x01	; 1
    1dfa:	01 90       	ld	r0, Z+
    1dfc:	0d 92       	st	X+, r0
    1dfe:	2a 95       	dec	r18
    1e00:	e1 f7       	brne	.-8      	; 0x1dfa <fat_open_file+0x42>
    1e02:	e4 ee       	ldi	r30, 0xE4	; 228
    1e04:	f1 e0       	ldi	r31, 0x01	; 1
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	13 aa       	std	Z+51, r1	; 0x33
    1e0c:	14 aa       	std	Z+52, r1	; 0x34
    1e0e:	15 aa       	std	Z+53, r1	; 0x35
    1e10:	16 aa       	std	Z+54, r1	; 0x36
    1e12:	17 aa       	std	Z+55, r1	; 0x37
    1e14:	10 ae       	std	Z+56, r1	; 0x38
    1e16:	11 ae       	std	Z+57, r1	; 0x39
    1e18:	12 ae       	std	Z+58, r1	; 0x3a
    1e1a:	eb 01       	movw	r28, r22
    1e1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e20:	ab a1       	ldd	r26, Y+35	; 0x23
    1e22:	bc a1       	ldd	r27, Y+36	; 0x24
    1e24:	83 af       	std	Z+59, r24	; 0x3b
    1e26:	94 af       	std	Z+60, r25	; 0x3c
    1e28:	a5 af       	std	Z+61, r26	; 0x3d
    1e2a:	b6 af       	std	Z+62, r27	; 0x3e
    1e2c:	cf 01       	movw	r24, r30
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	08 95       	ret

00001e34 <fat_close_file>:
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	19 f0       	breq	.+6      	; 0x1e3e <fat_close_file+0xa>
    1e38:	fc 01       	movw	r30, r24
    1e3a:	11 82       	std	Z+1, r1	; 0x01
    1e3c:	10 82       	st	Z, r1
    1e3e:	08 95       	ret

00001e40 <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    1e40:	2f 92       	push	r2
    1e42:	3f 92       	push	r3
    1e44:	4f 92       	push	r4
    1e46:	5f 92       	push	r5
    1e48:	6f 92       	push	r6
    1e4a:	7f 92       	push	r7
    1e4c:	8f 92       	push	r8
    1e4e:	9f 92       	push	r9
    1e50:	af 92       	push	r10
    1e52:	bf 92       	push	r11
    1e54:	cf 92       	push	r12
    1e56:	df 92       	push	r13
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	66 97       	sbiw	r28, 0x16	; 22
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	9e 8b       	std	Y+22, r25	; 0x16
    1e76:	8d 8b       	std	Y+21, r24	; 0x15
    1e78:	78 8b       	std	Y+16, r23	; 0x10
    1e7a:	6f 87       	std	Y+15, r22	; 0x0f
    1e7c:	5c 8b       	std	Y+20, r21	; 0x14
    1e7e:	4b 8b       	std	Y+19, r20	; 0x13
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <fat_write_file+0x46>
    1e84:	63 c2       	rjmp	.+1222   	; 0x234c <fat_write_file+0x50c>
    1e86:	67 2b       	or	r22, r23
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <fat_write_file+0x4c>
    1e8a:	63 c2       	rjmp	.+1222   	; 0x2352 <fat_write_file+0x512>
    1e8c:	45 2b       	or	r20, r21
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <fat_write_file+0x52>
    1e90:	63 c2       	rjmp	.+1222   	; 0x2358 <fat_write_file+0x518>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    1e92:	dc 01       	movw	r26, r24
    1e94:	d3 96       	adiw	r26, 0x33	; 51
    1e96:	bc 91       	ld	r27, X
    1e98:	b9 83       	std	Y+1, r27	; 0x01
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	f4 a9       	ldd	r31, Z+52	; 0x34
    1e9e:	fa 83       	std	Y+2, r31	; 0x02
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	d5 96       	adiw	r26, 0x35	; 53
    1ea4:	bc 91       	ld	r27, X
    1ea6:	bb 83       	std	Y+3, r27	; 0x03
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	f6 a9       	ldd	r31, Z+54	; 0x36
    1eac:	fc 83       	std	Y+4, r31	; 0x04
    1eae:	dc 01       	movw	r26, r24
    1eb0:	d7 96       	adiw	r26, 0x37	; 55
    1eb2:	bc 91       	ld	r27, X
    1eb4:	bd 83       	std	Y+5, r27	; 0x05
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	f0 ad       	ldd	r31, Z+56	; 0x38
    1eba:	fe 83       	std	Y+6, r31	; 0x06
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	d9 96       	adiw	r26, 0x39	; 57
    1ec0:	bc 91       	ld	r27, X
    1ec2:	bf 83       	std	Y+7, r27	; 0x07
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	f2 ad       	ldd	r31, Z+58	; 0x3a
    1ec8:	f8 87       	std	Y+8, r31	; 0x08
    1eca:	fc 01       	movw	r30, r24
    1ecc:	87 a1       	ldd	r24, Z+39	; 0x27
    1ece:	90 a5       	ldd	r25, Z+40	; 0x28
    1ed0:	a1 a5       	ldd	r26, Z+41	; 0x29
    1ed2:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1ed4:	1c 01       	movw	r2, r24
    1ed6:	2d 01       	movw	r4, r26
    1ed8:	29 81       	ldd	r18, Y+1	; 0x01
    1eda:	3a 81       	ldd	r19, Y+2	; 0x02
    1edc:	4b 81       	ldd	r20, Y+3	; 0x03
    1ede:	5c 81       	ldd	r21, Y+4	; 0x04
    1ee0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ee2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee6:	98 85       	ldd	r25, Y+8	; 0x08
    1ee8:	a2 2c       	mov	r10, r2
    1eea:	b3 2c       	mov	r11, r3
    1eec:	c4 2c       	mov	r12, r4
    1eee:	d5 2c       	mov	r13, r5
    1ef0:	e1 2c       	mov	r14, r1
    1ef2:	f1 2c       	mov	r15, r1
    1ef4:	00 e0       	ldi	r16, 0x00	; 0
    1ef6:	10 e0       	ldi	r17, 0x00	; 0
    1ef8:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__cmpdi2>
    1efc:	11 f0       	breq	.+4      	; 0x1f02 <fat_write_file+0xc2>
    1efe:	08 f0       	brcs	.+2      	; 0x1f02 <fat_write_file+0xc2>
    1f00:	2e c2       	rjmp	.+1116   	; 0x235e <fat_write_file+0x51e>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    1f02:	01 90       	ld	r0, Z+
    1f04:	f0 81       	ld	r31, Z
    1f06:	e0 2d       	mov	r30, r0
    1f08:	e0 8c       	ldd	r14, Z+24	; 0x18
    1f0a:	f1 8c       	ldd	r15, Z+25	; 0x19
    1f0c:	fa 8a       	std	Y+18, r15	; 0x12
    1f0e:	e9 8a       	std	Y+17, r14	; 0x11
    cluster_t cluster_num = fd->pos_cluster;
    1f10:	ad 89       	ldd	r26, Y+21	; 0x15
    1f12:	be 89       	ldd	r27, Y+22	; 0x16
    1f14:	db 96       	adiw	r26, 0x3b	; 59
    1f16:	0d 91       	ld	r16, X+
    1f18:	1d 91       	ld	r17, X+
    1f1a:	2d 91       	ld	r18, X+
    1f1c:	3c 91       	ld	r19, X
    1f1e:	de 97       	sbiw	r26, 0x3e	; 62
    1f20:	0b 87       	std	Y+11, r16	; 0x0b
    1f22:	1c 87       	std	Y+12, r17	; 0x0c
    1f24:	2d 87       	std	Y+13, r18	; 0x0d
    1f26:	3e 87       	std	Y+14, r19	; 0x0e
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    1f28:	c7 01       	movw	r24, r14
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	e9 80       	ldd	r14, Y+1	; 0x01
    1f2e:	fa 80       	ldd	r15, Y+2	; 0x02
    1f30:	e8 22       	and	r14, r24
    1f32:	f9 22       	and	r15, r25
    1f34:	fa 86       	std	Y+10, r15	; 0x0a
    1f36:	e9 86       	std	Y+9, r14	; 0x09
	
	
    /* find cluster in which to start writing */
    if(!cluster_num)
    1f38:	01 2b       	or	r16, r17
    1f3a:	02 2b       	or	r16, r18
    1f3c:	03 2b       	or	r16, r19
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <fat_write_file+0x102>
    1f40:	89 c0       	rjmp	.+274    	; 0x2054 <fat_write_file+0x214>
	{
        cluster_num = fd->dir_entry.cluster;
    1f42:	93 96       	adiw	r26, 0x23	; 35
    1f44:	0d 91       	ld	r16, X+
    1f46:	1d 91       	ld	r17, X+
    1f48:	2d 91       	ld	r18, X+
    1f4a:	3c 91       	ld	r19, X
    1f4c:	96 97       	sbiw	r26, 0x26	; 38
    1f4e:	0b 87       	std	Y+11, r16	; 0x0b
    1f50:	1c 87       	std	Y+12, r17	; 0x0c
    1f52:	2d 87       	std	Y+13, r18	; 0x0d
    1f54:	3e 87       	std	Y+14, r19	; 0x0e
        
        if(!cluster_num)
    1f56:	01 2b       	or	r16, r17
    1f58:	02 2b       	or	r16, r18
    1f5a:	03 2b       	or	r16, r19
    1f5c:	11 f5       	brne	.+68     	; 0x1fa2 <fat_write_file+0x162>
        {
            if(!fd->pos)
    1f5e:	29 81       	ldd	r18, Y+1	; 0x01
    1f60:	3a 81       	ldd	r19, Y+2	; 0x02
    1f62:	8f 81       	ldd	r24, Y+7	; 0x07
    1f64:	98 85       	ldd	r25, Y+8	; 0x08
    1f66:	a0 e0       	ldi	r26, 0x00	; 0
    1f68:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <__cmpdi2_s8>
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <fat_write_file+0x130>
    1f6e:	fa c1       	rjmp	.+1012   	; 0x2364 <fat_write_file+0x524>
            { 
				
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    1f70:	01 e0       	ldi	r16, 0x01	; 1
    1f72:	10 e0       	ldi	r17, 0x00	; 0
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	50 e0       	ldi	r21, 0x00	; 0
    1f7c:	ba 01       	movw	r22, r20
    1f7e:	cf 01       	movw	r24, r30
    1f80:	0e 94 ac 03 	call	0x758	; 0x758 <fat_append_clusters>
    1f84:	6b 87       	std	Y+11, r22	; 0x0b
    1f86:	7c 87       	std	Y+12, r23	; 0x0c
    1f88:	8d 87       	std	Y+13, r24	; 0x0d
    1f8a:	9e 87       	std	Y+14, r25	; 0x0e
    1f8c:	ed 89       	ldd	r30, Y+21	; 0x15
    1f8e:	fe 89       	ldd	r31, Y+22	; 0x16
    1f90:	63 a3       	std	Z+35, r22	; 0x23
    1f92:	74 a3       	std	Z+36, r23	; 0x24
    1f94:	85 a3       	std	Z+37, r24	; 0x25
    1f96:	96 a3       	std	Z+38, r25	; 0x26
                if(!cluster_num)
    1f98:	67 2b       	or	r22, r23
    1f9a:	68 2b       	or	r22, r24
    1f9c:	69 2b       	or	r22, r25
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <fat_write_file+0x162>
    1fa0:	e4 c1       	rjmp	.+968    	; 0x236a <fat_write_file+0x52a>
            {
                return -1;
            }
        }

        if(fd->pos)
    1fa2:	ad 89       	ldd	r26, Y+21	; 0x15
    1fa4:	be 89       	ldd	r27, Y+22	; 0x16
    1fa6:	d3 96       	adiw	r26, 0x33	; 51
    1fa8:	1c 91       	ld	r17, X
    1faa:	d3 97       	sbiw	r26, 0x33	; 51
    1fac:	d4 96       	adiw	r26, 0x34	; 52
    1fae:	bc 91       	ld	r27, X
    1fb0:	ed 89       	ldd	r30, Y+21	; 0x15
    1fb2:	fe 89       	ldd	r31, Y+22	; 0x16
    1fb4:	05 a9       	ldd	r16, Z+53	; 0x35
    1fb6:	f6 a8       	ldd	r15, Z+54	; 0x36
    1fb8:	67 a9       	ldd	r22, Z+55	; 0x37
    1fba:	70 ad       	ldd	r23, Z+56	; 0x38
    1fbc:	21 2f       	mov	r18, r17
    1fbe:	3b 2f       	mov	r19, r27
    1fc0:	40 2f       	mov	r20, r16
    1fc2:	5f 2d       	mov	r21, r15
    1fc4:	81 ad       	ldd	r24, Z+57	; 0x39
    1fc6:	92 ad       	ldd	r25, Z+58	; 0x3a
    1fc8:	a0 e0       	ldi	r26, 0x00	; 0
    1fca:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <__cmpdi2_s8>
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <fat_write_file+0x192>
    1fd0:	41 c0       	rjmp	.+130    	; 0x2054 <fat_write_file+0x214>
        {
			
            uint32_t pos = fd->pos;
    1fd2:	c1 2e       	mov	r12, r17
    1fd4:	db 2e       	mov	r13, r27
    1fd6:	e0 2e       	mov	r14, r16
			cluster_t cluster_num_next;
            while(pos >= cluster_size)
    1fd8:	09 89       	ldd	r16, Y+17	; 0x11
    1fda:	1a 89       	ldd	r17, Y+18	; 0x12
    1fdc:	28 01       	movw	r4, r16
    1fde:	61 2c       	mov	r6, r1
    1fe0:	71 2c       	mov	r7, r1
    1fe2:	8b 84       	ldd	r8, Y+11	; 0x0b
    1fe4:	9c 84       	ldd	r9, Y+12	; 0x0c
    1fe6:	ad 84       	ldd	r10, Y+13	; 0x0d
    1fe8:	be 84       	ldd	r11, Y+14	; 0x0e
    1fea:	2b c0       	rjmp	.+86     	; 0x2042 <fat_write_file+0x202>
    1fec:	c4 18       	sub	r12, r4
    1fee:	d5 08       	sbc	r13, r5
    1ff0:	e6 08       	sbc	r14, r6
    1ff2:	f7 08       	sbc	r15, r7
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    1ff4:	b5 01       	movw	r22, r10
    1ff6:	a4 01       	movw	r20, r8
    1ff8:	ad 89       	ldd	r26, Y+21	; 0x15
    1ffa:	be 89       	ldd	r27, Y+22	; 0x16
    1ffc:	8d 91       	ld	r24, X+
    1ffe:	9c 91       	ld	r25, X
    2000:	0e 94 32 01 	call	0x264	; 0x264 <fat_get_next_cluster>
                if(!cluster_num_next)
    2004:	61 15       	cp	r22, r1
    2006:	71 05       	cpc	r23, r1
    2008:	81 05       	cpc	r24, r1
    200a:	91 05       	cpc	r25, r1
    200c:	c1 f4       	brne	.+48     	; 0x203e <fat_write_file+0x1fe>
                {
                    if(pos != 0)
    200e:	c1 14       	cp	r12, r1
    2010:	d1 04       	cpc	r13, r1
    2012:	e1 04       	cpc	r14, r1
    2014:	f1 04       	cpc	r15, r1
    2016:	09 f0       	breq	.+2      	; 0x201a <fat_write_file+0x1da>
    2018:	ab c1       	rjmp	.+854    	; 0x2370 <fat_write_file+0x530>
                        return -1; /* current file position points beyond end of file */

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    201a:	01 e0       	ldi	r16, 0x01	; 1
    201c:	10 e0       	ldi	r17, 0x00	; 0
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	b5 01       	movw	r22, r10
    2024:	a4 01       	movw	r20, r8
    2026:	ed 89       	ldd	r30, Y+21	; 0x15
    2028:	fe 89       	ldd	r31, Y+22	; 0x16
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	0e 94 ac 03 	call	0x758	; 0x758 <fat_append_clusters>
                    if(!cluster_num_next)
    2032:	61 15       	cp	r22, r1
    2034:	71 05       	cpc	r23, r1
    2036:	81 05       	cpc	r24, r1
    2038:	91 05       	cpc	r25, r1
    203a:	09 f4       	brne	.+2      	; 0x203e <fat_write_file+0x1fe>
    203c:	9c c1       	rjmp	.+824    	; 0x2376 <fat_write_file+0x536>
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    203e:	4b 01       	movw	r8, r22
    2040:	5c 01       	movw	r10, r24
        if(fd->pos)
        {
			
            uint32_t pos = fd->pos;
			cluster_t cluster_num_next;
            while(pos >= cluster_size)
    2042:	c4 14       	cp	r12, r4
    2044:	d5 04       	cpc	r13, r5
    2046:	e6 04       	cpc	r14, r6
    2048:	f7 04       	cpc	r15, r7
    204a:	80 f6       	brcc	.-96     	; 0x1fec <fat_write_file+0x1ac>
    204c:	8b 86       	std	Y+11, r8	; 0x0b
    204e:	9c 86       	std	Y+12, r9	; 0x0c
    2050:	ad 86       	std	Y+13, r10	; 0x0d
    2052:	be 86       	std	Y+14, r11	; 0x0e
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    2054:	2b 88       	ldd	r2, Y+19	; 0x13
    2056:	3c 88       	ldd	r3, Y+20	; 0x14
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    2058:	91 2c       	mov	r9, r1
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    205a:	81 2c       	mov	r8, r1
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    205c:	ad 89       	ldd	r26, Y+21	; 0x15
    205e:	be 89       	ldd	r27, Y+22	; 0x16
    2060:	6d 90       	ld	r6, X+
    2062:	7c 90       	ld	r7, X
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2064:	61 14       	cp	r6, r1
    2066:	71 04       	cpc	r7, r1
    2068:	09 f4       	brne	.+2      	; 0x206c <fat_write_file+0x22c>
    206a:	47 c0       	rjmp	.+142    	; 0x20fa <fat_write_file+0x2ba>
    206c:	0b 85       	ldd	r16, Y+11	; 0x0b
    206e:	1c 85       	ldd	r17, Y+12	; 0x0c
    2070:	2d 85       	ldd	r18, Y+13	; 0x0d
    2072:	3e 85       	ldd	r19, Y+14	; 0x0e
    2074:	02 30       	cpi	r16, 0x02	; 2
    2076:	11 05       	cpc	r17, r1
    2078:	21 05       	cpc	r18, r1
    207a:	31 05       	cpc	r19, r1
    207c:	08 f4       	brcc	.+2      	; 0x2080 <fat_write_file+0x240>
    207e:	46 c0       	rjmp	.+140    	; 0x210c <fat_write_file+0x2cc>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2080:	d9 01       	movw	r26, r18
    2082:	c8 01       	movw	r24, r16
    2084:	02 97       	sbiw	r24, 0x02	; 2
    2086:	a1 09       	sbc	r26, r1
    2088:	b1 09       	sbc	r27, r1
    208a:	7c 01       	movw	r14, r24
    208c:	8d 01       	movw	r16, r26
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	a9 01       	movw	r20, r18
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	fa 82       	std	Y+2, r15	; 0x02
    2098:	0b 83       	std	Y+3, r16	; 0x03
    209a:	1c 83       	std	Y+4, r17	; 0x04
    209c:	2d 83       	std	Y+5, r18	; 0x05
    209e:	3e 83       	std	Y+6, r19	; 0x06
    20a0:	4f 83       	std	Y+7, r20	; 0x07
    20a2:	58 87       	std	Y+8, r21	; 0x08
    20a4:	d3 01       	movw	r26, r6
    20a6:	58 96       	adiw	r26, 0x18	; 24
    20a8:	0d 91       	ld	r16, X+
    20aa:	1c 91       	ld	r17, X
    20ac:	59 97       	sbiw	r26, 0x19	; 25
    20ae:	a0 2e       	mov	r10, r16
    20b0:	b1 2e       	mov	r11, r17
    20b2:	c9 2c       	mov	r12, r9
    20b4:	d9 2c       	mov	r13, r9
    20b6:	e9 2c       	mov	r14, r9
    20b8:	f9 2c       	mov	r15, r9
    20ba:	09 2d       	mov	r16, r9
    20bc:	19 2d       	mov	r17, r9
    20be:	29 81       	ldd	r18, Y+1	; 0x01
    20c0:	3a 81       	ldd	r19, Y+2	; 0x02
    20c2:	4b 81       	ldd	r20, Y+3	; 0x03
    20c4:	5c 81       	ldd	r21, Y+4	; 0x04
    20c6:	69 2d       	mov	r22, r9
    20c8:	79 2d       	mov	r23, r9
    20ca:	89 2d       	mov	r24, r9
    20cc:	99 2d       	mov	r25, r9
    20ce:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__muldi3>
    20d2:	f3 01       	movw	r30, r6
    20d4:	a2 8c       	ldd	r10, Z+26	; 0x1a
    20d6:	b3 8c       	ldd	r11, Z+27	; 0x1b
    20d8:	c4 8c       	ldd	r12, Z+28	; 0x1c
    20da:	d5 8c       	ldd	r13, Z+29	; 0x1d
    20dc:	e6 8c       	ldd	r14, Z+30	; 0x1e
    20de:	f7 8c       	ldd	r15, Z+31	; 0x1f
    20e0:	00 a1       	ldd	r16, Z+32	; 0x20
    20e2:	11 a1       	ldd	r17, Z+33	; 0x21
    20e4:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    20e8:	a2 2e       	mov	r10, r18
    20ea:	b3 2e       	mov	r11, r19
    20ec:	c4 2e       	mov	r12, r20
    20ee:	d5 2e       	mov	r13, r21
    20f0:	e6 2e       	mov	r14, r22
    20f2:	f7 2e       	mov	r15, r23
    20f4:	08 2f       	mov	r16, r24
    20f6:	19 2f       	mov	r17, r25
    20f8:	11 c0       	rjmp	.+34     	; 0x211c <fat_write_file+0x2dc>
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    20fa:	a9 2c       	mov	r10, r9
    20fc:	b9 2c       	mov	r11, r9
    20fe:	c9 2c       	mov	r12, r9
    2100:	d9 2c       	mov	r13, r9
    2102:	e9 2c       	mov	r14, r9
    2104:	f9 2c       	mov	r15, r9
    2106:	09 2d       	mov	r16, r9
    2108:	19 2d       	mov	r17, r9
    210a:	08 c0       	rjmp	.+16     	; 0x211c <fat_write_file+0x2dc>
    210c:	a9 2c       	mov	r10, r9
    210e:	b9 2c       	mov	r11, r9
    2110:	c9 2c       	mov	r12, r9
    2112:	d9 2c       	mov	r13, r9
    2114:	e9 2c       	mov	r14, r9
    2116:	f9 2c       	mov	r15, r9
    2118:	09 2d       	mov	r16, r9
    211a:	19 2d       	mov	r17, r9
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t write_length = cluster_size - first_cluster_offset;
    211c:	89 89       	ldd	r24, Y+17	; 0x11
    211e:	9a 89       	ldd	r25, Y+18	; 0x12
    2120:	29 85       	ldd	r18, Y+9	; 0x09
    2122:	3a 85       	ldd	r19, Y+10	; 0x0a
    2124:	82 1b       	sub	r24, r18
    2126:	93 0b       	sbc	r25, r19
    2128:	21 01       	movw	r4, r2
    212a:	82 15       	cp	r24, r2
    212c:	93 05       	cpc	r25, r3
    212e:	08 f4       	brcc	.+2      	; 0x2132 <fat_write_file+0x2f2>
    2130:	2c 01       	movw	r4, r24
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    2132:	e9 85       	ldd	r30, Y+9	; 0x09
    2134:	fa 85       	ldd	r31, Y+10	; 0x0a
    2136:	af 01       	movw	r20, r30
    2138:	2e 2f       	mov	r18, r30
    213a:	35 2f       	mov	r19, r21
    213c:	49 2d       	mov	r20, r9
    213e:	59 2d       	mov	r21, r9
    2140:	69 2d       	mov	r22, r9
    2142:	79 2d       	mov	r23, r9
    2144:	89 2d       	mov	r24, r9
    2146:	99 2d       	mov	r25, r9
    2148:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    214c:	d3 01       	movw	r26, r6
    214e:	ed 91       	ld	r30, X+
    2150:	fc 91       	ld	r31, X
    2152:	04 80       	ldd	r0, Z+4	; 0x04
    2154:	f5 81       	ldd	r31, Z+5	; 0x05
    2156:	e0 2d       	mov	r30, r0
    2158:	72 01       	movw	r14, r4
    215a:	0f 85       	ldd	r16, Y+15	; 0x0f
    215c:	18 89       	ldd	r17, Y+16	; 0x10
    215e:	09 95       	icall
    2160:	88 23       	and	r24, r24
    2162:	09 f4       	brne	.+2      	; 0x2166 <fat_write_file+0x326>
    2164:	93 c0       	rjmp	.+294    	; 0x228c <fat_write_file+0x44c>
            break;

        /* calculate new file position */
        buffer += write_length;
    2166:	ef 85       	ldd	r30, Y+15	; 0x0f
    2168:	f8 89       	ldd	r31, Y+16	; 0x10
    216a:	e4 0d       	add	r30, r4
    216c:	f5 1d       	adc	r31, r5
    216e:	f8 8b       	std	Y+16, r31	; 0x10
    2170:	ef 87       	std	Y+15, r30	; 0x0f
        buffer_left -= write_length;
    2172:	24 18       	sub	r2, r4
    2174:	35 08       	sbc	r3, r5
        fd->pos += write_length;
    2176:	a2 01       	movw	r20, r4
    2178:	24 2d       	mov	r18, r4
    217a:	35 2f       	mov	r19, r21
    217c:	49 2d       	mov	r20, r9
    217e:	59 2d       	mov	r21, r9
    2180:	69 2d       	mov	r22, r9
    2182:	79 2d       	mov	r23, r9
    2184:	89 2d       	mov	r24, r9
    2186:	99 2d       	mov	r25, r9
    2188:	ad 89       	ldd	r26, Y+21	; 0x15
    218a:	be 89       	ldd	r27, Y+22	; 0x16
    218c:	d3 96       	adiw	r26, 0x33	; 51
    218e:	ac 90       	ld	r10, X
    2190:	d3 97       	sbiw	r26, 0x33	; 51
    2192:	d4 96       	adiw	r26, 0x34	; 52
    2194:	bc 90       	ld	r11, X
    2196:	d4 97       	sbiw	r26, 0x34	; 52
    2198:	d5 96       	adiw	r26, 0x35	; 53
    219a:	cc 90       	ld	r12, X
    219c:	d5 97       	sbiw	r26, 0x35	; 53
    219e:	d6 96       	adiw	r26, 0x36	; 54
    21a0:	dc 90       	ld	r13, X
    21a2:	d6 97       	sbiw	r26, 0x36	; 54
    21a4:	d7 96       	adiw	r26, 0x37	; 55
    21a6:	ec 90       	ld	r14, X
    21a8:	d7 97       	sbiw	r26, 0x37	; 55
    21aa:	d8 96       	adiw	r26, 0x38	; 56
    21ac:	fc 90       	ld	r15, X
    21ae:	d8 97       	sbiw	r26, 0x38	; 56
    21b0:	d9 96       	adiw	r26, 0x39	; 57
    21b2:	0c 91       	ld	r16, X
    21b4:	d9 97       	sbiw	r26, 0x39	; 57
    21b6:	da 96       	adiw	r26, 0x3a	; 58
    21b8:	1c 91       	ld	r17, X
    21ba:	da 97       	sbiw	r26, 0x3a	; 58
    21bc:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    21c0:	d3 96       	adiw	r26, 0x33	; 51
    21c2:	2c 93       	st	X, r18
    21c4:	d3 97       	sbiw	r26, 0x33	; 51
    21c6:	d4 96       	adiw	r26, 0x34	; 52
    21c8:	3c 93       	st	X, r19
    21ca:	d4 97       	sbiw	r26, 0x34	; 52
    21cc:	d5 96       	adiw	r26, 0x35	; 53
    21ce:	4c 93       	st	X, r20
    21d0:	d5 97       	sbiw	r26, 0x35	; 53
    21d2:	d6 96       	adiw	r26, 0x36	; 54
    21d4:	5c 93       	st	X, r21
    21d6:	d6 97       	sbiw	r26, 0x36	; 54
    21d8:	d7 96       	adiw	r26, 0x37	; 55
    21da:	6c 93       	st	X, r22
    21dc:	d7 97       	sbiw	r26, 0x37	; 55
    21de:	d8 96       	adiw	r26, 0x38	; 56
    21e0:	7c 93       	st	X, r23
    21e2:	d8 97       	sbiw	r26, 0x38	; 56
    21e4:	d9 96       	adiw	r26, 0x39	; 57
    21e6:	8c 93       	st	X, r24
    21e8:	d9 97       	sbiw	r26, 0x39	; 57
    21ea:	da 96       	adiw	r26, 0x3a	; 58
    21ec:	9c 93       	st	X, r25
    21ee:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + write_length >= cluster_size)
    21f0:	e9 85       	ldd	r30, Y+9	; 0x09
    21f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    21f4:	4e 0e       	add	r4, r30
    21f6:	5f 1e       	adc	r5, r31
    21f8:	e9 88       	ldd	r14, Y+17	; 0x11
    21fa:	fa 88       	ldd	r15, Y+18	; 0x12
    21fc:	4e 14       	cp	r4, r14
    21fe:	5f 04       	cpc	r5, r15
    2200:	a0 f1       	brcs	.+104    	; 0x226a <fat_write_file+0x42a>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2202:	4b 85       	ldd	r20, Y+11	; 0x0b
    2204:	5c 85       	ldd	r21, Y+12	; 0x0c
    2206:	6d 85       	ldd	r22, Y+13	; 0x0d
    2208:	7e 85       	ldd	r23, Y+14	; 0x0e
    220a:	8d 91       	ld	r24, X+
    220c:	9c 91       	ld	r25, X
    220e:	0e 94 32 01 	call	0x264	; 0x264 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    2212:	61 15       	cp	r22, r1
    2214:	71 05       	cpc	r23, r1
    2216:	81 05       	cpc	r24, r1
    2218:	91 05       	cpc	r25, r1
    221a:	09 f5       	brne	.+66     	; 0x225e <fat_write_file+0x41e>
    221c:	21 14       	cp	r2, r1
    221e:	31 04       	cpc	r3, r1
    2220:	b9 f0       	breq	.+46     	; 0x2250 <fat_write_file+0x410>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    2222:	01 e0       	ldi	r16, 0x01	; 1
    2224:	10 e0       	ldi	r17, 0x00	; 0
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4b 85       	ldd	r20, Y+11	; 0x0b
    222c:	5c 85       	ldd	r21, Y+12	; 0x0c
    222e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2230:	7e 85       	ldd	r23, Y+14	; 0x0e
    2232:	ad 89       	ldd	r26, Y+21	; 0x15
    2234:	be 89       	ldd	r27, Y+22	; 0x16
    2236:	8d 91       	ld	r24, X+
    2238:	9c 91       	ld	r25, X
    223a:	0e 94 ac 03 	call	0x758	; 0x758 <fat_append_clusters>
    223e:	6b 87       	std	Y+11, r22	; 0x0b
    2240:	7c 87       	std	Y+12, r23	; 0x0c
    2242:	8d 87       	std	Y+13, r24	; 0x0d
    2244:	9e 87       	std	Y+14, r25	; 0x0e
            if(!cluster_num_next)
    2246:	67 2b       	or	r22, r23
    2248:	68 2b       	or	r22, r24
    224a:	69 2b       	or	r22, r25
    224c:	09 f0       	breq	.+2      	; 0x2250 <fat_write_file+0x410>
    224e:	96 c0       	rjmp	.+300    	; 0x237c <fat_write_file+0x53c>
    2250:	ed 89       	ldd	r30, Y+21	; 0x15
    2252:	fe 89       	ldd	r31, Y+22	; 0x16
            {
                fd->pos_cluster = 0;
    2254:	13 ae       	std	Z+59, r1	; 0x3b
    2256:	14 ae       	std	Z+60, r1	; 0x3c
    2258:	15 ae       	std	Z+61, r1	; 0x3d
    225a:	16 ae       	std	Z+62, r1	; 0x3e
                break;
    225c:	17 c0       	rjmp	.+46     	; 0x228c <fat_write_file+0x44c>
        fd->pos += write_length;

        if(first_cluster_offset + write_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    225e:	6b 87       	std	Y+11, r22	; 0x0b
    2260:	7c 87       	std	Y+12, r23	; 0x0c
    2262:	8d 87       	std	Y+13, r24	; 0x0d
    2264:	9e 87       	std	Y+14, r25	; 0x0e
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    2266:	89 86       	std	Y+9, r8	; 0x09
    2268:	1a 86       	std	Y+10, r1	; 0x0a
        }

        fd->pos_cluster = cluster_num;
    226a:	eb 84       	ldd	r14, Y+11	; 0x0b
    226c:	fc 84       	ldd	r15, Y+12	; 0x0c
    226e:	0d 85       	ldd	r16, Y+13	; 0x0d
    2270:	1e 85       	ldd	r17, Y+14	; 0x0e
    2272:	ad 89       	ldd	r26, Y+21	; 0x15
    2274:	be 89       	ldd	r27, Y+22	; 0x16
    2276:	db 96       	adiw	r26, 0x3b	; 59
    2278:	ed 92       	st	X+, r14
    227a:	fd 92       	st	X+, r15
    227c:	0d 93       	st	X+, r16
    227e:	1c 93       	st	X, r17
    2280:	de 97       	sbiw	r26, 0x3e	; 62

    } while(buffer_left > 0); /* check if we are done */
    2282:	21 14       	cp	r2, r1
    2284:	31 04       	cpc	r3, r1
    2286:	09 f0       	breq	.+2      	; 0x228a <fat_write_file+0x44a>
    2288:	e9 ce       	rjmp	.-558    	; 0x205c <fat_write_file+0x21c>
    228a:	00 c0       	rjmp	.+0      	; 0x228c <fat_write_file+0x44c>

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    228c:	ed 89       	ldd	r30, Y+21	; 0x15
    228e:	fe 89       	ldd	r31, Y+22	; 0x16
    2290:	b3 a9       	ldd	r27, Z+51	; 0x33
    2292:	a4 a9       	ldd	r26, Z+52	; 0x34
    2294:	95 a8       	ldd	r9, Z+53	; 0x35
    2296:	86 a8       	ldd	r8, Z+54	; 0x36
    2298:	67 a9       	ldd	r22, Z+55	; 0x37
    229a:	70 ad       	ldd	r23, Z+56	; 0x38
    229c:	47 a0       	ldd	r4, Z+39	; 0x27
    229e:	50 a4       	ldd	r5, Z+40	; 0x28
    22a0:	61 a4       	ldd	r6, Z+41	; 0x29
    22a2:	72 a4       	ldd	r7, Z+42	; 0x2a
    22a4:	83 01       	movw	r16, r6
    22a6:	72 01       	movw	r14, r4
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	a9 01       	movw	r20, r18
    22ae:	49 82       	std	Y+1, r4	; 0x01
    22b0:	fa 82       	std	Y+2, r15	; 0x02
    22b2:	0b 83       	std	Y+3, r16	; 0x03
    22b4:	1c 83       	std	Y+4, r17	; 0x04
    22b6:	2d 83       	std	Y+5, r18	; 0x05
    22b8:	3e 83       	std	Y+6, r19	; 0x06
    22ba:	4f 83       	std	Y+7, r20	; 0x07
    22bc:	58 87       	std	Y+8, r21	; 0x08
    22be:	2b 2f       	mov	r18, r27
    22c0:	3a 2f       	mov	r19, r26
    22c2:	49 2d       	mov	r20, r9
    22c4:	58 2d       	mov	r21, r8
    22c6:	81 ad       	ldd	r24, Z+57	; 0x39
    22c8:	92 ad       	ldd	r25, Z+58	; 0x3a
    22ca:	a4 2c       	mov	r10, r4
    22cc:	bf 2c       	mov	r11, r15
    22ce:	c0 2e       	mov	r12, r16
    22d0:	d1 2e       	mov	r13, r17
    22d2:	e1 2c       	mov	r14, r1
    22d4:	f1 2c       	mov	r15, r1
    22d6:	00 e0       	ldi	r16, 0x00	; 0
    22d8:	10 e0       	ldi	r17, 0x00	; 0
    22da:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__cmpdi2>
    22de:	89 f1       	breq	.+98     	; 0x2342 <fat_write_file+0x502>
    22e0:	80 f1       	brcs	.+96     	; 0x2342 <fat_write_file+0x502>
#if !FAT_DELAY_DIRENTRY_UPDATE
        uint32_t size_old = fd->dir_entry.file_size;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    22e2:	b7 a3       	std	Z+39, r27	; 0x27
    22e4:	a0 a7       	std	Z+40, r26	; 0x28
    22e6:	91 a6       	std	Z+41, r9	; 0x29
    22e8:	82 a6       	std	Z+42, r8	; 0x2a

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    22ea:	bf 01       	movw	r22, r30
    22ec:	6e 5f       	subi	r22, 0xFE	; 254
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	80 81       	ld	r24, Z
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
    22f4:	0e 94 37 08 	call	0x106e	; 0x106e <fat_write_dir_entry>
    22f8:	81 11       	cpse	r24, r1
    22fa:	23 c0       	rjmp	.+70     	; 0x2342 <fat_write_file+0x502>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    22fc:	ad 89       	ldd	r26, Y+21	; 0x15
    22fe:	be 89       	ldd	r27, Y+22	; 0x16
    2300:	d3 96       	adiw	r26, 0x33	; 51
    2302:	2d 90       	ld	r2, X+
    2304:	3c 90       	ld	r3, X
    2306:	d4 97       	sbiw	r26, 0x34	; 52
    2308:	24 18       	sub	r2, r4
    230a:	35 08       	sbc	r3, r5
            fd->pos = size_old;
    230c:	e9 81       	ldd	r30, Y+1	; 0x01
    230e:	d3 96       	adiw	r26, 0x33	; 51
    2310:	ec 93       	st	X, r30
    2312:	d3 97       	sbiw	r26, 0x33	; 51
    2314:	fa 81       	ldd	r31, Y+2	; 0x02
    2316:	d4 96       	adiw	r26, 0x34	; 52
    2318:	fc 93       	st	X, r31
    231a:	d4 97       	sbiw	r26, 0x34	; 52
    231c:	eb 80       	ldd	r14, Y+3	; 0x03
    231e:	d5 96       	adiw	r26, 0x35	; 53
    2320:	ec 92       	st	X, r14
    2322:	d5 97       	sbiw	r26, 0x35	; 53
    2324:	fc 80       	ldd	r15, Y+4	; 0x04
    2326:	d6 96       	adiw	r26, 0x36	; 54
    2328:	fc 92       	st	X, r15
    232a:	d6 97       	sbiw	r26, 0x36	; 54
    232c:	d7 96       	adiw	r26, 0x37	; 55
    232e:	1c 92       	st	X, r1
    2330:	d7 97       	sbiw	r26, 0x37	; 55
    2332:	d8 96       	adiw	r26, 0x38	; 56
    2334:	1c 92       	st	X, r1
    2336:	d8 97       	sbiw	r26, 0x38	; 56
    2338:	d9 96       	adiw	r26, 0x39	; 57
    233a:	1c 92       	st	X, r1
    233c:	d9 97       	sbiw	r26, 0x39	; 57
    233e:	da 96       	adiw	r26, 0x3a	; 58
    2340:	1c 92       	st	X, r1
        }
#endif
    }

    return buffer_len - buffer_left;
    2342:	8b 89       	ldd	r24, Y+19	; 0x13
    2344:	9c 89       	ldd	r25, Y+20	; 0x14
    2346:	82 19       	sub	r24, r2
    2348:	93 09       	sbc	r25, r3
    234a:	27 c0       	rjmp	.+78     	; 0x239a <fat_write_file+0x55a>
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    234c:	8f ef       	ldi	r24, 0xFF	; 255
    234e:	9f ef       	ldi	r25, 0xFF	; 255
    2350:	24 c0       	rjmp	.+72     	; 0x239a <fat_write_file+0x55a>
    2352:	8f ef       	ldi	r24, 0xFF	; 255
    2354:	9f ef       	ldi	r25, 0xFF	; 255
    2356:	21 c0       	rjmp	.+66     	; 0x239a <fat_write_file+0x55a>
    2358:	8f ef       	ldi	r24, 0xFF	; 255
    235a:	9f ef       	ldi	r25, 0xFF	; 255
    235c:	1e c0       	rjmp	.+60     	; 0x239a <fat_write_file+0x55a>
    if(fd->pos > fd->dir_entry.file_size)
        return -1;
    235e:	8f ef       	ldi	r24, 0xFF	; 255
    2360:	9f ef       	ldi	r25, 0xFF	; 255
    2362:	1b c0       	rjmp	.+54     	; 0x239a <fat_write_file+0x55a>
                if(!cluster_num)
                    return 0;
            }
            else
            {
                return -1;
    2364:	8f ef       	ldi	r24, 0xFF	; 255
    2366:	9f ef       	ldi	r25, 0xFF	; 255
    2368:	18 c0       	rjmp	.+48     	; 0x239a <fat_write_file+0x55a>
            { 
				
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
                if(!cluster_num)
                    return 0;
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	15 c0       	rjmp	.+42     	; 0x239a <fat_write_file+0x55a>
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next)
                {
                    if(pos != 0)
                        return -1; /* current file position points beyond end of file */
    2370:	8f ef       	ldi	r24, 0xFF	; 255
    2372:	9f ef       	ldi	r25, 0xFF	; 255
    2374:	12 c0       	rjmp	.+36     	; 0x239a <fat_write_file+0x55a>

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
                    if(!cluster_num_next)
                        return 0;
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0f c0       	rjmp	.+30     	; 0x239a <fat_write_file+0x55a>

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    237c:	0b 85       	ldd	r16, Y+11	; 0x0b
    237e:	1c 85       	ldd	r17, Y+12	; 0x0c
    2380:	2d 85       	ldd	r18, Y+13	; 0x0d
    2382:	3e 85       	ldd	r19, Y+14	; 0x0e
    2384:	ad 89       	ldd	r26, Y+21	; 0x15
    2386:	be 89       	ldd	r27, Y+22	; 0x16
    2388:	db 96       	adiw	r26, 0x3b	; 59
    238a:	0d 93       	st	X+, r16
    238c:	1d 93       	st	X+, r17
    238e:	2d 93       	st	X+, r18
    2390:	3c 93       	st	X, r19
    2392:	de 97       	sbiw	r26, 0x3e	; 62
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    2394:	89 86       	std	Y+9, r8	; 0x09
    2396:	1a 86       	std	Y+10, r1	; 0x0a
    2398:	61 ce       	rjmp	.-830    	; 0x205c <fat_write_file+0x21c>
        }
#endif
    }

    return buffer_len - buffer_left;
}
    239a:	66 96       	adiw	r28, 0x16	; 22
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	ff 90       	pop	r15
    23b0:	ef 90       	pop	r14
    23b2:	df 90       	pop	r13
    23b4:	cf 90       	pop	r12
    23b6:	bf 90       	pop	r11
    23b8:	af 90       	pop	r10
    23ba:	9f 90       	pop	r9
    23bc:	8f 90       	pop	r8
    23be:	7f 90       	pop	r7
    23c0:	6f 90       	pop	r6
    23c2:	5f 90       	pop	r5
    23c4:	4f 90       	pop	r4
    23c6:	3f 90       	pop	r3
    23c8:	2f 90       	pop	r2
    23ca:	08 95       	ret

000023cc <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    23cc:	2f 92       	push	r2
    23ce:	3f 92       	push	r3
    23d0:	4f 92       	push	r4
    23d2:	5f 92       	push	r5
    23d4:	6f 92       	push	r6
    23d6:	7f 92       	push	r7
    23d8:	8f 92       	push	r8
    23da:	9f 92       	push	r9
    23dc:	af 92       	push	r10
    23de:	bf 92       	push	r11
    23e0:	cf 92       	push	r12
    23e2:	df 92       	push	r13
    23e4:	ef 92       	push	r14
    23e6:	ff 92       	push	r15
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	cf 93       	push	r28
    23ee:	df 93       	push	r29
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	60 97       	sbiw	r28, 0x10	; 16
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    if(!fd)
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	09 f4       	brne	.+2      	; 0x2406 <fat_resize_file+0x3a>
    2404:	a0 c1       	rjmp	.+832    	; 0x2746 <fat_resize_file+0x37a>
    2406:	4d 87       	std	Y+13, r20	; 0x0d
    2408:	5e 87       	std	Y+14, r21	; 0x0e
    240a:	6f 87       	std	Y+15, r22	; 0x0f
    240c:	78 8b       	std	Y+16, r23	; 0x10
    240e:	1c 01       	movw	r2, r24
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    2410:	dc 01       	movw	r26, r24
    2412:	93 96       	adiw	r26, 0x23	; 35
    2414:	2d 91       	ld	r18, X+
    2416:	3d 91       	ld	r19, X+
    2418:	4d 91       	ld	r20, X+
    241a:	5c 91       	ld	r21, X
    241c:	96 97       	sbiw	r26, 0x26	; 38
    241e:	2d 83       	std	Y+5, r18	; 0x05
    2420:	3e 83       	std	Y+6, r19	; 0x06
    2422:	4f 83       	std	Y+7, r20	; 0x07
    2424:	58 87       	std	Y+8, r21	; 0x08
    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    2426:	23 2b       	or	r18, r19
    2428:	24 2b       	or	r18, r20
    242a:	25 2b       	or	r18, r21
    242c:	09 f0       	breq	.+2      	; 0x2430 <fat_resize_file+0x64>
    242e:	bf c1       	rjmp	.+894    	; 0x27ae <fat_resize_file+0x3e2>
    2430:	2d 85       	ldd	r18, Y+13	; 0x0d
    2432:	3e 85       	ldd	r19, Y+14	; 0x0e
    2434:	4f 85       	ldd	r20, Y+15	; 0x0f
    2436:	58 89       	ldd	r21, Y+16	; 0x10
    2438:	23 2b       	or	r18, r19
    243a:	24 2b       	or	r18, r20
    243c:	25 2b       	or	r18, r21
    243e:	09 f4       	brne	.+2      	; 0x2442 <fat_resize_file+0x76>
    2440:	31 c1       	rjmp	.+610    	; 0x26a4 <fat_resize_file+0x2d8>
    2442:	ce c1       	rjmp	.+924    	; 0x27e0 <fat_resize_file+0x414>
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    2444:	4d 84       	ldd	r4, Y+13	; 0x0d
    2446:	5e 84       	ldd	r5, Y+14	; 0x0e
    2448:	6f 84       	ldd	r6, Y+15	; 0x0f
    244a:	78 88       	ldd	r7, Y+16	; 0x10

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    244c:	4d 81       	ldd	r20, Y+5	; 0x05
    244e:	5e 81       	ldd	r21, Y+6	; 0x06
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	d1 01       	movw	r26, r2
    2456:	8d 91       	ld	r24, X+
    2458:	9c 91       	ld	r25, X
    245a:	0e 94 32 01 	call	0x264	; 0x264 <fat_get_next_cluster>
    245e:	6b 01       	movw	r12, r22
    2460:	7c 01       	movw	r14, r24
            if(cluster_num_next)
    2462:	61 15       	cp	r22, r1
    2464:	71 05       	cpc	r23, r1
    2466:	81 05       	cpc	r24, r1
    2468:	91 05       	cpc	r25, r1
    246a:	71 f0       	breq	.+28     	; 0x2488 <fat_resize_file+0xbc>
            {
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
    246c:	48 18       	sub	r4, r8
    246e:	59 08       	sbc	r5, r9
    2470:	6a 08       	sbc	r6, r10
    2472:	7b 08       	sbc	r7, r11

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2474:	6d 83       	std	Y+5, r22	; 0x05
    2476:	7e 83       	std	Y+6, r23	; 0x06
    2478:	8f 83       	std	Y+7, r24	; 0x07
    247a:	98 87       	std	Y+8, r25	; 0x08
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    247c:	84 14       	cp	r8, r4
    247e:	95 04       	cpc	r9, r5
    2480:	a6 04       	cpc	r10, r6
    2482:	b7 04       	cpc	r11, r7
    2484:	18 f3       	brcs	.-58     	; 0x244c <fat_resize_file+0x80>
    2486:	47 c0       	rjmp	.+142    	; 0x2516 <fat_resize_file+0x14a>
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    2488:	84 14       	cp	r8, r4
    248a:	95 04       	cpc	r9, r5
    248c:	a6 04       	cpc	r10, r6
    248e:	b7 04       	cpc	r11, r7
    2490:	68 f0       	brcs	.+26     	; 0x24ac <fat_resize_file+0xe0>
    2492:	2d 81       	ldd	r18, Y+5	; 0x05
    2494:	3e 81       	ldd	r19, Y+6	; 0x06
    2496:	4f 81       	ldd	r20, Y+7	; 0x07
    2498:	58 85       	ldd	r21, Y+8	; 0x08
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	41 05       	cpc	r20, r1
    24a0:	51 05       	cpc	r21, r1
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <fat_resize_file+0xda>
    24a4:	58 c1       	rjmp	.+688    	; 0x2756 <fat_resize_file+0x38a>
    24a6:	69 01       	movw	r12, r18
    24a8:	7a 01       	movw	r14, r20
    24aa:	35 c0       	rjmp	.+106    	; 0x2516 <fat_resize_file+0x14a>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    24ac:	d5 01       	movw	r26, r10
    24ae:	c4 01       	movw	r24, r8
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	a1 09       	sbc	r26, r1
    24b4:	b1 09       	sbc	r27, r1
    24b6:	bc 01       	movw	r22, r24
    24b8:	cd 01       	movw	r24, r26
    24ba:	64 0d       	add	r22, r4
    24bc:	75 1d       	adc	r23, r5
    24be:	86 1d       	adc	r24, r6
    24c0:	97 1d       	adc	r25, r7
    24c2:	a5 01       	movw	r20, r10
    24c4:	94 01       	movw	r18, r8
    24c6:	0e 94 81 25 	call	0x4b02	; 0x4b02 <__udivmodsi4>
    24ca:	89 01       	movw	r16, r18
    24cc:	9a 01       	movw	r18, r20
    24ce:	4d 81       	ldd	r20, Y+5	; 0x05
    24d0:	5e 81       	ldd	r21, Y+6	; 0x06
    24d2:	6f 81       	ldd	r22, Y+7	; 0x07
    24d4:	78 85       	ldd	r23, Y+8	; 0x08
    24d6:	d1 01       	movw	r26, r2
    24d8:	8d 91       	ld	r24, X+
    24da:	9c 91       	ld	r25, X
    24dc:	0e 94 ac 03 	call	0x758	; 0x758 <fat_append_clusters>
    24e0:	6b 01       	movw	r12, r22
    24e2:	7c 01       	movw	r14, r24
            if(!cluster_new_chain)
    24e4:	67 2b       	or	r22, r23
    24e6:	68 2b       	or	r22, r24
    24e8:	69 2b       	or	r22, r25
    24ea:	09 f4       	brne	.+2      	; 0x24ee <fat_resize_file+0x122>
    24ec:	2e c1       	rjmp	.+604    	; 0x274a <fat_resize_file+0x37e>
                return 0;

            if(!cluster_num)
    24ee:	2d 81       	ldd	r18, Y+5	; 0x05
    24f0:	3e 81       	ldd	r19, Y+6	; 0x06
    24f2:	4f 81       	ldd	r20, Y+7	; 0x07
    24f4:	58 85       	ldd	r21, Y+8	; 0x08
    24f6:	23 2b       	or	r18, r19
    24f8:	24 2b       	or	r18, r20
    24fa:	25 2b       	or	r18, r21
    24fc:	41 f4       	brne	.+16     	; 0x250e <fat_resize_file+0x142>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    24fe:	d1 01       	movw	r26, r2
    2500:	93 96       	adiw	r26, 0x23	; 35
    2502:	cd 92       	st	X+, r12
    2504:	dd 92       	st	X+, r13
    2506:	ed 92       	st	X+, r14
    2508:	fc 92       	st	X, r15
    250a:	96 97       	sbiw	r26, 0x26	; 38
    250c:	04 c0       	rjmp	.+8      	; 0x2516 <fat_resize_file+0x14a>
    250e:	cd 80       	ldd	r12, Y+5	; 0x05
    2510:	de 80       	ldd	r13, Y+6	; 0x06
    2512:	ef 80       	ldd	r14, Y+7	; 0x07
    2514:	f8 84       	ldd	r15, Y+8	; 0x08
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    2516:	2d 85       	ldd	r18, Y+13	; 0x0d
    2518:	3e 85       	ldd	r19, Y+14	; 0x0e
    251a:	4f 85       	ldd	r20, Y+15	; 0x0f
    251c:	58 89       	ldd	r21, Y+16	; 0x10
    251e:	d1 01       	movw	r26, r2
    2520:	97 96       	adiw	r26, 0x27	; 39
    2522:	2d 93       	st	X+, r18
    2524:	3d 93       	st	X+, r19
    2526:	4d 93       	st	X+, r20
    2528:	5c 93       	st	X, r21
    252a:	9a 97       	sbiw	r26, 0x2a	; 42
        if(size == 0)
    252c:	23 2b       	or	r18, r19
    252e:	24 2b       	or	r18, r20
    2530:	25 2b       	or	r18, r21
    2532:	09 f0       	breq	.+2      	; 0x2536 <fat_resize_file+0x16a>
    2534:	31 c1       	rjmp	.+610    	; 0x2798 <fat_resize_file+0x3cc>
            fd->dir_entry.cluster = 0;
    2536:	f1 01       	movw	r30, r2
    2538:	13 a2       	std	Z+35, r1	; 0x23
    253a:	14 a2       	std	Z+36, r1	; 0x24
    253c:	15 a2       	std	Z+37, r1	; 0x25
    253e:	16 a2       	std	Z+38, r1	; 0x26
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    2540:	b1 01       	movw	r22, r2
    2542:	6e 5f       	subi	r22, 0xFE	; 254
    2544:	7f 4f       	sbci	r23, 0xFF	; 255
    2546:	80 81       	ld	r24, Z
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	0e 94 37 08 	call	0x106e	; 0x106e <fat_write_dir_entry>
    254e:	88 23       	and	r24, r24
    2550:	09 f4       	brne	.+2      	; 0x2554 <fat_resize_file+0x188>
    2552:	5b c1       	rjmp	.+694    	; 0x280a <fat_resize_file+0x43e>
            return 0;

        if(size == 0)
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    2554:	b7 01       	movw	r22, r14
    2556:	a6 01       	movw	r20, r12
    2558:	d1 01       	movw	r26, r2
    255a:	8d 91       	ld	r24, X+
    255c:	9c 91       	ld	r25, X
    255e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <fat_free_clusters>
    2562:	a0 c0       	rjmp	.+320    	; 0x26a4 <fat_resize_file+0x2d8>
        }
        else if(size_new <= cluster_size)
    2564:	84 14       	cp	r8, r4
    2566:	95 04       	cpc	r9, r5
    2568:	a6 04       	cpc	r10, r6
    256a:	b7 04       	cpc	r11, r7
    256c:	08 f4       	brcc	.+2      	; 0x2570 <fat_resize_file+0x1a4>
    256e:	9a c0       	rjmp	.+308    	; 0x26a4 <fat_resize_file+0x2d8>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    2570:	f1 01       	movw	r30, r2
    2572:	80 80       	ld	r8, Z
    2574:	91 80       	ldd	r9, Z+1	; 0x01
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2576:	81 14       	cp	r8, r1
    2578:	91 04       	cpc	r9, r1
    257a:	09 f4       	brne	.+2      	; 0x257e <fat_resize_file+0x1b2>
    257c:	93 c0       	rjmp	.+294    	; 0x26a4 <fat_resize_file+0x2d8>
    257e:	f2 e0       	ldi	r31, 0x02	; 2
    2580:	cf 16       	cp	r12, r31
    2582:	d1 04       	cpc	r13, r1
    2584:	e1 04       	cpc	r14, r1
    2586:	f1 04       	cpc	r15, r1
    2588:	08 f4       	brcc	.+2      	; 0x258c <fat_resize_file+0x1c0>
    258a:	8c c0       	rjmp	.+280    	; 0x26a4 <fat_resize_file+0x2d8>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    258c:	b7 01       	movw	r22, r14
    258e:	a6 01       	movw	r20, r12
    2590:	c4 01       	movw	r24, r8
    2592:	0e 94 32 01 	call	0x264	; 0x264 <fat_get_next_cluster>
    2596:	2b 01       	movw	r4, r22
    2598:	3c 01       	movw	r6, r24

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    259a:	d4 01       	movw	r26, r8
    259c:	ed 91       	ld	r30, X+
    259e:	fc 91       	ld	r31, X
    25a0:	80 85       	ldd	r24, Z+8	; 0x08
    25a2:	8b 30       	cpi	r24, 0x0B	; 11
    25a4:	e9 f5       	brne	.+122    	; 0x2620 <fat_resize_file+0x254>
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
    25a6:	8f ef       	ldi	r24, 0xFF	; 255
    25a8:	9f ef       	ldi	r25, 0xFF	; 255
    25aa:	af ef       	ldi	r26, 0xFF	; 255
    25ac:	bf e0       	ldi	r27, 0x0F	; 15
    25ae:	89 83       	std	Y+1, r24	; 0x01
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	ab 83       	std	Y+3, r26	; 0x03
    25b4:	bc 83       	std	Y+4, r27	; 0x04
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    25b6:	56 01       	movw	r10, r12
    25b8:	67 01       	movw	r12, r14
    25ba:	2a 2d       	mov	r18, r10
    25bc:	3b 2d       	mov	r19, r11
    25be:	4c 2d       	mov	r20, r12
    25c0:	5d 2d       	mov	r21, r13
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	02 e0       	ldi	r16, 0x02	; 2
    25cc:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
    25d0:	d4 01       	movw	r26, r8
    25d2:	1a 96       	adiw	r26, 0x0a	; 10
    25d4:	ac 90       	ld	r10, X
    25d6:	1a 97       	sbiw	r26, 0x0a	; 10
    25d8:	1b 96       	adiw	r26, 0x0b	; 11
    25da:	bc 90       	ld	r11, X
    25dc:	1b 97       	sbiw	r26, 0x0b	; 11
    25de:	1c 96       	adiw	r26, 0x0c	; 12
    25e0:	cc 90       	ld	r12, X
    25e2:	1c 97       	sbiw	r26, 0x0c	; 12
    25e4:	1d 96       	adiw	r26, 0x0d	; 13
    25e6:	dc 90       	ld	r13, X
    25e8:	1d 97       	sbiw	r26, 0x0d	; 13
    25ea:	1e 96       	adiw	r26, 0x0e	; 14
    25ec:	ec 90       	ld	r14, X
    25ee:	1e 97       	sbiw	r26, 0x0e	; 14
    25f0:	1f 96       	adiw	r26, 0x0f	; 15
    25f2:	fc 90       	ld	r15, X
    25f4:	1f 97       	sbiw	r26, 0x0f	; 15
    25f6:	50 96       	adiw	r26, 0x10	; 16
    25f8:	0c 91       	ld	r16, X
    25fa:	50 97       	sbiw	r26, 0x10	; 16
    25fc:	51 96       	adiw	r26, 0x11	; 17
    25fe:	1c 91       	ld	r17, X
    2600:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    2604:	04 80       	ldd	r0, Z+4	; 0x04
    2606:	f5 81       	ldd	r31, Z+5	; 0x05
    2608:	e0 2d       	mov	r30, r0
    260a:	68 94       	set
    260c:	ee 24       	eor	r14, r14
    260e:	e2 f8       	bld	r14, 2
    2610:	f1 2c       	mov	r15, r1
    2612:	8e 01       	movw	r16, r28
    2614:	0f 5f       	subi	r16, 0xFF	; 255
    2616:	1f 4f       	sbci	r17, 0xFF	; 255
    2618:	09 95       	icall
    261a:	81 11       	cpse	r24, r1
    261c:	39 c0       	rjmp	.+114    	; 0x2690 <fat_resize_file+0x2c4>
    261e:	42 c0       	rjmp	.+132    	; 0x26a4 <fat_resize_file+0x2d8>
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    2620:	8f ef       	ldi	r24, 0xFF	; 255
    2622:	9f ef       	ldi	r25, 0xFF	; 255
    2624:	9a 83       	std	Y+2, r25	; 0x02
    2626:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2628:	56 01       	movw	r10, r12
    262a:	67 01       	movw	r12, r14
    262c:	2a 2d       	mov	r18, r10
    262e:	3b 2d       	mov	r19, r11
    2630:	4c 2d       	mov	r20, r12
    2632:	5d 2d       	mov	r21, r13
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	70 e0       	ldi	r23, 0x00	; 0
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	01 e0       	ldi	r16, 0x01	; 1
    263e:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <__ashldi3>
    2642:	d4 01       	movw	r26, r8
    2644:	1a 96       	adiw	r26, 0x0a	; 10
    2646:	ac 90       	ld	r10, X
    2648:	1a 97       	sbiw	r26, 0x0a	; 10
    264a:	1b 96       	adiw	r26, 0x0b	; 11
    264c:	bc 90       	ld	r11, X
    264e:	1b 97       	sbiw	r26, 0x0b	; 11
    2650:	1c 96       	adiw	r26, 0x0c	; 12
    2652:	cc 90       	ld	r12, X
    2654:	1c 97       	sbiw	r26, 0x0c	; 12
    2656:	1d 96       	adiw	r26, 0x0d	; 13
    2658:	dc 90       	ld	r13, X
    265a:	1d 97       	sbiw	r26, 0x0d	; 13
    265c:	1e 96       	adiw	r26, 0x0e	; 14
    265e:	ec 90       	ld	r14, X
    2660:	1e 97       	sbiw	r26, 0x0e	; 14
    2662:	1f 96       	adiw	r26, 0x0f	; 15
    2664:	fc 90       	ld	r15, X
    2666:	1f 97       	sbiw	r26, 0x0f	; 15
    2668:	50 96       	adiw	r26, 0x10	; 16
    266a:	0c 91       	ld	r16, X
    266c:	50 97       	sbiw	r26, 0x10	; 16
    266e:	51 96       	adiw	r26, 0x11	; 17
    2670:	1c 91       	ld	r17, X
    2672:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    2676:	04 80       	ldd	r0, Z+4	; 0x04
    2678:	f5 81       	ldd	r31, Z+5	; 0x05
    267a:	e0 2d       	mov	r30, r0
    267c:	68 94       	set
    267e:	ee 24       	eor	r14, r14
    2680:	e1 f8       	bld	r14, 1
    2682:	f1 2c       	mov	r15, r1
    2684:	8e 01       	movw	r16, r28
    2686:	0f 5f       	subi	r16, 0xFF	; 255
    2688:	1f 4f       	sbci	r17, 0xFF	; 255
    268a:	09 95       	icall
    268c:	88 23       	and	r24, r24
    268e:	51 f0       	breq	.+20     	; 0x26a4 <fat_resize_file+0x2d8>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    2690:	41 14       	cp	r4, r1
    2692:	51 04       	cpc	r5, r1
    2694:	61 04       	cpc	r6, r1
    2696:	71 04       	cpc	r7, r1
    2698:	29 f0       	breq	.+10     	; 0x26a4 <fat_resize_file+0x2d8>
        return fat_free_clusters(fs, cluster_num_next);
    269a:	b3 01       	movw	r22, r6
    269c:	a2 01       	movw	r20, r4
    269e:	c4 01       	movw	r24, r8
    26a0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    26a4:	4d 85       	ldd	r20, Y+13	; 0x0d
    26a6:	5e 85       	ldd	r21, Y+14	; 0x0e
    26a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    26aa:	78 89       	ldd	r23, Y+16	; 0x10
    26ac:	9a 01       	movw	r18, r20
    26ae:	ab 01       	movw	r20, r22
    26b0:	60 e0       	ldi	r22, 0x00	; 0
    26b2:	70 e0       	ldi	r23, 0x00	; 0
    26b4:	cb 01       	movw	r24, r22
    26b6:	2d 83       	std	Y+5, r18	; 0x05
    26b8:	3e 83       	std	Y+6, r19	; 0x06
    26ba:	4f 83       	std	Y+7, r20	; 0x07
    26bc:	58 87       	std	Y+8, r21	; 0x08
    26be:	69 87       	std	Y+9, r22	; 0x09
    26c0:	7a 87       	std	Y+10, r23	; 0x0a
    26c2:	8b 87       	std	Y+11, r24	; 0x0b
    26c4:	9c 87       	std	Y+12, r25	; 0x0c
    26c6:	d1 01       	movw	r26, r2
    26c8:	d3 96       	adiw	r26, 0x33	; 51
    26ca:	ac 90       	ld	r10, X
    26cc:	d3 97       	sbiw	r26, 0x33	; 51
    26ce:	d4 96       	adiw	r26, 0x34	; 52
    26d0:	bc 90       	ld	r11, X
    26d2:	d4 97       	sbiw	r26, 0x34	; 52
    26d4:	d5 96       	adiw	r26, 0x35	; 53
    26d6:	cc 90       	ld	r12, X
    26d8:	d5 97       	sbiw	r26, 0x35	; 53
    26da:	d6 96       	adiw	r26, 0x36	; 54
    26dc:	dc 90       	ld	r13, X
    26de:	d6 97       	sbiw	r26, 0x36	; 54
    26e0:	d7 96       	adiw	r26, 0x37	; 55
    26e2:	ec 90       	ld	r14, X
    26e4:	d7 97       	sbiw	r26, 0x37	; 55
    26e6:	d8 96       	adiw	r26, 0x38	; 56
    26e8:	fc 90       	ld	r15, X
    26ea:	d8 97       	sbiw	r26, 0x38	; 56
    26ec:	d9 96       	adiw	r26, 0x39	; 57
    26ee:	0c 91       	ld	r16, X
    26f0:	d9 97       	sbiw	r26, 0x39	; 57
    26f2:	da 96       	adiw	r26, 0x3a	; 58
    26f4:	1c 91       	ld	r17, X
    26f6:	da 97       	sbiw	r26, 0x3a	; 58
    26f8:	60 e0       	ldi	r22, 0x00	; 0
    26fa:	70 e0       	ldi	r23, 0x00	; 0
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__cmpdi2>
    2704:	20 f5       	brcc	.+72     	; 0x274e <fat_resize_file+0x382>
    {
        fd->pos = size;
    2706:	d3 96       	adiw	r26, 0x33	; 51
    2708:	2c 93       	st	X, r18
    270a:	d3 97       	sbiw	r26, 0x33	; 51
    270c:	d4 96       	adiw	r26, 0x34	; 52
    270e:	3c 93       	st	X, r19
    2710:	d4 97       	sbiw	r26, 0x34	; 52
    2712:	d5 96       	adiw	r26, 0x35	; 53
    2714:	4c 93       	st	X, r20
    2716:	d5 97       	sbiw	r26, 0x35	; 53
    2718:	d6 96       	adiw	r26, 0x36	; 54
    271a:	5c 93       	st	X, r21
    271c:	d6 97       	sbiw	r26, 0x36	; 54
    271e:	d7 96       	adiw	r26, 0x37	; 55
    2720:	1c 92       	st	X, r1
    2722:	d7 97       	sbiw	r26, 0x37	; 55
    2724:	d8 96       	adiw	r26, 0x38	; 56
    2726:	1c 92       	st	X, r1
    2728:	d8 97       	sbiw	r26, 0x38	; 56
    272a:	d9 96       	adiw	r26, 0x39	; 57
    272c:	1c 92       	st	X, r1
    272e:	d9 97       	sbiw	r26, 0x39	; 57
    2730:	da 96       	adiw	r26, 0x3a	; 58
    2732:	1c 92       	st	X, r1
    2734:	da 97       	sbiw	r26, 0x3a	; 58
        fd->pos_cluster = 0;
    2736:	db 96       	adiw	r26, 0x3b	; 59
    2738:	1d 92       	st	X+, r1
    273a:	1d 92       	st	X+, r1
    273c:	1d 92       	st	X+, r1
    273e:	1c 92       	st	X, r1
    2740:	de 97       	sbiw	r26, 0x3e	; 62
    }

    return 1;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	62 c0       	rjmp	.+196    	; 0x280a <fat_resize_file+0x43e>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    if(!fd)
        return 0;
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	60 c0       	rjmp	.+192    	; 0x280a <fat_resize_file+0x43e>
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
            if(!cluster_new_chain)
                return 0;
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	5e c0       	rjmp	.+188    	; 0x280a <fat_resize_file+0x43e>
    {
        fd->pos = size;
        fd->pos_cluster = 0;
    }

    return 1;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	5c c0       	rjmp	.+184    	; 0x280a <fat_resize_file+0x43e>
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
            if(!cluster_new_chain)
                return 0;
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	5a c0       	rjmp	.+180    	; 0x280a <fat_resize_file+0x43e>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    2756:	d5 01       	movw	r26, r10
    2758:	c4 01       	movw	r24, r8
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	a1 09       	sbc	r26, r1
    275e:	b1 09       	sbc	r27, r1
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	64 0d       	add	r22, r4
    2766:	75 1d       	adc	r23, r5
    2768:	86 1d       	adc	r24, r6
    276a:	97 1d       	adc	r25, r7
    276c:	a5 01       	movw	r20, r10
    276e:	94 01       	movw	r18, r8
    2770:	0e 94 81 25 	call	0x4b02	; 0x4b02 <__udivmodsi4>
    2774:	89 01       	movw	r16, r18
    2776:	9a 01       	movw	r18, r20
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	50 e0       	ldi	r21, 0x00	; 0
    277c:	ba 01       	movw	r22, r20
    277e:	f1 01       	movw	r30, r2
    2780:	80 81       	ld	r24, Z
    2782:	91 81       	ldd	r25, Z+1	; 0x01
    2784:	0e 94 ac 03 	call	0x758	; 0x758 <fat_append_clusters>
    2788:	6b 01       	movw	r12, r22
    278a:	7c 01       	movw	r14, r24
            if(!cluster_new_chain)
    278c:	67 2b       	or	r22, r23
    278e:	68 2b       	or	r22, r24
    2790:	69 2b       	or	r22, r25
    2792:	09 f0       	breq	.+2      	; 0x2796 <fat_resize_file+0x3ca>
    2794:	b4 ce       	rjmp	.-664    	; 0x24fe <fat_resize_file+0x132>
    2796:	dd cf       	rjmp	.-70     	; 0x2752 <fat_resize_file+0x386>

        /* write new directory entry */
        fd->dir_entry.file_size = size;
        if(size == 0)
            fd->dir_entry.cluster = 0;
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    2798:	b1 01       	movw	r22, r2
    279a:	6e 5f       	subi	r22, 0xFE	; 254
    279c:	7f 4f       	sbci	r23, 0xFF	; 255
    279e:	d1 01       	movw	r26, r2
    27a0:	8d 91       	ld	r24, X+
    27a2:	9c 91       	ld	r25, X
    27a4:	0e 94 37 08 	call	0x106e	; 0x106e <fat_write_dir_entry>
    27a8:	81 11       	cpse	r24, r1
    27aa:	dc ce       	rjmp	.-584    	; 0x2564 <fat_resize_file+0x198>
    27ac:	2e c0       	rjmp	.+92     	; 0x280a <fat_resize_file+0x43e>
{
    if(!fd)
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    uint16_t cluster_size = fd->fs->header.cluster_size;
    27ae:	dc 01       	movw	r26, r24
    27b0:	ed 91       	ld	r30, X+
    27b2:	fc 91       	ld	r31, X
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    27b4:	80 8d       	ldd	r24, Z+24	; 0x18
    27b6:	91 8d       	ldd	r25, Z+25	; 0x19
    27b8:	4c 01       	movw	r8, r24
    27ba:	a1 2c       	mov	r10, r1
    27bc:	b1 2c       	mov	r11, r1
    27be:	2d 85       	ldd	r18, Y+13	; 0x0d
    27c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    27c2:	4f 85       	ldd	r20, Y+15	; 0x0f
    27c4:	58 89       	ldd	r21, Y+16	; 0x10
    27c6:	82 16       	cp	r8, r18
    27c8:	93 06       	cpc	r9, r19
    27ca:	a4 06       	cpc	r10, r20
    27cc:	b5 06       	cpc	r11, r21
    27ce:	08 f4       	brcc	.+2      	; 0x27d2 <fat_resize_file+0x406>
    27d0:	39 ce       	rjmp	.-910    	; 0x2444 <fat_resize_file+0x78>
    27d2:	29 01       	movw	r4, r18
    27d4:	3a 01       	movw	r6, r20
    27d6:	cd 80       	ldd	r12, Y+5	; 0x05
    27d8:	de 80       	ldd	r13, Y+6	; 0x06
    27da:	ef 80       	ldd	r14, Y+7	; 0x07
    27dc:	f8 84       	ldd	r15, Y+8	; 0x08
    27de:	9b ce       	rjmp	.-714    	; 0x2516 <fat_resize_file+0x14a>
{
    if(!fd)
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    uint16_t cluster_size = fd->fs->header.cluster_size;
    27e0:	dc 01       	movw	r26, r24
    27e2:	ed 91       	ld	r30, X+
    27e4:	fc 91       	ld	r31, X
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    27e6:	80 8d       	ldd	r24, Z+24	; 0x18
    27e8:	91 8d       	ldd	r25, Z+25	; 0x19
    27ea:	4c 01       	movw	r8, r24
    27ec:	a1 2c       	mov	r10, r1
    27ee:	b1 2c       	mov	r11, r1
    27f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    27f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    27f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    27f6:	58 89       	ldd	r21, Y+16	; 0x10
    27f8:	82 16       	cp	r8, r18
    27fa:	93 06       	cpc	r9, r19
    27fc:	a4 06       	cpc	r10, r20
    27fe:	b5 06       	cpc	r11, r21
    2800:	08 f4       	brcc	.+2      	; 0x2804 <fat_resize_file+0x438>
    2802:	20 ce       	rjmp	.-960    	; 0x2444 <fat_resize_file+0x78>
    2804:	29 01       	movw	r4, r18
    2806:	3a 01       	movw	r6, r20
    2808:	a6 cf       	rjmp	.-180    	; 0x2756 <fat_resize_file+0x38a>
        fd->pos = size;
        fd->pos_cluster = 0;
    }

    return 1;
}
    280a:	60 96       	adiw	r28, 0x10	; 16
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	ff 90       	pop	r15
    2820:	ef 90       	pop	r14
    2822:	df 90       	pop	r13
    2824:	cf 90       	pop	r12
    2826:	bf 90       	pop	r11
    2828:	af 90       	pop	r10
    282a:	9f 90       	pop	r9
    282c:	8f 90       	pop	r8
    282e:	7f 90       	pop	r7
    2830:	6f 90       	pop	r6
    2832:	5f 90       	pop	r5
    2834:	4f 90       	pop	r4
    2836:	3f 90       	pop	r3
    2838:	2f 90       	pop	r2
    283a:	08 95       	ret

0000283c <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    283c:	af 92       	push	r10
    283e:	bf 92       	push	r11
    2840:	cf 92       	push	r12
    2842:	df 92       	push	r13
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    if(!fd || !offset)
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	09 f4       	brne	.+2      	; 0x2856 <fat_seek_file+0x1a>
    2854:	54 c0       	rjmp	.+168    	; 0x28fe <fat_seek_file+0xc2>
    2856:	61 15       	cp	r22, r1
    2858:	71 05       	cpc	r23, r1
    285a:	09 f4       	brne	.+2      	; 0x285e <fat_seek_file+0x22>
    285c:	52 c0       	rjmp	.+164    	; 0x2902 <fat_seek_file+0xc6>
        return 0;

    uint32_t new_pos = fd->pos;
    switch(whence)
    285e:	41 30       	cpi	r20, 0x01	; 1
    2860:	51 f0       	breq	.+20     	; 0x2876 <fat_seek_file+0x3a>
    2862:	18 f0       	brcs	.+6      	; 0x286a <fat_seek_file+0x2e>
    2864:	42 30       	cpi	r20, 0x02	; 2
    2866:	b1 f0       	breq	.+44     	; 0x2894 <fat_seek_file+0x58>
    2868:	4e c0       	rjmp	.+156    	; 0x2906 <fat_seek_file+0xca>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    286a:	fb 01       	movw	r30, r22
    286c:	c0 80       	ld	r12, Z
    286e:	d1 80       	ldd	r13, Z+1	; 0x01
    2870:	e2 80       	ldd	r14, Z+2	; 0x02
    2872:	f3 80       	ldd	r15, Z+3	; 0x03
            break;
    2874:	1d c0       	rjmp	.+58     	; 0x28b0 <fat_seek_file+0x74>
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
    2876:	fc 01       	movw	r30, r24
    2878:	c3 a8       	ldd	r12, Z+51	; 0x33
    287a:	d4 a8       	ldd	r13, Z+52	; 0x34
    287c:	e5 a8       	ldd	r14, Z+53	; 0x35
    287e:	f6 a8       	ldd	r15, Z+54	; 0x36
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    2880:	fb 01       	movw	r30, r22
    2882:	00 81       	ld	r16, Z
    2884:	11 81       	ldd	r17, Z+1	; 0x01
    2886:	22 81       	ldd	r18, Z+2	; 0x02
    2888:	33 81       	ldd	r19, Z+3	; 0x03
    288a:	c0 0e       	add	r12, r16
    288c:	d1 1e       	adc	r13, r17
    288e:	e2 1e       	adc	r14, r18
    2890:	f3 1e       	adc	r15, r19
            break;
    2892:	0e c0       	rjmp	.+28     	; 0x28b0 <fat_seek_file+0x74>
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    2894:	fc 01       	movw	r30, r24
    2896:	c7 a0       	ldd	r12, Z+39	; 0x27
    2898:	d0 a4       	ldd	r13, Z+40	; 0x28
    289a:	e1 a4       	ldd	r14, Z+41	; 0x29
    289c:	f2 a4       	ldd	r15, Z+42	; 0x2a
    289e:	fb 01       	movw	r30, r22
    28a0:	00 81       	ld	r16, Z
    28a2:	11 81       	ldd	r17, Z+1	; 0x01
    28a4:	22 81       	ldd	r18, Z+2	; 0x02
    28a6:	33 81       	ldd	r19, Z+3	; 0x03
    28a8:	c0 0e       	add	r12, r16
    28aa:	d1 1e       	adc	r13, r17
    28ac:	e2 1e       	adc	r14, r18
    28ae:	f3 1e       	adc	r15, r19
    28b0:	5b 01       	movw	r10, r22
    28b2:	ec 01       	movw	r28, r24
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    28b4:	8f a1       	ldd	r24, Y+39	; 0x27
    28b6:	98 a5       	ldd	r25, Y+40	; 0x28
    28b8:	a9 a5       	ldd	r26, Y+41	; 0x29
    28ba:	ba a5       	ldd	r27, Y+42	; 0x2a
    28bc:	8c 15       	cp	r24, r12
    28be:	9d 05       	cpc	r25, r13
    28c0:	ae 05       	cpc	r26, r14
    28c2:	bf 05       	cpc	r27, r15
    28c4:	38 f4       	brcc	.+14     	; 0x28d4 <fat_seek_file+0x98>
#if FAT_WRITE_SUPPORT
       && !fat_resize_file(fd, new_pos)
    28c6:	b7 01       	movw	r22, r14
    28c8:	a6 01       	movw	r20, r12
    28ca:	ce 01       	movw	r24, r28
    28cc:	0e 94 e6 11 	call	0x23cc	; 0x23cc <fat_resize_file>
    28d0:	88 23       	and	r24, r24
    28d2:	d1 f0       	breq	.+52     	; 0x2908 <fat_seek_file+0xcc>
#endif
       )
        return 0;

    fd->pos = new_pos;
    28d4:	97 01       	movw	r18, r14
    28d6:	86 01       	movw	r16, r12
    28d8:	cb aa       	std	Y+51, r12	; 0x33
    28da:	1c ab       	std	Y+52, r17	; 0x34
    28dc:	2d ab       	std	Y+53, r18	; 0x35
    28de:	3e ab       	std	Y+54, r19	; 0x36
    28e0:	1f aa       	std	Y+55, r1	; 0x37
    28e2:	18 ae       	std	Y+56, r1	; 0x38
    28e4:	19 ae       	std	Y+57, r1	; 0x39
    28e6:	1a ae       	std	Y+58, r1	; 0x3a
    fd->pos_cluster = 0;
    28e8:	1b ae       	std	Y+59, r1	; 0x3b
    28ea:	1c ae       	std	Y+60, r1	; 0x3c
    28ec:	1d ae       	std	Y+61, r1	; 0x3d
    28ee:	1e ae       	std	Y+62, r1	; 0x3e

    *offset = (int32_t) new_pos;
    28f0:	f5 01       	movw	r30, r10
    28f2:	c0 82       	st	Z, r12
    28f4:	d1 82       	std	Z+1, r13	; 0x01
    28f6:	e2 82       	std	Z+2, r14	; 0x02
    28f8:	f3 82       	std	Z+3, r15	; 0x03
    return 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	05 c0       	rjmp	.+10     	; 0x2908 <fat_seek_file+0xcc>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	03 c0       	rjmp	.+6      	; 0x2908 <fat_seek_file+0xcc>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	01 c0       	rjmp	.+2      	; 0x2908 <fat_seek_file+0xcc>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
            break;
        default:
            return 0;
    2906:	80 e0       	ldi	r24, 0x00	; 0
    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = (int32_t) new_pos;
    return 1;
}
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	df 90       	pop	r13
    2916:	cf 90       	pop	r12
    2918:	bf 90       	pop	r11
    291a:	af 90       	pop	r10
    291c:	08 95       	ret

0000291e <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	b1 f0       	breq	.+44     	; 0x2952 <fat_open_dir+0x34>
    2926:	61 15       	cp	r22, r1
    2928:	71 05       	cpc	r23, r1
    292a:	b1 f0       	breq	.+44     	; 0x2958 <fat_open_dir+0x3a>
    292c:	fb 01       	movw	r30, r22
    292e:	20 a1       	ldd	r18, Z+32	; 0x20
    2930:	24 ff       	sbrs	r18, 4
    2932:	15 c0       	rjmp	.+42     	; 0x295e <fat_open_dir+0x40>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    2934:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end>
    2938:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x1>
    293c:	23 2b       	or	r18, r19
    293e:	91 f0       	breq	.+36     	; 0x2964 <fat_open_dir+0x46>
    2940:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <__data_end+0x39>
    2944:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <__data_end+0x3a>
    2948:	23 2b       	or	r18, r19
    294a:	79 f0       	breq	.+30     	; 0x296a <fat_open_dir+0x4c>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	25 c0       	rjmp	.+74     	; 0x299c <fat_open_dir+0x7e>
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	22 c0       	rjmp	.+68     	; 0x299c <fat_open_dir+0x7e>
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	1f c0       	rjmp	.+62     	; 0x299c <fat_open_dir+0x7e>
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	1c c0       	rjmp	.+56     	; 0x299c <fat_open_dir+0x7e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    2964:	c2 e7       	ldi	r28, 0x72	; 114
    2966:	d1 e0       	ldi	r29, 0x01	; 1
    2968:	02 c0       	rjmp	.+4      	; 0x296e <fat_open_dir+0x50>
    296a:	cb ea       	ldi	r28, 0xAB	; 171
    296c:	d1 e0       	ldi	r29, 0x01	; 1
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    296e:	de 01       	movw	r26, r28
    2970:	12 96       	adiw	r26, 0x02	; 2
    2972:	21 e3       	ldi	r18, 0x31	; 49
    2974:	fb 01       	movw	r30, r22
    2976:	01 90       	ld	r0, Z+
    2978:	0d 92       	st	X+, r0
    297a:	2a 95       	dec	r18
    297c:	e1 f7       	brne	.-8      	; 0x2976 <fat_open_dir+0x58>
    dd->fs = fs;
    297e:	99 83       	std	Y+1, r25	; 0x01
    2980:	88 83       	st	Y, r24
    dd->entry_cluster = dir_entry->cluster;
    2982:	fb 01       	movw	r30, r22
    2984:	81 a1       	ldd	r24, Z+33	; 0x21
    2986:	92 a1       	ldd	r25, Z+34	; 0x22
    2988:	a3 a1       	ldd	r26, Z+35	; 0x23
    298a:	b4 a1       	ldd	r27, Z+36	; 0x24
    298c:	8b ab       	std	Y+51, r24	; 0x33
    298e:	9c ab       	std	Y+52, r25	; 0x34
    2990:	ad ab       	std	Y+53, r26	; 0x35
    2992:	be ab       	std	Y+54, r27	; 0x36
    dd->entry_offset = 0;
    2994:	18 ae       	std	Y+56, r1	; 0x38
    2996:	1f aa       	std	Y+55, r1	; 0x37

    return dd;
    2998:	8c 2f       	mov	r24, r28
    299a:	9d 2f       	mov	r25, r29
}
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	08 95       	ret

000029a2 <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	19 f0       	breq	.+6      	; 0x29ac <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    29a6:	fc 01       	movw	r30, r24
    29a8:	11 82       	std	Z+1, r1	; 0x01
    29aa:	10 82       	st	Z, r1
    29ac:	08 95       	ret

000029ae <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    29ae:	fc 01       	movw	r30, r24
    if(!dd)
    29b0:	89 2b       	or	r24, r25
    29b2:	61 f0       	breq	.+24     	; 0x29cc <fat_reset_dir+0x1e>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    29b4:	83 a1       	ldd	r24, Z+35	; 0x23
    29b6:	94 a1       	ldd	r25, Z+36	; 0x24
    29b8:	a5 a1       	ldd	r26, Z+37	; 0x25
    29ba:	b6 a1       	ldd	r27, Z+38	; 0x26
    29bc:	83 ab       	std	Z+51, r24	; 0x33
    29be:	94 ab       	std	Z+52, r25	; 0x34
    29c0:	a5 ab       	std	Z+53, r26	; 0x35
    29c2:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    29c4:	10 ae       	std	Z+56, r1	; 0x38
    29c6:	17 aa       	std	Z+55, r1	; 0x37
    return 1;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	08 95       	ret
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
    29cc:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
    29ce:	08 95       	ret

000029d0 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    29d0:	2f 92       	push	r2
    29d2:	3f 92       	push	r3
    29d4:	4f 92       	push	r4
    29d6:	5f 92       	push	r5
    29d8:	6f 92       	push	r6
    29da:	7f 92       	push	r7
    29dc:	8f 92       	push	r8
    29de:	9f 92       	push	r9
    29e0:	af 92       	push	r10
    29e2:	bf 92       	push	r11
    29e4:	cf 92       	push	r12
    29e6:	df 92       	push	r13
    29e8:	ef 92       	push	r14
    29ea:	ff 92       	push	r15
    29ec:	0f 93       	push	r16
    29ee:	1f 93       	push	r17
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	ee 97       	sbiw	r28, 0x3e	; 62
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    if(!dd || !dir_entry)
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <fat_read_dir+0x3a>
    2a08:	49 c1       	rjmp	.+658    	; 0x2c9c <fat_read_dir+0x2cc>
    2a0a:	61 15       	cp	r22, r1
    2a0c:	71 05       	cpc	r23, r1
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <fat_read_dir+0x42>
    2a10:	47 c1       	rjmp	.+654    	; 0x2ca0 <fat_read_dir+0x2d0>
    2a12:	9e af       	std	Y+62, r25	; 0x3e
    2a14:	8d af       	std	Y+61, r24	; 0x3d
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    2a16:	fc 01       	movw	r30, r24
    2a18:	40 80       	ld	r4, Z
    2a1a:	51 80       	ldd	r5, Z+1	; 0x01
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    2a1c:	f2 01       	movw	r30, r4
    2a1e:	20 8c       	ldd	r2, Z+24	; 0x18
    2a20:	31 8c       	ldd	r3, Z+25	; 0x19
    cluster_t cluster_num = dd->entry_cluster;
    uint16_t cluster_offset = dd->entry_offset;
    2a22:	fc 01       	movw	r30, r24
    2a24:	67 a8       	ldd	r6, Z+55	; 0x37
    2a26:	70 ac       	ldd	r7, Z+56	; 0x38
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    2a28:	62 14       	cp	r6, r2
    2a2a:	73 04       	cpc	r7, r3
    2a2c:	20 f0       	brcs	.+8      	; 0x2a36 <fat_read_dir+0x66>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
    2a2e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <fat_reset_dir>
        return 0;
    2a32:	91 2c       	mov	r9, r1
    2a34:	38 c1       	rjmp	.+624    	; 0x2ca6 <fat_read_dir+0x2d6>

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    cluster_t cluster_num = dd->entry_cluster;
    2a36:	ed ad       	ldd	r30, Y+61	; 0x3d
    2a38:	fe ad       	ldd	r31, Y+62	; 0x3e
    2a3a:	03 a9       	ldd	r16, Z+51	; 0x33
    2a3c:	14 a9       	ldd	r17, Z+52	; 0x34
    2a3e:	25 a9       	ldd	r18, Z+53	; 0x35
    2a40:	36 a9       	ldd	r19, Z+54	; 0x36
    2a42:	09 ab       	std	Y+49, r16	; 0x31
    2a44:	1a ab       	std	Y+50, r17	; 0x32
    2a46:	2b ab       	std	Y+51, r18	; 0x33
    2a48:	3c ab       	std	Y+52, r19	; 0x34
        fat_reset_dir(dd);
        return 0;
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    2a4a:	9e 01       	movw	r18, r28
    2a4c:	2f 5f       	subi	r18, 0xFF	; 255
    2a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a50:	86 e0       	ldi	r24, 0x06	; 6
    2a52:	f9 01       	movw	r30, r18
    2a54:	11 92       	st	Z+, r1
    2a56:	8a 95       	dec	r24
    2a58:	e9 f7       	brne	.-6      	; 0x2a54 <fat_read_dir+0x84>
    memset(dir_entry, 0, sizeof(*dir_entry));
    2a5a:	81 e3       	ldi	r24, 0x31	; 49
    2a5c:	fb 01       	movw	r30, r22
    2a5e:	11 92       	st	Z+, r1
    2a60:	8a 95       	dec	r24
    2a62:	e9 f7       	brne	.-6      	; 0x2a5e <fat_read_dir+0x8e>
    arg.dir_entry = dir_entry;
    2a64:	7a 83       	std	Y+2, r23	; 0x02
    2a66:	69 83       	std	Y+1, r22	; 0x01

    /* check if we read from the root directory */
    if(cluster_num == 0)
    2a68:	09 a9       	ldd	r16, Y+49	; 0x31
    2a6a:	1a a9       	ldd	r17, Y+50	; 0x32
    2a6c:	2b a9       	ldd	r18, Y+51	; 0x33
    2a6e:	3c a9       	ldd	r19, Y+52	; 0x34
    2a70:	01 2b       	or	r16, r17
    2a72:	02 2b       	or	r16, r18
    2a74:	03 2b       	or	r16, r19
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <fat_read_dir+0xaa>
    2a78:	e7 c0       	rjmp	.+462    	; 0x2c48 <fat_read_dir+0x278>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    2a7a:	d2 01       	movw	r26, r4
    2a7c:	ed 91       	ld	r30, X+
    2a7e:	fc 91       	ld	r31, X
    2a80:	11 97       	sbiw	r26, 0x01	; 1
    2a82:	80 85       	ldd	r24, Z+8	; 0x08
    2a84:	8b 30       	cpi	r24, 0x0B	; 11
    2a86:	59 f4       	brne	.+22     	; 0x2a9e <fat_read_dir+0xce>
            cluster_num = header->root_dir_cluster;
    2a88:	9a 96       	adiw	r26, 0x2a	; 42
    2a8a:	0d 91       	ld	r16, X+
    2a8c:	1d 91       	ld	r17, X+
    2a8e:	2d 91       	ld	r18, X+
    2a90:	3c 91       	ld	r19, X
    2a92:	9d 97       	sbiw	r26, 0x2d	; 45
    2a94:	09 ab       	std	Y+49, r16	; 0x31
    2a96:	1a ab       	std	Y+50, r17	; 0x32
    2a98:	2b ab       	std	Y+51, r18	; 0x33
    2a9a:	3c ab       	std	Y+52, r19	; 0x34
    2a9c:	d5 c0       	rjmp	.+426    	; 0x2c48 <fat_read_dir+0x278>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    2a9e:	f2 01       	movw	r30, r4
    2aa0:	22 8d       	ldd	r18, Z+26	; 0x1a
    2aa2:	33 8d       	ldd	r19, Z+27	; 0x1b
    2aa4:	82 a1       	ldd	r24, Z+34	; 0x22
    2aa6:	93 a1       	ldd	r25, Z+35	; 0x23
    2aa8:	19 01       	movw	r2, r18
    2aaa:	28 1a       	sub	r2, r24
    2aac:	39 0a       	sbc	r3, r25
    2aae:	cc c0       	rjmp	.+408    	; 0x2c48 <fat_read_dir+0x278>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
    2ab0:	81 01       	movw	r16, r2
    2ab2:	06 19       	sub	r16, r6
    2ab4:	17 09       	sbc	r17, r7
    2ab6:	18 ab       	std	Y+48, r17	; 0x30
    2ab8:	0f a7       	std	Y+47, r16	; 0x2f
        offset_t pos = cluster_offset;
    2aba:	93 01       	movw	r18, r6
    2abc:	40 e0       	ldi	r20, 0x00	; 0
    2abe:	50 e0       	ldi	r21, 0x00	; 0
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	70 e0       	ldi	r23, 0x00	; 0
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	6f a2       	std	Y+39, r6	; 0x27
    2ac8:	38 a7       	std	Y+40, r19	; 0x28
    2aca:	49 a7       	std	Y+41, r20	; 0x29
    2acc:	5a a7       	std	Y+42, r21	; 0x2a
    2ace:	6b a7       	std	Y+43, r22	; 0x2b
    2ad0:	7c a7       	std	Y+44, r23	; 0x2c
    2ad2:	8d a7       	std	Y+45, r24	; 0x2d
    2ad4:	9e a7       	std	Y+46, r25	; 0x2e
        if(cluster_num == 0)
    2ad6:	49 a9       	ldd	r20, Y+49	; 0x31
    2ad8:	5a a9       	ldd	r21, Y+50	; 0x32
    2ada:	6b a9       	ldd	r22, Y+51	; 0x33
    2adc:	7c a9       	ldd	r23, Y+52	; 0x34
    2ade:	45 2b       	or	r20, r21
    2ae0:	46 2b       	or	r20, r22
    2ae2:	47 2b       	or	r20, r23
    2ae4:	09 f5       	brne	.+66     	; 0x2b28 <fat_read_dir+0x158>
            pos += header->root_dir_offset;
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	50 e0       	ldi	r21, 0x00	; 0
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	70 e0       	ldi	r23, 0x00	; 0
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	d2 01       	movw	r26, r4
    2af4:	92 96       	adiw	r26, 0x22	; 34
    2af6:	ac 90       	ld	r10, X
    2af8:	92 97       	sbiw	r26, 0x22	; 34
    2afa:	93 96       	adiw	r26, 0x23	; 35
    2afc:	bc 90       	ld	r11, X
    2afe:	93 97       	sbiw	r26, 0x23	; 35
    2b00:	94 96       	adiw	r26, 0x24	; 36
    2b02:	cc 90       	ld	r12, X
    2b04:	94 97       	sbiw	r26, 0x24	; 36
    2b06:	95 96       	adiw	r26, 0x25	; 37
    2b08:	dc 90       	ld	r13, X
    2b0a:	95 97       	sbiw	r26, 0x25	; 37
    2b0c:	96 96       	adiw	r26, 0x26	; 38
    2b0e:	ec 90       	ld	r14, X
    2b10:	96 97       	sbiw	r26, 0x26	; 38
    2b12:	97 96       	adiw	r26, 0x27	; 39
    2b14:	fc 90       	ld	r15, X
    2b16:	97 97       	sbiw	r26, 0x27	; 39
    2b18:	98 96       	adiw	r26, 0x28	; 40
    2b1a:	0c 91       	ld	r16, X
    2b1c:	98 97       	sbiw	r26, 0x28	; 40
    2b1e:	99 96       	adiw	r26, 0x29	; 41
    2b20:	1c 91       	ld	r17, X
    2b22:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    2b26:	52 c0       	rjmp	.+164    	; 0x2bcc <fat_read_dir+0x1fc>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2b28:	41 14       	cp	r4, r1
    2b2a:	51 04       	cpc	r5, r1
    2b2c:	a1 f1       	breq	.+104    	; 0x2b96 <fat_read_dir+0x1c6>
    2b2e:	09 a9       	ldd	r16, Y+49	; 0x31
    2b30:	1a a9       	ldd	r17, Y+50	; 0x32
    2b32:	2b a9       	ldd	r18, Y+51	; 0x33
    2b34:	3c a9       	ldd	r19, Y+52	; 0x34
    2b36:	02 30       	cpi	r16, 0x02	; 2
    2b38:	11 05       	cpc	r17, r1
    2b3a:	21 05       	cpc	r18, r1
    2b3c:	31 05       	cpc	r19, r1
    2b3e:	a0 f1       	brcs	.+104    	; 0x2ba8 <fat_read_dir+0x1d8>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2b40:	d2 01       	movw	r26, r4
    2b42:	58 96       	adiw	r26, 0x18	; 24
    2b44:	0d 91       	ld	r16, X+
    2b46:	1c 91       	ld	r17, X
    2b48:	59 97       	sbiw	r26, 0x19	; 25
    2b4a:	a0 2e       	mov	r10, r16
    2b4c:	b1 2e       	mov	r11, r17
    2b4e:	c1 2c       	mov	r12, r1
    2b50:	d1 2c       	mov	r13, r1
    2b52:	e1 2c       	mov	r14, r1
    2b54:	f1 2c       	mov	r15, r1
    2b56:	00 e0       	ldi	r16, 0x00	; 0
    2b58:	10 e0       	ldi	r17, 0x00	; 0
    2b5a:	2d a9       	ldd	r18, Y+53	; 0x35
    2b5c:	3e a9       	ldd	r19, Y+54	; 0x36
    2b5e:	4f a9       	ldd	r20, Y+55	; 0x37
    2b60:	58 ad       	ldd	r21, Y+56	; 0x38
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	70 e0       	ldi	r23, 0x00	; 0
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__muldi3>
    2b6e:	f2 01       	movw	r30, r4
    2b70:	a2 8c       	ldd	r10, Z+26	; 0x1a
    2b72:	b3 8c       	ldd	r11, Z+27	; 0x1b
    2b74:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2b76:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2b78:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2b7a:	f7 8c       	ldd	r15, Z+31	; 0x1f
    2b7c:	00 a1       	ldd	r16, Z+32	; 0x20
    2b7e:	11 a1       	ldd	r17, Z+33	; 0x21
    2b80:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    2b84:	a2 2e       	mov	r10, r18
    2b86:	b3 2e       	mov	r11, r19
    2b88:	c4 2e       	mov	r12, r20
    2b8a:	d5 2e       	mov	r13, r21
    2b8c:	e6 2e       	mov	r14, r22
    2b8e:	f7 2e       	mov	r15, r23
    2b90:	08 2f       	mov	r16, r24
    2b92:	19 2f       	mov	r17, r25
    2b94:	11 c0       	rjmp	.+34     	; 0x2bb8 <fat_read_dir+0x1e8>
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    2b96:	a1 2c       	mov	r10, r1
    2b98:	b1 2c       	mov	r11, r1
    2b9a:	c1 2c       	mov	r12, r1
    2b9c:	d1 2c       	mov	r13, r1
    2b9e:	e1 2c       	mov	r14, r1
    2ba0:	f1 2c       	mov	r15, r1
    2ba2:	00 e0       	ldi	r16, 0x00	; 0
    2ba4:	10 e0       	ldi	r17, 0x00	; 0
    2ba6:	08 c0       	rjmp	.+16     	; 0x2bb8 <fat_read_dir+0x1e8>
    2ba8:	a1 2c       	mov	r10, r1
    2baa:	b1 2c       	mov	r11, r1
    2bac:	c1 2c       	mov	r12, r1
    2bae:	d1 2c       	mov	r13, r1
    2bb0:	e1 2c       	mov	r14, r1
    2bb2:	f1 2c       	mov	r15, r1
    2bb4:	00 e0       	ldi	r16, 0x00	; 0
    2bb6:	10 e0       	ldi	r17, 0x00	; 0
        uint16_t cluster_left = cluster_size - cluster_offset;
        offset_t pos = cluster_offset;
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);
    2bb8:	2f a1       	ldd	r18, Y+39	; 0x27
    2bba:	38 a5       	ldd	r19, Y+40	; 0x28
    2bbc:	49 a5       	ldd	r20, Y+41	; 0x29
    2bbe:	5a a5       	ldd	r21, Y+42	; 0x2a
    2bc0:	6b a5       	ldd	r22, Y+43	; 0x2b
    2bc2:	7c a5       	ldd	r23, Y+44	; 0x2c
    2bc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bc8:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>

        arg.bytes_read = 0;
    2bcc:	1c 82       	std	Y+4, r1	; 0x04
    2bce:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    2bd0:	d2 01       	movw	r26, r4
    2bd2:	ed 91       	ld	r30, X+
    2bd4:	fc 91       	ld	r31, X
    2bd6:	02 80       	ldd	r0, Z+2	; 0x02
    2bd8:	f3 81       	ldd	r31, Z+3	; 0x03
    2bda:	e0 2d       	mov	r30, r0
    2bdc:	8e 01       	movw	r16, r28
    2bde:	0f 5f       	subi	r16, 0xFF	; 255
    2be0:	1f 4f       	sbci	r17, 0xFF	; 255
    2be2:	48 01       	movw	r8, r16
    2be4:	0f 2e       	mov	r0, r31
    2be6:	f2 ec       	ldi	r31, 0xC2	; 194
    2be8:	af 2e       	mov	r10, r31
    2bea:	f6 e0       	ldi	r31, 0x06	; 6
    2bec:	bf 2e       	mov	r11, r31
    2bee:	f0 2d       	mov	r31, r0
    2bf0:	cf a4       	ldd	r12, Y+47	; 0x2f
    2bf2:	d8 a8       	ldd	r13, Y+48	; 0x30
    2bf4:	68 94       	set
    2bf6:	ee 24       	eor	r14, r14
    2bf8:	e5 f8       	bld	r14, 5
    2bfa:	f1 2c       	mov	r15, r1
    2bfc:	0a 5f       	subi	r16, 0xFA	; 250
    2bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2c00:	09 95       	icall
    2c02:	88 23       	and	r24, r24
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <fat_read_dir+0x238>
    2c06:	4e c0       	rjmp	.+156    	; 0x2ca4 <fat_read_dir+0x2d4>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    2c08:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0c:	68 0e       	add	r6, r24
    2c0e:	79 1e       	adc	r7, r25

        if(cluster_offset >= cluster_size)
    2c10:	62 14       	cp	r6, r2
    2c12:	73 04       	cpc	r7, r3
    2c14:	68 f1       	brcs	.+90     	; 0x2c70 <fat_read_dir+0x2a0>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    2c16:	49 a9       	ldd	r20, Y+49	; 0x31
    2c18:	5a a9       	ldd	r21, Y+50	; 0x32
    2c1a:	6b a9       	ldd	r22, Y+51	; 0x33
    2c1c:	7c a9       	ldd	r23, Y+52	; 0x34
    2c1e:	c2 01       	movw	r24, r4
    2c20:	0e 94 32 01 	call	0x264	; 0x264 <fat_get_next_cluster>
    2c24:	69 ab       	std	Y+49, r22	; 0x31
    2c26:	7a ab       	std	Y+50, r23	; 0x32
    2c28:	8b ab       	std	Y+51, r24	; 0x33
    2c2a:	9c ab       	std	Y+52, r25	; 0x34
    2c2c:	67 2b       	or	r22, r23
    2c2e:	68 2b       	or	r22, r24
    2c30:	69 2b       	or	r22, r25
    2c32:	41 f4       	brne	.+16     	; 0x2c44 <fat_read_dir+0x274>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    2c34:	9e 80       	ldd	r9, Y+6	; 0x06
    2c36:	91 10       	cpse	r9, r1
    2c38:	1f c0       	rjmp	.+62     	; 0x2c78 <fat_read_dir+0x2a8>
            {
                /* directory entry not found, reset directory handle */
                fat_reset_dir(dd);
    2c3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c3e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <fat_reset_dir>
                return 0;
    2c42:	31 c0       	rjmp	.+98     	; 0x2ca6 <fat_read_dir+0x2d6>
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
            {
                cluster_offset = 0;
    2c44:	61 2c       	mov	r6, r1
    2c46:	71 2c       	mov	r7, r1
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2c48:	89 a9       	ldd	r24, Y+49	; 0x31
    2c4a:	9a a9       	ldd	r25, Y+50	; 0x32
    2c4c:	ab a9       	ldd	r26, Y+51	; 0x33
    2c4e:	bc a9       	ldd	r27, Y+52	; 0x34
    2c50:	02 97       	sbiw	r24, 0x02	; 2
    2c52:	a1 09       	sbc	r26, r1
    2c54:	b1 09       	sbc	r27, r1
    2c56:	8c 01       	movw	r16, r24
    2c58:	9d 01       	movw	r18, r26
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	ba 01       	movw	r22, r20
    2c60:	8d ab       	std	Y+53, r24	; 0x35
    2c62:	1e ab       	std	Y+54, r17	; 0x36
    2c64:	2f ab       	std	Y+55, r18	; 0x37
    2c66:	38 af       	std	Y+56, r19	; 0x38
    2c68:	49 af       	std	Y+57, r20	; 0x39
    2c6a:	5a af       	std	Y+58, r21	; 0x3a
    2c6c:	6b af       	std	Y+59, r22	; 0x3b
    2c6e:	7c af       	std	Y+60, r23	; 0x3c
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    2c70:	8e 81       	ldd	r24, Y+6	; 0x06
    2c72:	88 23       	and	r24, r24
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <fat_read_dir+0x2a8>
    2c76:	1c cf       	rjmp	.-456    	; 0x2ab0 <fat_read_dir+0xe0>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    2c78:	29 a9       	ldd	r18, Y+49	; 0x31
    2c7a:	3a a9       	ldd	r19, Y+50	; 0x32
    2c7c:	4b a9       	ldd	r20, Y+51	; 0x33
    2c7e:	5c a9       	ldd	r21, Y+52	; 0x34
    2c80:	ad ad       	ldd	r26, Y+61	; 0x3d
    2c82:	be ad       	ldd	r27, Y+62	; 0x3e
    2c84:	d3 96       	adiw	r26, 0x33	; 51
    2c86:	2d 93       	st	X+, r18
    2c88:	3d 93       	st	X+, r19
    2c8a:	4d 93       	st	X+, r20
    2c8c:	5c 93       	st	X, r21
    2c8e:	d6 97       	sbiw	r26, 0x36	; 54
    dd->entry_offset = cluster_offset;
    2c90:	d8 96       	adiw	r26, 0x38	; 56
    2c92:	7c 92       	st	X, r7
    2c94:	6e 92       	st	-X, r6
    2c96:	d7 97       	sbiw	r26, 0x37	; 55

    return arg.finished;
    2c98:	9e 80       	ldd	r9, Y+6	; 0x06
    2c9a:	05 c0       	rjmp	.+10     	; 0x2ca6 <fat_read_dir+0x2d6>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
    2c9c:	91 2c       	mov	r9, r1
    2c9e:	03 c0       	rjmp	.+6      	; 0x2ca6 <fat_read_dir+0x2d6>
    2ca0:	91 2c       	mov	r9, r1
    2ca2:	01 c0       	rjmp	.+2      	; 0x2ca6 <fat_read_dir+0x2d6>
    2ca4:	98 2e       	mov	r9, r24

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
    2ca6:	89 2d       	mov	r24, r9
    2ca8:	ee 96       	adiw	r28, 0x3e	; 62
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	ff 90       	pop	r15
    2cbe:	ef 90       	pop	r14
    2cc0:	df 90       	pop	r13
    2cc2:	cf 90       	pop	r12
    2cc4:	bf 90       	pop	r11
    2cc6:	af 90       	pop	r10
    2cc8:	9f 90       	pop	r9
    2cca:	8f 90       	pop	r8
    2ccc:	7f 90       	pop	r7
    2cce:	6f 90       	pop	r6
    2cd0:	5f 90       	pop	r5
    2cd2:	4f 90       	pop	r4
    2cd4:	3f 90       	pop	r3
    2cd6:	2f 90       	pop	r2
    2cd8:	08 95       	ret

00002cda <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    2cda:	4f 92       	push	r4
    2cdc:	5f 92       	push	r5
    2cde:	6f 92       	push	r6
    2ce0:	7f 92       	push	r7
    2ce2:	8f 92       	push	r8
    2ce4:	9f 92       	push	r9
    2ce6:	af 92       	push	r10
    2ce8:	bf 92       	push	r11
    2cea:	cf 92       	push	r12
    2cec:	df 92       	push	r13
    2cee:	ef 92       	push	r14
    2cf0:	ff 92       	push	r15
    2cf2:	0f 93       	push	r16
    2cf4:	1f 93       	push	r17
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
    2cfa:	4c 01       	movw	r8, r24
    2cfc:	6b 01       	movw	r12, r22
    2cfe:	ea 01       	movw	r28, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    2d00:	89 2b       	or	r24, r25
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <fat_get_dir_entry_of_path+0x2c>
    2d04:	76 c0       	rjmp	.+236    	; 0x2df2 <fat_get_dir_entry_of_path+0x118>
    2d06:	61 15       	cp	r22, r1
    2d08:	71 05       	cpc	r23, r1
    2d0a:	09 f4       	brne	.+2      	; 0x2d0e <fat_get_dir_entry_of_path+0x34>
    2d0c:	74 c0       	rjmp	.+232    	; 0x2df6 <fat_get_dir_entry_of_path+0x11c>
    2d0e:	fb 01       	movw	r30, r22
    2d10:	80 81       	ld	r24, Z
    2d12:	88 23       	and	r24, r24
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <fat_get_dir_entry_of_path+0x3e>
    2d16:	71 c0       	rjmp	.+226    	; 0x2dfa <fat_get_dir_entry_of_path+0x120>
    2d18:	20 97       	sbiw	r28, 0x00	; 0
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <fat_get_dir_entry_of_path+0x44>
    2d1c:	70 c0       	rjmp	.+224    	; 0x2dfe <fat_get_dir_entry_of_path+0x124>
        return 0;

    if(path[0] == '/')
    2d1e:	8f 32       	cpi	r24, 0x2F	; 47
    2d20:	19 f4       	brne	.+6      	; 0x2d28 <fat_get_dir_entry_of_path+0x4e>
        ++path;
    2d22:	ff ef       	ldi	r31, 0xFF	; 255
    2d24:	cf 1a       	sub	r12, r31
    2d26:	df 0a       	sbc	r13, r31

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    2d28:	81 e3       	ldi	r24, 0x31	; 49
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	11 92       	st	Z+, r1
    2d2e:	8a 95       	dec	r24
    2d30:	e9 f7       	brne	.-6      	; 0x2d2c <fat_get_dir_entry_of_path+0x52>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    2d32:	80 e1       	ldi	r24, 0x10	; 16
    2d34:	88 a3       	std	Y+32, r24	; 0x20

    while(1)
    {
        if(path[0] == '\0')
    2d36:	f6 01       	movw	r30, r12
    2d38:	80 81       	ld	r24, Z
    2d3a:	88 23       	and	r24, r24
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <fat_get_dir_entry_of_path+0x66>
    2d3e:	61 c0       	rjmp	.+194    	; 0x2e02 <fat_get_dir_entry_of_path+0x128>
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    2d40:	41 2c       	mov	r4, r1
    2d42:	51 2c       	mov	r5, r1
    while(1)
    {
        if(path[0] == '\0')
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    2d44:	be 01       	movw	r22, r28
    2d46:	c4 01       	movw	r24, r8
    2d48:	0e 94 8f 14 	call	0x291e	; 0x291e <fat_open_dir>
    2d4c:	8c 01       	movw	r16, r24
        if(!dd)
    2d4e:	89 2b       	or	r24, r25
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <fat_get_dir_entry_of_path+0x7a>
    2d52:	59 c0       	rjmp	.+178    	; 0x2e06 <fat_get_dir_entry_of_path+0x12c>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    2d54:	6f e2       	ldi	r22, 0x2F	; 47
    2d56:	70 e0       	ldi	r23, 0x00	; 0
    2d58:	c6 01       	movw	r24, r12
    2d5a:	0e 94 90 26 	call	0x4d20	; 0x4d20 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	41 f0       	breq	.+16     	; 0x2d72 <fat_get_dir_entry_of_path+0x98>
        {
            length_to_sep = sub_path - path;
    2d62:	e8 2e       	mov	r14, r24
    2d64:	ec 18       	sub	r14, r12
            ++sub_path;
    2d66:	5c 01       	movw	r10, r24
    2d68:	ff ef       	ldi	r31, 0xFF	; 255
    2d6a:	af 1a       	sub	r10, r31
    2d6c:	bf 0a       	sbc	r11, r31
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    2d6e:	f1 2c       	mov	r15, r1
    2d70:	2d c0       	rjmp	.+90     	; 0x2dcc <fat_get_dir_entry_of_path+0xf2>
            length_to_sep = sub_path - path;
            ++sub_path;
        }
        else
        {
            length_to_sep = strlen(path);
    2d72:	f6 01       	movw	r30, r12
    2d74:	01 90       	ld	r0, Z+
    2d76:	00 20       	and	r0, r0
    2d78:	e9 f7       	brne	.-6      	; 0x2d74 <fat_get_dir_entry_of_path+0x9a>
    2d7a:	31 97       	sbiw	r30, 0x01	; 1
    2d7c:	ec 19       	sub	r30, r12
    2d7e:	fd 09       	sbc	r31, r13
    2d80:	ee 2e       	mov	r14, r30
            sub_path = path + length_to_sep;
    2d82:	56 01       	movw	r10, r12
    2d84:	ae 0e       	add	r10, r30
    2d86:	b1 1c       	adc	r11, r1
    2d88:	f2 cf       	rjmp	.-28     	; 0x2d6e <fat_get_dir_entry_of_path+0x94>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	01 90       	ld	r0, Z+
    2d8e:	00 20       	and	r0, r0
    2d90:	e9 f7       	brne	.-6      	; 0x2d8c <fat_get_dir_entry_of_path+0xb2>
    2d92:	31 97       	sbiw	r30, 0x01	; 1
    2d94:	3f 01       	movw	r6, r30
    2d96:	6c 1a       	sub	r6, r28
    2d98:	7d 0a       	sbc	r7, r29
    2d9a:	6e 14       	cp	r6, r14
    2d9c:	7f 04       	cpc	r7, r15
    2d9e:	b1 f4       	brne	.+44     	; 0x2dcc <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
    2da0:	a3 01       	movw	r20, r6
    2da2:	be 01       	movw	r22, r28
    2da4:	c6 01       	movw	r24, r12
    2da6:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    2daa:	89 2b       	or	r24, r25
    2dac:	79 f4       	brne	.+30     	; 0x2dcc <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
    2dae:	c8 01       	movw	r24, r16
    2db0:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
    2db4:	f6 01       	movw	r30, r12
    2db6:	e6 0d       	add	r30, r6
    2db8:	f7 1d       	adc	r31, r7
    2dba:	80 81       	ld	r24, Z
    2dbc:	88 23       	and	r24, r24
    2dbe:	29 f1       	breq	.+74     	; 0x2e0a <fat_get_dir_entry_of_path+0x130>
    2dc0:	98 a1       	ldd	r25, Y+32	; 0x20
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    2dc2:	89 2f       	mov	r24, r25
    2dc4:	80 71       	andi	r24, 0x10	; 16
    2dc6:	94 fd       	sbrc	r25, 4
    2dc8:	08 c0       	rjmp	.+16     	; 0x2dda <fat_get_dir_entry_of_path+0x100>
    2dca:	20 c0       	rjmp	.+64     	; 0x2e0c <fat_get_dir_entry_of_path+0x132>
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    2dcc:	be 01       	movw	r22, r28
    2dce:	c8 01       	movw	r24, r16
    2dd0:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <fat_read_dir>
    2dd4:	81 11       	cpse	r24, r1
    2dd6:	d9 cf       	rjmp	.-78     	; 0x2d8a <fat_get_dir_entry_of_path+0xb0>
    2dd8:	03 c0       	rjmp	.+6      	; 0x2de0 <fat_get_dir_entry_of_path+0x106>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
    2dda:	65 01       	movw	r12, r10
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    2ddc:	04 2d       	mov	r16, r4
    2dde:	15 2d       	mov	r17, r5

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
    2de0:	c8 01       	movw	r24, r16
    2de2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <fat_close_dir>
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    2de6:	f6 01       	movw	r30, r12
    2de8:	80 81       	ld	r24, Z
    2dea:	81 11       	cpse	r24, r1
    2dec:	ab cf       	rjmp	.-170    	; 0x2d44 <fat_get_dir_entry_of_path+0x6a>
            return 1;
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	0d c0       	rjmp	.+26     	; 0x2e0c <fat_get_dir_entry_of_path+0x132>
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	0b c0       	rjmp	.+22     	; 0x2e0c <fat_get_dir_entry_of_path+0x132>
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	09 c0       	rjmp	.+18     	; 0x2e0c <fat_get_dir_entry_of_path+0x132>
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	07 c0       	rjmp	.+14     	; 0x2e0c <fat_get_dir_entry_of_path+0x132>
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	05 c0       	rjmp	.+10     	; 0x2e0c <fat_get_dir_entry_of_path+0x132>
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	03 c0       	rjmp	.+6      	; 0x2e0c <fat_get_dir_entry_of_path+0x132>
        }

        fat_close_dir(dd);
    }
    
    return 0;
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	01 c0       	rjmp	.+2      	; 0x2e0c <fat_get_dir_entry_of_path+0x132>
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    2e0c:	df 91       	pop	r29
    2e0e:	cf 91       	pop	r28
    2e10:	1f 91       	pop	r17
    2e12:	0f 91       	pop	r16
    2e14:	ff 90       	pop	r15
    2e16:	ef 90       	pop	r14
    2e18:	df 90       	pop	r13
    2e1a:	cf 90       	pop	r12
    2e1c:	bf 90       	pop	r11
    2e1e:	af 90       	pop	r10
    2e20:	9f 90       	pop	r9
    2e22:	8f 90       	pop	r8
    2e24:	7f 90       	pop	r7
    2e26:	6f 90       	pop	r6
    2e28:	5f 90       	pop	r5
    2e2a:	4f 90       	pop	r4
    2e2c:	08 95       	ret

00002e2e <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new (or existing) file.
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    2e2e:	af 92       	push	r10
    2e30:	bf 92       	push	r11
    2e32:	cf 92       	push	r12
    2e34:	df 92       	push	r13
    2e36:	ef 92       	push	r14
    2e38:	ff 92       	push	r15
    2e3a:	1f 93       	push	r17
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
    if(!parent || !file || !file[0] || !dir_entry)
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <fat_create_file+0x18>
    2e44:	49 c0       	rjmp	.+146    	; 0x2ed8 <fat_create_file+0xaa>
    2e46:	61 15       	cp	r22, r1
    2e48:	71 05       	cpc	r23, r1
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <fat_create_file+0x20>
    2e4c:	47 c0       	rjmp	.+142    	; 0x2edc <fat_create_file+0xae>
    2e4e:	fb 01       	movw	r30, r22
    2e50:	20 81       	ld	r18, Z
    2e52:	22 23       	and	r18, r18
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <fat_create_file+0x2a>
    2e56:	44 c0       	rjmp	.+136    	; 0x2ee0 <fat_create_file+0xb2>
    2e58:	ea 01       	movw	r28, r20
    2e5a:	7b 01       	movw	r14, r22
    2e5c:	6c 01       	movw	r12, r24
    2e5e:	20 97       	sbiw	r28, 0x00	; 0
    2e60:	09 f4       	brne	.+2      	; 0x2e64 <fat_create_file+0x36>
    2e62:	40 c0       	rjmp	.+128    	; 0x2ee4 <fat_create_file+0xb6>
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    2e64:	be 01       	movw	r22, r28
    2e66:	c6 01       	movw	r24, r12
    2e68:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <fat_read_dir>
    2e6c:	18 2f       	mov	r17, r24
    2e6e:	88 23       	and	r24, r24
    2e70:	59 f0       	breq	.+22     	; 0x2e88 <fat_create_file+0x5a>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    2e72:	be 01       	movw	r22, r28
    2e74:	c7 01       	movw	r24, r14
    2e76:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <strcmp>
    2e7a:	89 2b       	or	r24, r25
    2e7c:	99 f7       	brne	.-26     	; 0x2e64 <fat_create_file+0x36>
        {
            fat_reset_dir(parent);
    2e7e:	c6 01       	movw	r24, r12
    2e80:	0e 94 d7 14 	call	0x29ae	; 0x29ae <fat_reset_dir>
            return 2;
    2e84:	12 e0       	ldi	r17, 0x02	; 2
    2e86:	2f c0       	rjmp	.+94     	; 0x2ee6 <fat_create_file+0xb8>
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    2e88:	f6 01       	movw	r30, r12
    2e8a:	a0 80       	ld	r10, Z
    2e8c:	b1 80       	ldd	r11, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    2e8e:	81 e3       	ldi	r24, 0x31	; 49
    2e90:	fe 01       	movw	r30, r28
    2e92:	11 92       	st	Z+, r1
    2e94:	8a 95       	dec	r24
    2e96:	e9 f7       	brne	.-6      	; 0x2e92 <fat_create_file+0x64>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    2e98:	4f e1       	ldi	r20, 0x1F	; 31
    2e9a:	50 e0       	ldi	r21, 0x00	; 0
    2e9c:	b7 01       	movw	r22, r14
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    2ea4:	ae 01       	movw	r20, r28
    2ea6:	b6 01       	movw	r22, r12
    2ea8:	c5 01       	movw	r24, r10
    2eaa:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <fat_find_offset_for_dir_entry>
    2eae:	29 a7       	std	Y+41, r18	; 0x29
    2eb0:	3a a7       	std	Y+42, r19	; 0x2a
    2eb2:	4b a7       	std	Y+43, r20	; 0x2b
    2eb4:	5c a7       	std	Y+44, r21	; 0x2c
    2eb6:	6d a7       	std	Y+45, r22	; 0x2d
    2eb8:	7e a7       	std	Y+46, r23	; 0x2e
    2eba:	8f a7       	std	Y+47, r24	; 0x2f
    2ebc:	98 ab       	std	Y+48, r25	; 0x30
    2ebe:	a0 e0       	ldi	r26, 0x00	; 0
    2ec0:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <__cmpdi2_s8>
    2ec4:	81 f0       	breq	.+32     	; 0x2ee6 <fat_create_file+0xb8>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    2ec6:	be 01       	movw	r22, r28
    2ec8:	c5 01       	movw	r24, r10
    2eca:	0e 94 37 08 	call	0x106e	; 0x106e <fat_write_dir_entry>
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
        return 0;
    2ece:	11 e0       	ldi	r17, 0x01	; 1
    2ed0:	81 11       	cpse	r24, r1
    2ed2:	09 c0       	rjmp	.+18     	; 0x2ee6 <fat_create_file+0xb8>
    2ed4:	10 e0       	ldi	r17, 0x00	; 0
    2ed6:	07 c0       	rjmp	.+14     	; 0x2ee6 <fat_create_file+0xb8>
    2ed8:	10 e0       	ldi	r17, 0x00	; 0
    2eda:	05 c0       	rjmp	.+10     	; 0x2ee6 <fat_create_file+0xb8>
    2edc:	10 e0       	ldi	r17, 0x00	; 0
    2ede:	03 c0       	rjmp	.+6      	; 0x2ee6 <fat_create_file+0xb8>
    2ee0:	10 e0       	ldi	r17, 0x00	; 0
    2ee2:	01 c0       	rjmp	.+2      	; 0x2ee6 <fat_create_file+0xb8>
    2ee4:	10 e0       	ldi	r17, 0x00	; 0
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
        return 0;
    
    return 1;
}
    2ee6:	81 2f       	mov	r24, r17
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	1f 91       	pop	r17
    2eee:	ff 90       	pop	r15
    2ef0:	ef 90       	pop	r14
    2ef2:	df 90       	pop	r13
    2ef4:	cf 90       	pop	r12
    2ef6:	bf 90       	pop	r11
    2ef8:	af 90       	pop	r10
    2efa:	08 95       	ret

00002efc <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    2efc:	3f 92       	push	r3
    2efe:	4f 92       	push	r4
    2f00:	5f 92       	push	r5
    2f02:	6f 92       	push	r6
    2f04:	7f 92       	push	r7
    2f06:	8f 92       	push	r8
    2f08:	9f 92       	push	r9
    2f0a:	af 92       	push	r10
    2f0c:	bf 92       	push	r11
    2f0e:	cf 92       	push	r12
    2f10:	df 92       	push	r13
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	2e 97       	sbiw	r28, 0x0e	; 14
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	3c 01       	movw	r6, r24
    2f30:	fb 01       	movw	r30, r22
    if(!fs || !dir_entry)
    2f32:	89 2b       	or	r24, r25
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <fat_delete_file+0x3c>
    2f36:	77 c0       	rjmp	.+238    	; 0x3026 <fat_delete_file+0x12a>
    2f38:	30 97       	sbiw	r30, 0x00	; 0
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <fat_delete_file+0x42>
    2f3c:	76 c0       	rjmp	.+236    	; 0x302a <fat_delete_file+0x12e>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    2f3e:	d1 a4       	ldd	r13, Z+41	; 0x29
    2f40:	c2 a4       	ldd	r12, Z+42	; 0x2a
    2f42:	b3 a4       	ldd	r11, Z+43	; 0x2b
    2f44:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2f46:	95 a4       	ldd	r9, Z+45	; 0x2d
    2f48:	86 a4       	ldd	r8, Z+46	; 0x2e
    2f4a:	57 a4       	ldd	r5, Z+47	; 0x2f
    2f4c:	40 a8       	ldd	r4, Z+48	; 0x30
    if(!dir_entry_offset)
    2f4e:	2d 2d       	mov	r18, r13
    2f50:	3c 2d       	mov	r19, r12
    2f52:	4b 2d       	mov	r20, r11
    2f54:	5a 2d       	mov	r21, r10
    2f56:	69 2d       	mov	r22, r9
    2f58:	78 2d       	mov	r23, r8
    2f5a:	85 2d       	mov	r24, r5
    2f5c:	94 2d       	mov	r25, r4
    2f5e:	a0 e0       	ldi	r26, 0x00	; 0
    2f60:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <__cmpdi2_s8>
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <fat_delete_file+0x6c>
    2f66:	63 c0       	rjmp	.+198    	; 0x302e <fat_delete_file+0x132>
    2f68:	fe 87       	std	Y+14, r31	; 0x0e
    2f6a:	ed 87       	std	Y+13, r30	; 0x0d
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    2f6c:	0f 2e       	mov	r0, r31
    2f6e:	f5 ee       	ldi	r31, 0xE5	; 229
    2f70:	3f 2e       	mov	r3, r31
    2f72:	f0 2d       	mov	r31, r0
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    2f74:	d3 01       	movw	r26, r6
    2f76:	ed 91       	ld	r30, X+
    2f78:	fc 91       	ld	r31, X
    2f7a:	01 90       	ld	r0, Z+
    2f7c:	f0 81       	ld	r31, Z
    2f7e:	e0 2d       	mov	r30, r0
    2f80:	0f 2e       	mov	r0, r31
    2f82:	fc e0       	ldi	r31, 0x0C	; 12
    2f84:	ef 2e       	mov	r14, r31
    2f86:	f1 2c       	mov	r15, r1
    2f88:	f0 2d       	mov	r31, r0
    2f8a:	8e 01       	movw	r16, r28
    2f8c:	0f 5f       	subi	r16, 0xFF	; 255
    2f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f90:	2d 2d       	mov	r18, r13
    2f92:	3c 2d       	mov	r19, r12
    2f94:	4b 2d       	mov	r20, r11
    2f96:	5a 2d       	mov	r21, r10
    2f98:	69 2d       	mov	r22, r9
    2f9a:	78 2d       	mov	r23, r8
    2f9c:	85 2d       	mov	r24, r5
    2f9e:	94 2d       	mov	r25, r4
    2fa0:	09 95       	icall
    2fa2:	88 23       	and	r24, r24
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <fat_delete_file+0xac>
    2fa6:	44 c0       	rjmp	.+136    	; 0x3030 <fat_delete_file+0x134>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    2fa8:	39 82       	std	Y+1, r3	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    2faa:	d3 01       	movw	r26, r6
    2fac:	ed 91       	ld	r30, X+
    2fae:	fc 91       	ld	r31, X
    2fb0:	04 80       	ldd	r0, Z+4	; 0x04
    2fb2:	f5 81       	ldd	r31, Z+5	; 0x05
    2fb4:	e0 2d       	mov	r30, r0
    2fb6:	2d 2d       	mov	r18, r13
    2fb8:	3c 2d       	mov	r19, r12
    2fba:	4b 2d       	mov	r20, r11
    2fbc:	5a 2d       	mov	r21, r10
    2fbe:	69 2d       	mov	r22, r9
    2fc0:	78 2d       	mov	r23, r8
    2fc2:	85 2d       	mov	r24, r5
    2fc4:	94 2d       	mov	r25, r4
    2fc6:	09 95       	icall
    2fc8:	88 23       	and	r24, r24
    2fca:	91 f1       	breq	.+100    	; 0x3030 <fat_delete_file+0x134>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    2fcc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fce:	8f 30       	cpi	r24, 0x0F	; 15
    2fd0:	a1 f4       	brne	.+40     	; 0x2ffa <fat_delete_file+0xfe>
            break;

        dir_entry_offset += 32;
    2fd2:	2d 2d       	mov	r18, r13
    2fd4:	3c 2d       	mov	r19, r12
    2fd6:	4b 2d       	mov	r20, r11
    2fd8:	5a 2d       	mov	r21, r10
    2fda:	69 2d       	mov	r22, r9
    2fdc:	78 2d       	mov	r23, r8
    2fde:	85 2d       	mov	r24, r5
    2fe0:	94 2d       	mov	r25, r4
    2fe2:	a0 e2       	ldi	r26, 0x20	; 32
    2fe4:	0e 94 56 26 	call	0x4cac	; 0x4cac <__adddi3_s8>
    2fe8:	d2 2e       	mov	r13, r18
    2fea:	c3 2e       	mov	r12, r19
    2fec:	b4 2e       	mov	r11, r20
    2fee:	a5 2e       	mov	r10, r21
    2ff0:	96 2e       	mov	r9, r22
    2ff2:	87 2e       	mov	r8, r23
    2ff4:	58 2e       	mov	r5, r24
    2ff6:	49 2e       	mov	r4, r25
    }
    2ff8:	bd cf       	rjmp	.-134    	; 0x2f74 <fat_delete_file+0x78>
#endif

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    2ffa:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ffc:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ffe:	41 a1       	ldd	r20, Z+33	; 0x21
    3000:	52 a1       	ldd	r21, Z+34	; 0x22
    3002:	63 a1       	ldd	r22, Z+35	; 0x23
    3004:	74 a1       	ldd	r23, Z+36	; 0x24
    3006:	41 15       	cp	r20, r1
    3008:	51 05       	cpc	r21, r1
    300a:	61 05       	cpc	r22, r1
    300c:	71 05       	cpc	r23, r1
    300e:	49 f0       	breq	.+18     	; 0x3022 <fat_delete_file+0x126>
    3010:	c3 01       	movw	r24, r6
    3012:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <fat_free_clusters>
    3016:	91 e0       	ldi	r25, 0x01	; 1
    3018:	81 11       	cpse	r24, r1
    301a:	01 c0       	rjmp	.+2      	; 0x301e <fat_delete_file+0x122>
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	89 2f       	mov	r24, r25
    3020:	07 c0       	rjmp	.+14     	; 0x3030 <fat_delete_file+0x134>
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	05 c0       	rjmp	.+10     	; 0x3030 <fat_delete_file+0x134>
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	03 c0       	rjmp	.+6      	; 0x3030 <fat_delete_file+0x134>
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	01 c0       	rjmp	.+2      	; 0x3030 <fat_delete_file+0x134>

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    if(!dir_entry_offset)
        return 0;
    302e:	80 e0       	ldi	r24, 0x00	; 0

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
}
    3030:	2e 96       	adiw	r28, 0x0e	; 14
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	1f 91       	pop	r17
    3042:	0f 91       	pop	r16
    3044:	ff 90       	pop	r15
    3046:	ef 90       	pop	r14
    3048:	df 90       	pop	r13
    304a:	cf 90       	pop	r12
    304c:	bf 90       	pop	r11
    304e:	af 90       	pop	r10
    3050:	9f 90       	pop	r9
    3052:	8f 90       	pop	r8
    3054:	7f 90       	pop	r7
    3056:	6f 90       	pop	r6
    3058:	5f 90       	pop	r5
    305a:	4f 90       	pop	r4
    305c:	3f 90       	pop	r3
    305e:	08 95       	ret

00003060 <show_hits>:
		return all_ok;
}

uint8_t map_to_byte(uint16_t val){
	return (val/10);
}
    3060:	cf 93       	push	r28
    3062:	df 93       	push	r29
    3064:	81 e1       	ldi	r24, 0x11	; 17
    3066:	91 e0       	ldi	r25, 0x01	; 1
    3068:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
    306c:	c0 e0       	ldi	r28, 0x00	; 0
    306e:	d0 e0       	ldi	r29, 0x00	; 0
    3070:	fe 01       	movw	r30, r28
    3072:	e6 53       	subi	r30, 0x36	; 54
    3074:	fb 4f       	sbci	r31, 0xFB	; 251
    3076:	80 81       	ld	r24, Z
    3078:	4a e0       	ldi	r20, 0x0A	; 10
    307a:	66 ed       	ldi	r22, 0xD6	; 214
    307c:	74 e0       	ldi	r23, 0x04	; 4
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <__itoa_ncheck>
    3084:	86 ed       	ldi	r24, 0xD6	; 214
    3086:	94 e0       	ldi	r25, 0x04	; 4
    3088:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
    308c:	8c e2       	ldi	r24, 0x2C	; 44
    308e:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>
    3092:	fe 01       	movw	r30, r28
    3094:	e0 52       	subi	r30, 0x20	; 32
    3096:	fb 4f       	sbci	r31, 0xFB	; 251
    3098:	80 81       	ld	r24, Z
    309a:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>
    309e:	80 e2       	ldi	r24, 0x20	; 32
    30a0:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>
    30a4:	21 96       	adiw	r28, 0x01	; 1
    30a6:	ca 30       	cpi	r28, 0x0A	; 10
    30a8:	d1 05       	cpc	r29, r1
    30aa:	11 f7       	brne	.-60     	; 0x3070 <show_hits+0x10>
    30ac:	8a e0       	ldi	r24, 0x0A	; 10
    30ae:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	08 95       	ret

000030b8 <init_timer_interrupt>:
    30b8:	88 e0       	ldi	r24, 0x08	; 8
    30ba:	9d e3       	ldi	r25, 0x3D	; 61
    30bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    30c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    30c4:	e1 e8       	ldi	r30, 0x81	; 129
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	88 60       	ori	r24, 0x08	; 8
    30cc:	80 83       	st	Z, r24
    30ce:	af e6       	ldi	r26, 0x6F	; 111
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	8c 91       	ld	r24, X
    30d4:	82 60       	ori	r24, 0x02	; 2
    30d6:	8c 93       	st	X, r24
    30d8:	80 81       	ld	r24, Z
    30da:	85 60       	ori	r24, 0x05	; 5
    30dc:	80 83       	st	Z, r24
    30de:	08 95       	ret

000030e0 <reset_hits>:
    30e0:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <hits_pt>
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	25 e6       	ldi	r18, 0x65	; 101
    30ea:	fc 01       	movw	r30, r24
    30ec:	e6 53       	subi	r30, 0x36	; 54
    30ee:	fb 4f       	sbci	r31, 0xFB	; 251
    30f0:	10 82       	st	Z, r1
    30f2:	fc 01       	movw	r30, r24
    30f4:	e0 52       	subi	r30, 0x20	; 32
    30f6:	fb 4f       	sbci	r31, 0xFB	; 251
    30f8:	20 83       	st	Z, r18
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	8a 30       	cpi	r24, 0x0A	; 10
    30fe:	91 05       	cpc	r25, r1
    3100:	a1 f7       	brne	.-24     	; 0x30ea <reset_hits+0xa>
    3102:	08 95       	ret

00003104 <Init_sdcard>:
    3104:	0f 93       	push	r16
    3106:	cf 93       	push	r28
    3108:	83 b7       	in	r24, 0x33	; 51
    310a:	81 7f       	andi	r24, 0xF1	; 241
    310c:	83 bf       	out	0x33, r24	; 51
    310e:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <sd_raw_init>
    3112:	81 11       	cpse	r24, r1
    3114:	06 c0       	rjmp	.+12     	; 0x3122 <Init_sdcard+0x1e>
    3116:	81 e7       	ldi	r24, 0x71	; 113
    3118:	91 e0       	ldi	r25, 0x01	; 1
    311a:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
    311e:	c0 e0       	ldi	r28, 0x00	; 0
    3120:	05 c0       	rjmp	.+10     	; 0x312c <Init_sdcard+0x28>
    3122:	8f e4       	ldi	r24, 0x4F	; 79
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
    312a:	c1 e0       	ldi	r28, 0x01	; 1
    312c:	00 e0       	ldi	r16, 0x00	; 0
    312e:	2d ed       	ldi	r18, 0xDD	; 221
    3130:	32 e2       	ldi	r19, 0x22	; 34
    3132:	4f e8       	ldi	r20, 0x8F	; 143
    3134:	51 e2       	ldi	r21, 0x21	; 33
    3136:	6e ee       	ldi	r22, 0xEE	; 238
    3138:	70 e2       	ldi	r23, 0x20	; 32
    313a:	80 ec       	ldi	r24, 0xC0	; 192
    313c:	9e e1       	ldi	r25, 0x1E	; 30
    313e:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <partition_open>
    3142:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <partition+0x1>
    3146:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <partition>
    314a:	89 2b       	or	r24, r25
    314c:	d9 f4       	brne	.+54     	; 0x3184 <Init_sdcard+0x80>
    314e:	0f ef       	ldi	r16, 0xFF	; 255
    3150:	2d ed       	ldi	r18, 0xDD	; 221
    3152:	32 e2       	ldi	r19, 0x22	; 34
    3154:	4f e8       	ldi	r20, 0x8F	; 143
    3156:	51 e2       	ldi	r21, 0x21	; 33
    3158:	6e ee       	ldi	r22, 0xEE	; 238
    315a:	70 e2       	ldi	r23, 0x20	; 32
    315c:	80 ec       	ldi	r24, 0xC0	; 192
    315e:	9e e1       	ldi	r25, 0x1E	; 30
    3160:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <partition_open>
    3164:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <partition+0x1>
    3168:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <partition>
    316c:	89 2b       	or	r24, r25
    316e:	31 f4       	brne	.+12     	; 0x317c <Init_sdcard+0x78>
    3170:	85 e3       	ldi	r24, 0x35	; 53
    3172:	91 e0       	ldi	r25, 0x01	; 1
    3174:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
    3178:	c0 e0       	ldi	r28, 0x00	; 0
    317a:	04 c0       	rjmp	.+8      	; 0x3184 <Init_sdcard+0x80>
    317c:	87 e1       	ldi	r24, 0x17	; 23
    317e:	91 e0       	ldi	r25, 0x01	; 1
    3180:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
    3184:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <partition>
    3188:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <partition+0x1>
    318c:	0e 94 18 0c 	call	0x1830	; 0x1830 <fat_open>
    3190:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <fs+0x1>
    3194:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <fs>
    3198:	89 2b       	or	r24, r25
    319a:	31 f4       	brne	.+12     	; 0x31a8 <Init_sdcard+0xa4>
    319c:	8c ef       	ldi	r24, 0xFC	; 252
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
    31a4:	c0 e0       	ldi	r28, 0x00	; 0
    31a6:	04 c0       	rjmp	.+8      	; 0x31b0 <Init_sdcard+0xac>
    31a8:	8c ed       	ldi	r24, 0xDC	; 220
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
    31b0:	4b e8       	ldi	r20, 0x8B	; 139
    31b2:	54 e0       	ldi	r21, 0x04	; 4
    31b4:	68 e1       	ldi	r22, 0x18	; 24
    31b6:	71 e0       	ldi	r23, 0x01	; 1
    31b8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <fs>
    31bc:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <fs+0x1>
    31c0:	0e 94 6d 16 	call	0x2cda	; 0x2cda <fat_get_dir_entry_of_path>
    31c4:	6b e8       	ldi	r22, 0x8B	; 139
    31c6:	74 e0       	ldi	r23, 0x04	; 4
    31c8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <fs>
    31cc:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <fs+0x1>
    31d0:	0e 94 8f 14 	call	0x291e	; 0x291e <fat_open_dir>
    31d4:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <dd+0x1>
    31d8:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <dd>
    31dc:	89 2b       	or	r24, r25
    31de:	31 f4       	brne	.+12     	; 0x31ec <Init_sdcard+0xe8>
    31e0:	8d eb       	ldi	r24, 0xBD	; 189
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
    31e8:	c0 e0       	ldi	r28, 0x00	; 0
    31ea:	04 c0       	rjmp	.+8      	; 0x31f4 <Init_sdcard+0xf0>
    31ec:	80 ea       	ldi	r24, 0xA0	; 160
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
    31f4:	2f ef       	ldi	r18, 0xFF	; 255
    31f6:	84 e3       	ldi	r24, 0x34	; 52
    31f8:	9c e0       	ldi	r25, 0x0C	; 12
    31fa:	21 50       	subi	r18, 0x01	; 1
    31fc:	80 40       	sbci	r24, 0x00	; 0
    31fe:	90 40       	sbci	r25, 0x00	; 0
    3200:	e1 f7       	brne	.-8      	; 0x31fa <Init_sdcard+0xf6>
    3202:	00 c0       	rjmp	.+0      	; 0x3204 <Init_sdcard+0x100>
    3204:	00 00       	nop
    3206:	8c 2f       	mov	r24, r28
    3208:	cf 91       	pop	r28
    320a:	0f 91       	pop	r16
    320c:	08 95       	ret

0000320e <open_file>:


bool open_file(char file_name[],char force[]){
    320e:	af 92       	push	r10
    3210:	bf 92       	push	r11
    3212:	cf 92       	push	r12
    3214:	df 92       	push	r13
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
    3226:	eb 97       	sbiw	r28, 0x3b	; 59
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	7c 01       	movw	r14, r24
    3234:	d6 2e       	mov	r13, r22
    3236:	c7 2e       	mov	r12, r23
	bool all_ok = true;
	 fd = open_file_in_dir(fs, dd, file_name);
    3238:	00 91 d4 04 	lds	r16, 0x04D4	; 0x8004d4 <dd>
    323c:	10 91 d5 04 	lds	r17, 0x04D5	; 0x8004d5 <dd+0x1>
    3240:	a0 90 88 04 	lds	r10, 0x0488	; 0x800488 <fs>
    3244:	b0 90 89 04 	lds	r11, 0x0489	; 0x800489 <fs+0x1>
    3248:	19 c0       	rjmp	.+50     	; 0x327c <open_file+0x6e>

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
	while(fat_read_dir(dd, dir_entry))
	{
		if(strcmp(dir_entry->long_name, name) == 0)
    324a:	b7 01       	movw	r22, r14
    324c:	ce 01       	movw	r24, r28
    324e:	0b 96       	adiw	r24, 0x0b	; 11
    3250:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <strcmp>
    3254:	89 2b       	or	r24, r25
    3256:	91 f4       	brne	.+36     	; 0x327c <open_file+0x6e>
		{
			fat_reset_dir(dd);
    3258:	c8 01       	movw	r24, r16
    325a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <fat_reset_dir>
{
	struct fat_dir_entry_struct file_entry;
	if(!find_file_in_dir(fs, dd, name, &file_entry))
	return 0;

	return fat_open_file(fs, &file_entry);
    325e:	be 01       	movw	r22, r28
    3260:	65 5f       	subi	r22, 0xF5	; 245
    3262:	7f 4f       	sbci	r23, 0xFF	; 255
    3264:	c5 01       	movw	r24, r10
    3266:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <fat_open_file>
}


bool open_file(char file_name[],char force[]){
	bool all_ok = true;
	 fd = open_file_in_dir(fs, dd, file_name);
    326a:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <fd+0x1>
    326e:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <fd>
	if(!fd)
    3272:	89 2b       	or	r24, r25
    3274:	61 f0       	breq	.+24     	; 0x328e <open_file+0x80>
	return (val/10);
}


bool open_file(char file_name[],char force[]){
	bool all_ok = true;
    3276:	bb 24       	eor	r11, r11
    3278:	b3 94       	inc	r11
    327a:	14 c0       	rjmp	.+40     	; 0x32a4 <open_file+0x96>
	return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
	while(fat_read_dir(dd, dir_entry))
    327c:	be 01       	movw	r22, r28
    327e:	65 5f       	subi	r22, 0xF5	; 245
    3280:	7f 4f       	sbci	r23, 0xFF	; 255
    3282:	c8 01       	movw	r24, r16
    3284:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <fat_read_dir>
    3288:	81 11       	cpse	r24, r1
    328a:	df cf       	rjmp	.-66     	; 0x324a <open_file+0x3c>
    328c:	78 c0       	rjmp	.+240    	; 0x337e <open_file+0x170>
bool open_file(char file_name[],char force[]){
	bool all_ok = true;
	 fd = open_file_in_dir(fs, dd, file_name);
	if(!fd)
	{
		uart_puts_p(PSTR("error opening "));
    328e:	81 e9       	ldi	r24, 0x91	; 145
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
		uart_puts(file_name);
    3296:	c7 01       	movw	r24, r14
    3298:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
		uart_putc('\n');
    329c:	8a e0       	ldi	r24, 0x0A	; 10
    329e:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>
		all_ok = false;
    32a2:	b1 2c       	mov	r11, r1
		/*uart_puts_p(PSTR("Opened file: "));
		uart_puts(file_name);
		uart_putc('\n');*/
	}
	
	 offset = 0;
    32a4:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <offset>
    32a8:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <offset+0x1>
    32ac:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <offset+0x2>
    32b0:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <offset+0x3>
	if(!fat_seek_file(fd, &offset, FAT_SEEK_END))
    32b4:	42 e0       	ldi	r20, 0x02	; 2
    32b6:	6a e5       	ldi	r22, 0x5A	; 90
    32b8:	72 e0       	ldi	r23, 0x02	; 2
    32ba:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <fd>
    32be:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <fd+0x1>
    32c2:	0e 94 1e 14 	call	0x283c	; 0x283c <fat_seek_file>
    32c6:	81 11       	cpse	r24, r1
    32c8:	11 c0       	rjmp	.+34     	; 0x32ec <open_file+0xde>
	{
		uart_puts_p(PSTR("error seeking on "));
    32ca:	8f e7       	ldi	r24, 0x7F	; 127
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
		uart_puts(file_name);
    32d2:	c7 01       	movw	r24, r14
    32d4:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
		uart_putc('\n');
    32d8:	8a e0       	ldi	r24, 0x0A	; 10
    32da:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>

		fat_close_file(fd);
    32de:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <fd>
    32e2:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <fd+0x1>
    32e6:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <fat_close_file>
		all_ok = false;
    32ea:	b1 2c       	mov	r11, r1
	}
//uart_puts_p(PSTR("Done seeking\n"));
/* write text to file */
char line[10];
uart_puts("Force: ");
    32ec:	8a e1       	ldi	r24, 0x1A	; 26
    32ee:	91 e0       	ldi	r25, 0x01	; 1
    32f0:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
uart_puts(force);
    32f4:	8d 2d       	mov	r24, r13
    32f6:	9c 2d       	mov	r25, r12
    32f8:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
uart_putc('\n');
    32fc:	8a e0       	ldi	r24, 0x0A	; 10
    32fe:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>
snprintf(line, sizeof (line), "%s\n", force);
    3302:	cf 92       	push	r12
    3304:	df 92       	push	r13
    3306:	82 e2       	ldi	r24, 0x22	; 34
    3308:	91 e0       	ldi	r25, 0x01	; 1
    330a:	9f 93       	push	r25
    330c:	8f 93       	push	r24
    330e:	1f 92       	push	r1
    3310:	8a e0       	ldi	r24, 0x0A	; 10
    3312:	8f 93       	push	r24
    3314:	8e 01       	movw	r16, r28
    3316:	0f 5f       	subi	r16, 0xFF	; 255
    3318:	1f 4f       	sbci	r17, 0xFF	; 255
    331a:	1f 93       	push	r17
    331c:	0f 93       	push	r16
    331e:	0e 94 01 27 	call	0x4e02	; 0x4e02 <snprintf>
uart_puts("Force with type: ");
    3322:	86 e2       	ldi	r24, 0x26	; 38
    3324:	91 e0       	ldi	r25, 0x01	; 1
    3326:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
uart_puts(line);
    332a:	c8 01       	movw	r24, r16
    332c:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
uart_putc('\n');
    3330:	8a e0       	ldi	r24, 0x0A	; 10
    3332:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>

		if(fat_write_file(fd, (uint8_t*) line, strlen(line)) != strlen(line))
    3336:	f8 01       	movw	r30, r16
    3338:	01 90       	ld	r0, Z+
    333a:	00 20       	and	r0, r0
    333c:	e9 f7       	brne	.-6      	; 0x3338 <open_file+0x12a>
    333e:	31 97       	sbiw	r30, 0x01	; 1
    3340:	af 01       	movw	r20, r30
    3342:	40 1b       	sub	r20, r16
    3344:	51 0b       	sbc	r21, r17
    3346:	b8 01       	movw	r22, r16
    3348:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <fd>
    334c:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <fd+0x1>
    3350:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <fat_write_file>
    3354:	f8 01       	movw	r30, r16
    3356:	01 90       	ld	r0, Z+
    3358:	00 20       	and	r0, r0
    335a:	e9 f7       	brne	.-6      	; 0x3356 <open_file+0x148>
    335c:	31 97       	sbiw	r30, 0x01	; 1
    335e:	e0 1b       	sub	r30, r16
    3360:	f1 0b       	sbc	r31, r17
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	8e 17       	cp	r24, r30
    336e:	9f 07       	cpc	r25, r31
    3370:	59 f0       	breq	.+22     	; 0x3388 <open_file+0x17a>
		{
			uart_puts_p(PSTR("error writing to file\n"));
    3372:	88 e6       	ldi	r24, 0x68	; 104
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
			all_ok = false;
    337a:	b1 2c       	mov	r11, r1
    337c:	05 c0       	rjmp	.+10     	; 0x3388 <open_file+0x17a>
}


bool open_file(char file_name[],char force[]){
	bool all_ok = true;
	 fd = open_file_in_dir(fs, dd, file_name);
    337e:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <fd+0x1>
    3382:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <fd>
    3386:	83 cf       	rjmp	.-250    	; 0x328e <open_file+0x80>
			uart_puts_p(PSTR("error writing to file\n"));
			all_ok = false;
		}
	

	fat_close_file(fd);
    3388:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <fd>
    338c:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <fd+0x1>
    3390:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <fat_close_file>
	//uart_puts_p(PSTR("closed file\n"));
	return all_ok;
}
    3394:	8b 2d       	mov	r24, r11
    3396:	eb 96       	adiw	r28, 0x3b	; 59
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	1f 91       	pop	r17
    33a8:	0f 91       	pop	r16
    33aa:	ff 90       	pop	r15
    33ac:	ef 90       	pop	r14
    33ae:	df 90       	pop	r13
    33b0:	cf 90       	pop	r12
    33b2:	bf 90       	pop	r11
    33b4:	af 90       	pop	r10
    33b6:	08 95       	ret

000033b8 <__vector_11>:
}



ISR (TIMER1_COMPA_vect)
{	
    33b8:	1f 92       	push	r1
    33ba:	0f 92       	push	r0
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	0f 92       	push	r0
    33c0:	11 24       	eor	r1, r1
    33c2:	cf 92       	push	r12
    33c4:	df 92       	push	r13
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	2f 93       	push	r18
    33d0:	3f 93       	push	r19
    33d2:	4f 93       	push	r20
    33d4:	5f 93       	push	r21
    33d6:	6f 93       	push	r22
    33d8:	7f 93       	push	r23
    33da:	8f 93       	push	r24
    33dc:	9f 93       	push	r25
    33de:	af 93       	push	r26
    33e0:	bf 93       	push	r27
    33e2:	ef 93       	push	r30
    33e4:	ff 93       	push	r31
    33e6:	cf 93       	push	r28
    33e8:	df 93       	push	r29
    33ea:	1f 92       	push	r1
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
	uart_puts("Interrupt..");
    33f0:	88 e3       	ldi	r24, 0x38	; 56
    33f2:	91 e0       	ldi	r25, 0x01	; 1
    33f4:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
	bool all_ok = true;
	times++;
    33f8:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <times>
    33fc:	8f 5f       	subi	r24, 0xFF	; 255
    33fe:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <times>
	if (times == 2){
    3402:	82 30       	cpi	r24, 0x02	; 2
    3404:	09 f0       	breq	.+2      	; 0x3408 <__vector_11+0x50>
    3406:	55 c0       	rjmp	.+170    	; 0x34b2 <__vector_11+0xfa>
	// action to be done every 3 sec
	show_hits();
    3408:	0e 94 30 18 	call	0x3060	; 0x3060 <show_hits>
	for (int i =0 ; i < hits_pt ; i++){
    340c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <hits_pt>
    3410:	88 23       	and	r24, r24
    3412:	09 f4       	brne	.+2      	; 0x3416 <__vector_11+0x5e>
    3414:	41 c0       	rjmp	.+130    	; 0x3498 <__vector_11+0xe0>
    3416:	00 e0       	ldi	r16, 0x00	; 0
    3418:	10 e0       	ldi	r17, 0x00	; 0
    341a:	dd 24       	eor	r13, r13
    341c:	d3 94       	inc	r13
		
		itoa(hits[i],force_val,10);
		strcat(force_val,",");
    341e:	0f 2e       	mov	r0, r31
    3420:	fc e2       	ldi	r31, 0x2C	; 44
    3422:	ef 2e       	mov	r14, r31
    3424:	f1 2c       	mov	r15, r1
    3426:	f0 2d       	mov	r31, r0
		char ap = hits_types[i];
		strncat(force_val, &ap, 1); 
		uart_puts(force_val);
		if(!open_file("data.txt",force_val)){
			all_ok = false;
    3428:	c1 2c       	mov	r12, r1
	if (times == 2){
	// action to be done every 3 sec
	show_hits();
	for (int i =0 ; i < hits_pt ; i++){
		
		itoa(hits[i],force_val,10);
    342a:	f8 01       	movw	r30, r16
    342c:	e6 53       	subi	r30, 0x36	; 54
    342e:	fb 4f       	sbci	r31, 0xFB	; 251
    3430:	80 81       	ld	r24, Z
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3432:	4a e0       	ldi	r20, 0x0A	; 10
    3434:	66 ed       	ldi	r22, 0xD6	; 214
    3436:	74 e0       	ldi	r23, 0x04	; 4
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <__itoa_ncheck>
		strcat(force_val,",");
    343e:	e6 ed       	ldi	r30, 0xD6	; 214
    3440:	f4 e0       	ldi	r31, 0x04	; 4
    3442:	01 90       	ld	r0, Z+
    3444:	00 20       	and	r0, r0
    3446:	e9 f7       	brne	.-6      	; 0x3442 <__vector_11+0x8a>
    3448:	31 97       	sbiw	r30, 0x01	; 1
    344a:	f1 82       	std	Z+1, r15	; 0x01
    344c:	e0 82       	st	Z, r14
		char ap = hits_types[i];
    344e:	f8 01       	movw	r30, r16
    3450:	e0 52       	subi	r30, 0x20	; 32
    3452:	fb 4f       	sbci	r31, 0xFB	; 251
    3454:	80 81       	ld	r24, Z
    3456:	89 83       	std	Y+1, r24	; 0x01
		strncat(force_val, &ap, 1); 
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	50 e0       	ldi	r21, 0x00	; 0
    345c:	be 01       	movw	r22, r28
    345e:	6f 5f       	subi	r22, 0xFF	; 255
    3460:	7f 4f       	sbci	r23, 0xFF	; 255
    3462:	86 ed       	ldi	r24, 0xD6	; 214
    3464:	94 e0       	ldi	r25, 0x04	; 4
    3466:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <strncat>
		uart_puts(force_val);
    346a:	86 ed       	ldi	r24, 0xD6	; 214
    346c:	94 e0       	ldi	r25, 0x04	; 4
    346e:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
		if(!open_file("data.txt",force_val)){
    3472:	66 ed       	ldi	r22, 0xD6	; 214
    3474:	74 e0       	ldi	r23, 0x04	; 4
    3476:	84 e4       	ldi	r24, 0x44	; 68
    3478:	91 e0       	ldi	r25, 0x01	; 1
    347a:	0e 94 07 19 	call	0x320e	; 0x320e <open_file>
    347e:	81 11       	cpse	r24, r1
    3480:	01 c0       	rjmp	.+2      	; 0x3484 <__vector_11+0xcc>
			all_ok = false;
    3482:	dc 2c       	mov	r13, r12
	bool all_ok = true;
	times++;
	if (times == 2){
	// action to be done every 3 sec
	show_hits();
	for (int i =0 ; i < hits_pt ; i++){
    3484:	0f 5f       	subi	r16, 0xFF	; 255
    3486:	1f 4f       	sbci	r17, 0xFF	; 255
    3488:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <hits_pt>
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	08 17       	cp	r16, r24
    3490:	19 07       	cpc	r17, r25
    3492:	5c f2       	brlt	.-106    	; 0x342a <__vector_11+0x72>
		uart_puts(force_val);
		if(!open_file("data.txt",force_val)){
			all_ok = false;
		}
	}
	if (all_ok){
    3494:	dd 20       	and	r13, r13
    3496:	29 f0       	breq	.+10     	; 0x34a2 <__vector_11+0xea>
		uart_puts("L.\n");
    3498:	8d e4       	ldi	r24, 0x4D	; 77
    349a:	91 e0       	ldi	r25, 0x01	; 1
    349c:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
    34a0:	04 c0       	rjmp	.+8      	; 0x34aa <__vector_11+0xf2>
	}
	else{
		uart_puts("Error logging.");
    34a2:	81 e5       	ldi	r24, 0x51	; 81
    34a4:	91 e0       	ldi	r25, 0x01	; 1
    34a6:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
	}
	
	reset_hits();
    34aa:	0e 94 70 18 	call	0x30e0	; 0x30e0 <reset_hits>
	times = 0;
    34ae:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <times>
	}
}
    34b2:	0f 90       	pop	r0
    34b4:	df 91       	pop	r29
    34b6:	cf 91       	pop	r28
    34b8:	ff 91       	pop	r31
    34ba:	ef 91       	pop	r30
    34bc:	bf 91       	pop	r27
    34be:	af 91       	pop	r26
    34c0:	9f 91       	pop	r25
    34c2:	8f 91       	pop	r24
    34c4:	7f 91       	pop	r23
    34c6:	6f 91       	pop	r22
    34c8:	5f 91       	pop	r21
    34ca:	4f 91       	pop	r20
    34cc:	3f 91       	pop	r19
    34ce:	2f 91       	pop	r18
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	ff 90       	pop	r15
    34d6:	ef 90       	pop	r14
    34d8:	df 90       	pop	r13
    34da:	cf 90       	pop	r12
    34dc:	0f 90       	pop	r0
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	0f 90       	pop	r0
    34e2:	1f 90       	pop	r1
    34e4:	18 95       	reti

000034e6 <InitADC>:
}
//------------------------------------------------------------
void InitADC()
{
	// Select Vref=AVcc
	ADMUX |= (1<<REFS0);
    34e6:	ec e7       	ldi	r30, 0x7C	; 124
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	80 64       	ori	r24, 0x40	; 64
    34ee:	80 83       	st	Z, r24
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
    34f0:	ea e7       	ldi	r30, 0x7A	; 122
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	80 81       	ld	r24, Z
    34f6:	87 68       	ori	r24, 0x87	; 135
    34f8:	80 83       	st	Z, r24
    34fa:	08 95       	ret

000034fc <ReadADC>:
//----------------------------------------------------------

uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
    34fc:	ec e7       	ldi	r30, 0x7C	; 124
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	90 81       	ld	r25, Z
    3502:	90 7f       	andi	r25, 0xF0	; 240
    3504:	8f 70       	andi	r24, 0x0F	; 15
    3506:	89 2b       	or	r24, r25
    3508:	80 83       	st	Z, r24
	//single conversion mode
	ADCSRA |= (1<<ADSC);
    350a:	ea e7       	ldi	r30, 0x7A	; 122
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	80 64       	ori	r24, 0x40	; 64
    3512:	80 83       	st	Z, r24
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
    3514:	80 81       	ld	r24, Z
    3516:	86 fd       	sbrc	r24, 6
    3518:	fd cf       	rjmp	.-6      	; 0x3514 <ReadADC+0x18>
	return ADC;
    351a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    351e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
    3522:	08 95       	ret

00003524 <set_hits>:
	*sec = 0;
}
#endif


void set_hits(uint16_t val){
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    3528:	cf 93       	push	r28
    352a:	8c 01       	movw	r16, r24
	TM1637_display_colon(0);
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	0e 94 32 24 	call	0x4864	; 0x4864 <TM1637_display_colon>
    3532:	c3 e0       	ldi	r28, 0x03	; 3
	for (int i = 0;i <4 ; i++){
		TM1637_display_digit(3-i,val%10);
    3534:	98 01       	movw	r18, r16
    3536:	ad ec       	ldi	r26, 0xCD	; 205
    3538:	bc ec       	ldi	r27, 0xCC	; 204
    353a:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    353e:	96 95       	lsr	r25
    3540:	87 95       	ror	r24
    3542:	96 95       	lsr	r25
    3544:	87 95       	ror	r24
    3546:	96 95       	lsr	r25
    3548:	87 95       	ror	r24
    354a:	9c 01       	movw	r18, r24
    354c:	22 0f       	add	r18, r18
    354e:	33 1f       	adc	r19, r19
    3550:	88 0f       	add	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	88 0f       	add	r24, r24
    3556:	99 1f       	adc	r25, r25
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	82 0f       	add	r24, r18
    355e:	93 1f       	adc	r25, r19
    3560:	b8 01       	movw	r22, r16
    3562:	68 1b       	sub	r22, r24
    3564:	79 0b       	sbc	r23, r25
    3566:	8c 2f       	mov	r24, r28
    3568:	0e 94 1e 24 	call	0x483c	; 0x483c <TM1637_display_digit>
		val = val/10;
    356c:	98 01       	movw	r18, r16
    356e:	ad ec       	ldi	r26, 0xCD	; 205
    3570:	bc ec       	ldi	r27, 0xCC	; 204
    3572:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    3576:	8c 01       	movw	r16, r24
    3578:	16 95       	lsr	r17
    357a:	07 95       	ror	r16
    357c:	16 95       	lsr	r17
    357e:	07 95       	ror	r16
    3580:	16 95       	lsr	r17
    3582:	07 95       	ror	r16
    3584:	c1 50       	subi	r28, 0x01	; 1
    3586:	b0 f6       	brcc	.-84     	; 0x3534 <set_hits+0x10>
	}
}
    3588:	cf 91       	pop	r28
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	08 95       	ret

00003590 <set_last_hit>:

void set_last_hit(uint16_t val){
    3590:	0f 93       	push	r16
    3592:	1f 93       	push	r17
    3594:	cf 93       	push	r28
    3596:	8c 01       	movw	r16, r24
	TM1637_2_display_colon(0);
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	0e 94 ed 24 	call	0x49da	; 0x49da <TM1637_2_display_colon>
    359e:	c3 e0       	ldi	r28, 0x03	; 3
	
	for (int i = 0;i <4 ; i++){
		TM1637_2_display_digit(3-i,val%10);
    35a0:	98 01       	movw	r18, r16
    35a2:	ad ec       	ldi	r26, 0xCD	; 205
    35a4:	bc ec       	ldi	r27, 0xCC	; 204
    35a6:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    35aa:	96 95       	lsr	r25
    35ac:	87 95       	ror	r24
    35ae:	96 95       	lsr	r25
    35b0:	87 95       	ror	r24
    35b2:	96 95       	lsr	r25
    35b4:	87 95       	ror	r24
    35b6:	9c 01       	movw	r18, r24
    35b8:	22 0f       	add	r18, r18
    35ba:	33 1f       	adc	r19, r19
    35bc:	88 0f       	add	r24, r24
    35be:	99 1f       	adc	r25, r25
    35c0:	88 0f       	add	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	88 0f       	add	r24, r24
    35c6:	99 1f       	adc	r25, r25
    35c8:	82 0f       	add	r24, r18
    35ca:	93 1f       	adc	r25, r19
    35cc:	b8 01       	movw	r22, r16
    35ce:	68 1b       	sub	r22, r24
    35d0:	79 0b       	sbc	r23, r25
    35d2:	8c 2f       	mov	r24, r28
    35d4:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <TM1637_2_display_digit>
		val = val/10;
    35d8:	98 01       	movw	r18, r16
    35da:	ad ec       	ldi	r26, 0xCD	; 205
    35dc:	bc ec       	ldi	r27, 0xCC	; 204
    35de:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    35e2:	8c 01       	movw	r16, r24
    35e4:	16 95       	lsr	r17
    35e6:	07 95       	ror	r16
    35e8:	16 95       	lsr	r17
    35ea:	07 95       	ror	r16
    35ec:	16 95       	lsr	r17
    35ee:	07 95       	ror	r16
    35f0:	c1 50       	subi	r28, 0x01	; 1
    35f2:	b0 f6       	brcc	.-84     	; 0x35a0 <set_last_hit+0x10>
	}
	
}
    35f4:	cf 91       	pop	r28
    35f6:	1f 91       	pop	r17
    35f8:	0f 91       	pop	r16
    35fa:	08 95       	ret

000035fc <set_null_1>:

void set_null_1(){
    35fc:	cf 93       	push	r28
	TM1637_display_colon(0);
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	0e 94 32 24 	call	0x4864	; 0x4864 <TM1637_display_colon>
    3604:	c0 e0       	ldi	r28, 0x00	; 0
	
	for (int i = 0;i <4 ; i++){
		 TM1637_display_segments(i, 0b1000000);
    3606:	60 e4       	ldi	r22, 0x40	; 64
    3608:	8c 2f       	mov	r24, r28
    360a:	0e 94 04 24 	call	0x4808	; 0x4808 <TM1637_display_segments>
    360e:	cf 5f       	subi	r28, 0xFF	; 255
}

void set_null_1(){
	TM1637_display_colon(0);
	
	for (int i = 0;i <4 ; i++){
    3610:	c4 30       	cpi	r28, 0x04	; 4
    3612:	c9 f7       	brne	.-14     	; 0x3606 <set_null_1+0xa>
		 TM1637_display_segments(i, 0b1000000);
		
	}
	
}
    3614:	cf 91       	pop	r28
    3616:	08 95       	ret

00003618 <set_null_2>:

void set_null_2(){
    3618:	cf 93       	push	r28
	TM1637_2_display_colon(0);
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	0e 94 ed 24 	call	0x49da	; 0x49da <TM1637_2_display_colon>
    3620:	c0 e0       	ldi	r28, 0x00	; 0
	
	for (int i = 0;i <4 ; i++){
	 TM1637_2_display_segments(i, 0b1000000);
    3622:	60 e4       	ldi	r22, 0x40	; 64
    3624:	8c 2f       	mov	r24, r28
    3626:	0e 94 bf 24 	call	0x497e	; 0x497e <TM1637_2_display_segments>
    362a:	cf 5f       	subi	r28, 0xFF	; 255
}

void set_null_2(){
	TM1637_2_display_colon(0);
	
	for (int i = 0;i <4 ; i++){
    362c:	c4 30       	cpi	r28, 0x04	; 4
    362e:	c9 f7       	brne	.-14     	; 0x3622 <set_null_2+0xa>
	 TM1637_2_display_segments(i, 0b1000000);
		
	}
	
}
    3630:	cf 91       	pop	r28
    3632:	08 95       	ret

00003634 <reset_data>:
	reset_hits();
	times = 0;
	}
}

void reset_data(){
    3634:	0f 93       	push	r16
    3636:	1f 93       	push	r17
    3638:	cf 93       	push	r28
    363a:	df 93       	push	r29
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
    3640:	e1 97       	sbiw	r28, 0x31	; 49
    3642:	0f b6       	in	r0, 0x3f	; 63
    3644:	f8 94       	cli
    3646:	de bf       	out	0x3e, r29	; 62
    3648:	0f be       	out	0x3f, r0	; 63
    364a:	cd bf       	out	0x3d, r28	; 61
	    struct fat_dir_entry_struct file_entry;
	    if(find_file_in_dir(fs, dd, "data.txt", &file_entry))
    364c:	00 91 d4 04 	lds	r16, 0x04D4	; 0x8004d4 <dd>
    3650:	10 91 d5 04 	lds	r17, 0x04D5	; 0x8004d5 <dd+0x1>
    3654:	15 c0       	rjmp	.+42     	; 0x3680 <reset_data+0x4c>

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
	while(fat_read_dir(dd, dir_entry))
	{
		if(strcmp(dir_entry->long_name, name) == 0)
    3656:	64 e4       	ldi	r22, 0x44	; 68
    3658:	71 e0       	ldi	r23, 0x01	; 1
    365a:	ce 01       	movw	r24, r28
    365c:	01 96       	adiw	r24, 0x01	; 1
    365e:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <strcmp>
    3662:	89 2b       	or	r24, r25
    3664:	69 f4       	brne	.+26     	; 0x3680 <reset_data+0x4c>
		{
			fat_reset_dir(dd);
    3666:	c8 01       	movw	r24, r16
    3668:	0e 94 d7 14 	call	0x29ae	; 0x29ae <fat_reset_dir>

void reset_data(){
	    struct fat_dir_entry_struct file_entry;
	    if(find_file_in_dir(fs, dd, "data.txt", &file_entry))
	    {
		    if(fat_delete_file(fs, &file_entry)){
    366c:	be 01       	movw	r22, r28
    366e:	6f 5f       	subi	r22, 0xFF	; 255
    3670:	7f 4f       	sbci	r23, 0xFF	; 255
    3672:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <fs>
    3676:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <fs+0x1>
    367a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <fat_delete_file>
    367e:	09 c0       	rjmp	.+18     	; 0x3692 <reset_data+0x5e>
	return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
	while(fat_read_dir(dd, dir_entry))
    3680:	be 01       	movw	r22, r28
    3682:	6f 5f       	subi	r22, 0xFF	; 255
    3684:	7f 4f       	sbci	r23, 0xFF	; 255
    3686:	c8 01       	movw	r24, r16
    3688:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <fat_read_dir>
    368c:	81 11       	cpse	r24, r1
    368e:	e3 cf       	rjmp	.-58     	; 0x3656 <reset_data+0x22>
    3690:	1e c0       	rjmp	.+60     	; 0x36ce <reset_data+0x9a>
	    uart_puts_p(PSTR("error deleting file: "));
	    uart_puts( "data.txt");
	    uart_putc('\n');
		}
  
	    if(!fat_create_file(dd,  "data.txt", &file_entry))
    3692:	ae 01       	movw	r20, r28
    3694:	4f 5f       	subi	r20, 0xFF	; 255
    3696:	5f 4f       	sbci	r21, 0xFF	; 255
    3698:	64 e4       	ldi	r22, 0x44	; 68
    369a:	71 e0       	ldi	r23, 0x01	; 1
    369c:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <dd>
    36a0:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <dd+0x1>
    36a4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <fat_create_file>
    36a8:	81 11       	cpse	r24, r1
    36aa:	0c c0       	rjmp	.+24     	; 0x36c4 <reset_data+0x90>
	    {
		    uart_puts_p(PSTR("error creating file: "));
    36ac:	8f e8       	ldi	r24, 0x8F	; 143
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
		    uart_puts( "data.txt");
    36b4:	84 e4       	ldi	r24, 0x44	; 68
    36b6:	91 e0       	ldi	r25, 0x01	; 1
    36b8:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
		    uart_putc('\n');
    36bc:	8a e0       	ldi	r24, 0x0A	; 10
    36be:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>
    36c2:	11 c0       	rjmp	.+34     	; 0x36e6 <reset_data+0xb2>
	    }
		else{
			set_null_1();
    36c4:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <set_null_1>
			set_null_2();
    36c8:	0e 94 0c 1b 	call	0x3618	; 0x3618 <set_null_2>
		}
    
}
    36cc:	0c c0       	rjmp	.+24     	; 0x36e6 <reset_data+0xb2>
				//
			}
		    
	    }
		else{
	    uart_puts_p(PSTR("error deleting file: "));
    36ce:	85 ea       	ldi	r24, 0xA5	; 165
    36d0:	91 e0       	ldi	r25, 0x01	; 1
    36d2:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
	    uart_puts( "data.txt");
    36d6:	84 e4       	ldi	r24, 0x44	; 68
    36d8:	91 e0       	ldi	r25, 0x01	; 1
    36da:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
	    uart_putc('\n');
    36de:	8a e0       	ldi	r24, 0x0A	; 10
    36e0:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>
    36e4:	d6 cf       	rjmp	.-84     	; 0x3692 <reset_data+0x5e>
		else{
			set_null_1();
			set_null_2();
		}
    
}
    36e6:	e1 96       	adiw	r28, 0x31	; 49
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	1f 91       	pop	r17
    36f8:	0f 91       	pop	r16
    36fa:	08 95       	ret

000036fc <set_done1>:
	}
	
}

void set_done1(){
TM1637_display_colon(0);
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	0e 94 32 24 	call	0x4864	; 0x4864 <TM1637_display_colon>
TM1637_display_segments(0, 0b0111111);
    3702:	6f e3       	ldi	r22, 0x3F	; 63
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	0e 94 04 24 	call	0x4808	; 0x4808 <TM1637_display_segments>
TM1637_display_segments(1, 0b1011100);
    370a:	6c e5       	ldi	r22, 0x5C	; 92
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	0e 94 04 24 	call	0x4808	; 0x4808 <TM1637_display_segments>
TM1637_display_segments(2, 0b1010100);
    3712:	64 e5       	ldi	r22, 0x54	; 84
    3714:	82 e0       	ldi	r24, 0x02	; 2
    3716:	0e 94 04 24 	call	0x4808	; 0x4808 <TM1637_display_segments>
TM1637_display_segments(3, 0b1111001);
    371a:	69 e7       	ldi	r22, 0x79	; 121
    371c:	83 e0       	ldi	r24, 0x03	; 3
    371e:	0e 94 04 24 	call	0x4808	; 0x4808 <TM1637_display_segments>
    3722:	08 95       	ret

00003724 <set_done2>:
}
void set_done2(){
	TM1637_2_display_colon(0);
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	0e 94 ed 24 	call	0x49da	; 0x49da <TM1637_2_display_colon>
	TM1637_2_display_segments(0, 0b0111111);
    372a:	6f e3       	ldi	r22, 0x3F	; 63
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	0e 94 bf 24 	call	0x497e	; 0x497e <TM1637_2_display_segments>
	TM1637_2_display_segments(1, 0b1011100);
    3732:	6c e5       	ldi	r22, 0x5C	; 92
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	0e 94 bf 24 	call	0x497e	; 0x497e <TM1637_2_display_segments>
	TM1637_2_display_segments(2, 0b1010100);
    373a:	64 e5       	ldi	r22, 0x54	; 84
    373c:	82 e0       	ldi	r24, 0x02	; 2
    373e:	0e 94 bf 24 	call	0x497e	; 0x497e <TM1637_2_display_segments>
	TM1637_2_display_segments(3, 0b1111001);
    3742:	69 e7       	ldi	r22, 0x79	; 121
    3744:	83 e0       	ldi	r24, 0x03	; 3
    3746:	0e 94 bf 24 	call	0x497e	; 0x497e <TM1637_2_display_segments>
    374a:	08 95       	ret

0000374c <main>:

char times = 0;
int main(void)
{	
	//init lcd
	TM1637_init(1/*enable*/, 7/*brightness*/);
    374c:	67 e0       	ldi	r22, 0x07	; 7
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <TM1637_init>
	TM1637_2_init(1/*enable*/, 7/*brightness*/);
    3754:	67 e0       	ldi	r22, 0x07	; 7
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	0e 94 b6 24 	call	0x496c	; 0x496c <TM1637_2_init>
	set_null_1();
    375c:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <set_null_1>
	set_null_2();
    3760:	0e 94 0c 1b 	call	0x3618	; 0x3618 <set_null_2>
	
	DDRB = 0x00;
    3764:	14 b8       	out	0x04, r1	; 4
	PORTB = 0x01;
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	85 b9       	out	0x05, r24	; 5
	
	
	
	//init uart
	uart_init();
    376a:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <uart_init>
	InitADC();
    376e:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <InitADC>
	init_timer_interrupt();
    3772:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <init_timer_interrupt>
    
	uart_puts_p(PSTR("Welcome..."));
    3776:	8b eb       	ldi	r24, 0xBB	; 187
    3778:	91 e0       	ldi	r25, 0x01	; 1
    377a:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <uart_puts_p>
	sd_loaded = Init_sdcard();
    377e:	0e 94 82 18 	call	0x3104	; 0x3104 <Init_sdcard>
    3782:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <sd_loaded>
	if (sd_loaded){
    3786:	88 23       	and	r24, r24
    3788:	31 f1       	breq	.+76     	; 0x37d6 <main+0x8a>
	set_hits(0);
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	0e 94 92 1a 	call	0x3524	; 0x3524 <set_hits>
	set_last_hit(0);
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	0e 94 c8 1a 	call	0x3590	; 0x3590 <set_last_hit>
		_delay_ms(500);
	}
	}
	
	
    sei();
    379a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    379c:	2f ef       	ldi	r18, 0xFF	; 255
    379e:	89 e6       	ldi	r24, 0x69	; 105
    37a0:	98 e1       	ldi	r25, 0x18	; 24
    37a2:	21 50       	subi	r18, 0x01	; 1
    37a4:	80 40       	sbci	r24, 0x00	; 0
    37a6:	90 40       	sbci	r25, 0x00	; 0
    37a8:	e1 f7       	brne	.-8      	; 0x37a2 <main+0x56>
    37aa:	00 c0       	rjmp	.+0      	; 0x37ac <main+0x60>
    37ac:	00 00       	nop
    

    _delay_ms(1000);
	
	//-------------
	set_hits(hits_counter);
    37ae:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <hits_counter>
    37b2:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <hits_counter+0x1>
    37b6:	0e 94 92 1a 	call	0x3524	; 0x3524 <set_hits>
	set_last_hit(last_hit);
    37ba:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <last_hit>
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	0e 94 c8 1a 	call	0x3590	; 0x3590 <set_last_hit>
    
    
	reset_hits();
    37c4:	0e 94 70 18 	call	0x30e0	; 0x30e0 <reset_hits>
				}
				else{
					if ( reading_r >100 && reading_r  < last_reading_r ){
						
						hits[hits_pt] = map_to_byte(reading_r );
						hits_types[hits_pt] = 'r';
    37c8:	0f 2e       	mov	r0, r31
    37ca:	f2 e7       	ldi	r31, 0x72	; 114
    37cc:	ff 2e       	mov	r15, r31
    37ce:	f0 2d       	mov	r31, r0
				}
				else{
					if ( reading_l>100 && reading_l < last_reading_l){
				  
					hits[hits_pt] = map_to_byte(reading_l);
					hits_types[hits_pt] = 'l';
    37d0:	0c e6       	ldi	r16, 0x6C	; 108
			}
			else{
				if ( reading_u >100 && reading_u  < last_reading_u ){
					
					hits[hits_pt] = map_to_byte(reading_u );
					hits_types[hits_pt] = 'u';
    37d2:	15 e7       	ldi	r17, 0x75	; 117
    37d4:	1c c0       	rjmp	.+56     	; 0x380e <main+0xc2>
	set_hits(0);
	set_last_hit(0);
	}
	else{
	while(1){
		cli();
    37d6:	f8 94       	cli
		set_null_1();
    37d8:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <set_null_1>
		set_null_2();
    37dc:	0e 94 0c 1b 	call	0x3618	; 0x3618 <set_null_2>
    37e0:	2f ef       	ldi	r18, 0xFF	; 255
    37e2:	84 e3       	ldi	r24, 0x34	; 52
    37e4:	9c e0       	ldi	r25, 0x0C	; 12
    37e6:	21 50       	subi	r18, 0x01	; 1
    37e8:	80 40       	sbci	r24, 0x00	; 0
    37ea:	90 40       	sbci	r25, 0x00	; 0
    37ec:	e1 f7       	brne	.-8      	; 0x37e6 <main+0x9a>
    37ee:	00 c0       	rjmp	.+0      	; 0x37f0 <main+0xa4>
    37f0:	00 00       	nop
		_delay_ms(500);
		TM1637_clear();
    37f2:	0e 94 45 24 	call	0x488a	; 0x488a <TM1637_clear>
		TM1637_2_clear();
    37f6:	0e 94 00 25 	call	0x4a00	; 0x4a00 <TM1637_2_clear>
    37fa:	2f ef       	ldi	r18, 0xFF	; 255
    37fc:	84 e3       	ldi	r24, 0x34	; 52
    37fe:	9c e0       	ldi	r25, 0x0C	; 12
    3800:	21 50       	subi	r18, 0x01	; 1
    3802:	80 40       	sbci	r24, 0x00	; 0
    3804:	90 40       	sbci	r25, 0x00	; 0
    3806:	e1 f7       	brne	.-8      	; 0x3800 <main+0xb4>
    3808:	00 c0       	rjmp	.+0      	; 0x380a <main+0xbe>
    380a:	00 00       	nop
    380c:	e4 cf       	rjmp	.-56     	; 0x37d6 <main+0x8a>
    
	reset_hits();
    while(1) {
		
		
		if ( (PINB & (1<<0)) == 0){
    380e:	18 99       	sbic	0x03, 0	; 3
    3810:	8b c1       	rjmp	.+790    	; 0x3b28 <main+0x3dc>
			uart_puts("Button pressed..");
    3812:	80 e6       	ldi	r24, 0x60	; 96
    3814:	91 e0       	ldi	r25, 0x01	; 1
    3816:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <uart_puts>
    381a:	2f ef       	ldi	r18, 0xFF	; 255
    381c:	83 ed       	ldi	r24, 0xD3	; 211
    381e:	90 e3       	ldi	r25, 0x30	; 48
    3820:	21 50       	subi	r18, 0x01	; 1
    3822:	80 40       	sbci	r24, 0x00	; 0
    3824:	90 40       	sbci	r25, 0x00	; 0
    3826:	e1 f7       	brne	.-8      	; 0x3820 <main+0xd4>
    3828:	00 c0       	rjmp	.+0      	; 0x382a <main+0xde>
    382a:	00 00       	nop
			_delay_ms(2000);
			
			if( (PINB & (1<<0)) == 0){
    382c:	18 99       	sbic	0x03, 0	; 3
    382e:	7c c1       	rjmp	.+760    	; 0x3b28 <main+0x3dc>
				reset_data();
    3830:	0e 94 1a 1b 	call	0x3634	; 0x3634 <reset_data>
				set_done1();
    3834:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <set_done1>
				set_done2();
    3838:	0e 94 92 1b 	call	0x3724	; 0x3724 <set_done2>
    383c:	2f ef       	ldi	r18, 0xFF	; 255
    383e:	89 e6       	ldi	r24, 0x69	; 105
    3840:	98 e1       	ldi	r25, 0x18	; 24
    3842:	21 50       	subi	r18, 0x01	; 1
    3844:	80 40       	sbci	r24, 0x00	; 0
    3846:	90 40       	sbci	r25, 0x00	; 0
    3848:	e1 f7       	brne	.-8      	; 0x3842 <main+0xf6>
    384a:	00 c0       	rjmp	.+0      	; 0x384c <main+0x100>
    384c:	00 00       	nop
				_delay_ms(1000);
				set_hits(hits_counter);
    384e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <hits_counter>
    3852:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <hits_counter+0x1>
    3856:	0e 94 92 1a 	call	0x3524	; 0x3524 <set_hits>
				set_last_hit(last_hit);
    385a:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <last_hit>
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	0e 94 c8 1a 	call	0x3590	; 0x3590 <set_last_hit>
    3864:	61 c1       	rjmp	.+706    	; 0x3b28 <main+0x3dc>
    3866:	21 96       	adiw	r28, 0x01	; 1
    3868:	ce 01       	movw	r24, r28
    386a:	01 97       	sbiw	r24, 0x01	; 1
		}
		
		
		for (int i = 0; i < 3;i++){
			
		switch (i){
    386c:	81 30       	cpi	r24, 0x01	; 1
    386e:	91 05       	cpc	r25, r1
    3870:	09 f4       	brne	.+2      	; 0x3874 <main+0x128>
    3872:	75 c0       	rjmp	.+234    	; 0x395e <main+0x212>
    3874:	20 f0       	brcs	.+8      	; 0x387e <main+0x132>
    3876:	02 97       	sbiw	r24, 0x02	; 2
    3878:	09 f4       	brne	.+2      	; 0x387c <main+0x130>
    387a:	e1 c0       	rjmp	.+450    	; 0x3a3e <main+0x2f2>
    387c:	50 c1       	rjmp	.+672    	; 0x3b1e <main+0x3d2>
			
			case 0 :	
				reading_l = ReadADC(0);
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <ReadADC>
    3884:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <reading_l+0x1>
    3888:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <reading_l>
				if (!hit_started_l){
    388c:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <hit_started_l>
    3890:	21 11       	cpse	r18, r1
    3892:	10 c0       	rjmp	.+32     	; 0x38b4 <main+0x168>
					if (reading_l > 100 && reading_l>last_reading_l){
    3894:	85 36       	cpi	r24, 0x65	; 101
    3896:	91 05       	cpc	r25, r1
    3898:	08 f4       	brcc	.+2      	; 0x389c <main+0x150>
    389a:	58 c0       	rjmp	.+176    	; 0x394c <main+0x200>
    389c:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <last_reading_l>
    38a0:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <last_reading_l+0x1>
    38a4:	28 17       	cp	r18, r24
    38a6:	39 07       	cpc	r19, r25
    38a8:	08 f0       	brcs	.+2      	; 0x38ac <main+0x160>
    38aa:	50 c0       	rjmp	.+160    	; 0x394c <main+0x200>
					hit_started_l = true;
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <hit_started_l>
    38b2:	4c c0       	rjmp	.+152    	; 0x394c <main+0x200>
					}
				}
				else{
					if ( reading_l>100 && reading_l < last_reading_l){
    38b4:	85 36       	cpi	r24, 0x65	; 101
    38b6:	91 05       	cpc	r25, r1
    38b8:	08 f4       	brcc	.+2      	; 0x38bc <main+0x170>
    38ba:	48 c0       	rjmp	.+144    	; 0x394c <main+0x200>
    38bc:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <last_reading_l>
    38c0:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <last_reading_l+0x1>
    38c4:	82 17       	cp	r24, r18
    38c6:	93 07       	cpc	r25, r19
    38c8:	08 f0       	brcs	.+2      	; 0x38cc <main+0x180>
    38ca:	40 c0       	rjmp	.+128    	; 0x394c <main+0x200>
				  
					hits[hits_pt] = map_to_byte(reading_l);
    38cc:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <hits_pt>
    38d0:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(500);
		return all_ok;
}

uint8_t map_to_byte(uint16_t val){
	return (val/10);
    38d2:	9c 01       	movw	r18, r24
    38d4:	ad ec       	ldi	r26, 0xCD	; 205
    38d6:	bc ec       	ldi	r27, 0xCC	; 204
    38d8:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    38dc:	96 95       	lsr	r25
    38de:	87 95       	ror	r24
    38e0:	96 95       	lsr	r25
    38e2:	87 95       	ror	r24
    38e4:	96 95       	lsr	r25
    38e6:	87 95       	ror	r24
					}
				}
				else{
					if ( reading_l>100 && reading_l < last_reading_l){
				  
					hits[hits_pt] = map_to_byte(reading_l);
    38e8:	fa 01       	movw	r30, r20
    38ea:	e6 53       	subi	r30, 0x36	; 54
    38ec:	fb 4f       	sbci	r31, 0xFB	; 251
    38ee:	80 83       	st	Z, r24
					hits_types[hits_pt] = 'l';
    38f0:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <hits_pt>
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	e0 52       	subi	r30, 0x20	; 32
    38f8:	fb 4f       	sbci	r31, 0xFB	; 251
    38fa:	00 83       	st	Z, r16
					last_hit = hits[hits_pt];
    38fc:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <hits_pt>
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	e6 53       	subi	r30, 0x36	; 54
    3904:	fb 4f       	sbci	r31, 0xFB	; 251
    3906:	80 81       	ld	r24, Z
    3908:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <last_hit>
					
					hits_pt++;
    390c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <hits_pt>
    3910:	8f 5f       	subi	r24, 0xFF	; 255
    3912:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <hits_pt>
				  
					hits_counter++;
    3916:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <hits_counter>
    391a:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <hits_counter+0x1>
    391e:	01 96       	adiw	r24, 0x01	; 1
    3920:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <hits_counter+0x1>
    3924:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <hits_counter>
					
					hit_started_l = false;
    3928:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <hit_started_l>
					
					set_hits(hits_counter);
    392c:	0e 94 92 1a 	call	0x3524	; 0x3524 <set_hits>
					set_last_hit(last_hit);
    3930:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <last_hit>
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	0e 94 c8 1a 	call	0x3590	; 0x3590 <set_last_hit>
    393a:	2f e7       	ldi	r18, 0x7F	; 127
    393c:	8c e2       	ldi	r24, 0x2C	; 44
    393e:	93 e0       	ldi	r25, 0x03	; 3
    3940:	21 50       	subi	r18, 0x01	; 1
    3942:	80 40       	sbci	r24, 0x00	; 0
    3944:	90 40       	sbci	r25, 0x00	; 0
    3946:	e1 f7       	brne	.-8      	; 0x3940 <main+0x1f4>
    3948:	00 c0       	rjmp	.+0      	; 0x394a <main+0x1fe>
    394a:	00 00       	nop
				
				  
				  
						}
					}
					last_reading_l = reading_l;
    394c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <reading_l>
    3950:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <reading_l+0x1>
    3954:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <last_reading_l+0x1>
    3958:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <last_reading_l>
					break;
    395c:	84 cf       	rjmp	.-248    	; 0x3866 <main+0x11a>
					
			case 1:
				reading_r = ReadADC(1);
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <ReadADC>
    3964:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <reading_r+0x1>
    3968:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <reading_r>
				if (!hit_started_r ){
    396c:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <hit_started_r>
    3970:	21 11       	cpse	r18, r1
    3972:	10 c0       	rjmp	.+32     	; 0x3994 <main+0x248>
					if (reading_r  > 100 && reading_r >last_reading_r ){
    3974:	85 36       	cpi	r24, 0x65	; 101
    3976:	91 05       	cpc	r25, r1
    3978:	08 f4       	brcc	.+2      	; 0x397c <main+0x230>
    397a:	58 c0       	rjmp	.+176    	; 0x3a2c <main+0x2e0>
    397c:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <last_reading_r>
    3980:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <last_reading_r+0x1>
    3984:	28 17       	cp	r18, r24
    3986:	39 07       	cpc	r19, r25
    3988:	08 f0       	brcs	.+2      	; 0x398c <main+0x240>
    398a:	50 c0       	rjmp	.+160    	; 0x3a2c <main+0x2e0>
						hit_started_r  = true;
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <hit_started_r>
    3992:	4c c0       	rjmp	.+152    	; 0x3a2c <main+0x2e0>
					}
				}
				else{
					if ( reading_r >100 && reading_r  < last_reading_r ){
    3994:	85 36       	cpi	r24, 0x65	; 101
    3996:	91 05       	cpc	r25, r1
    3998:	08 f4       	brcc	.+2      	; 0x399c <main+0x250>
    399a:	48 c0       	rjmp	.+144    	; 0x3a2c <main+0x2e0>
    399c:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <last_reading_r>
    39a0:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <last_reading_r+0x1>
    39a4:	82 17       	cp	r24, r18
    39a6:	93 07       	cpc	r25, r19
    39a8:	08 f0       	brcs	.+2      	; 0x39ac <main+0x260>
    39aa:	40 c0       	rjmp	.+128    	; 0x3a2c <main+0x2e0>
						
						hits[hits_pt] = map_to_byte(reading_r );
    39ac:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <hits_pt>
    39b0:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(500);
		return all_ok;
}

uint8_t map_to_byte(uint16_t val){
	return (val/10);
    39b2:	9c 01       	movw	r18, r24
    39b4:	ad ec       	ldi	r26, 0xCD	; 205
    39b6:	bc ec       	ldi	r27, 0xCC	; 204
    39b8:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    39bc:	96 95       	lsr	r25
    39be:	87 95       	ror	r24
    39c0:	96 95       	lsr	r25
    39c2:	87 95       	ror	r24
    39c4:	96 95       	lsr	r25
    39c6:	87 95       	ror	r24
					}
				}
				else{
					if ( reading_r >100 && reading_r  < last_reading_r ){
						
						hits[hits_pt] = map_to_byte(reading_r );
    39c8:	fa 01       	movw	r30, r20
    39ca:	e6 53       	subi	r30, 0x36	; 54
    39cc:	fb 4f       	sbci	r31, 0xFB	; 251
    39ce:	80 83       	st	Z, r24
						hits_types[hits_pt] = 'r';
    39d0:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <hits_pt>
    39d4:	f0 e0       	ldi	r31, 0x00	; 0
    39d6:	e0 52       	subi	r30, 0x20	; 32
    39d8:	fb 4f       	sbci	r31, 0xFB	; 251
    39da:	f0 82       	st	Z, r15
						last_hit = hits[hits_pt];
    39dc:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <hits_pt>
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	e6 53       	subi	r30, 0x36	; 54
    39e4:	fb 4f       	sbci	r31, 0xFB	; 251
    39e6:	80 81       	ld	r24, Z
    39e8:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <last_hit>
						
						hits_pt++;
    39ec:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <hits_pt>
    39f0:	8f 5f       	subi	r24, 0xFF	; 255
    39f2:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <hits_pt>
						
						hits_counter++;
    39f6:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <hits_counter>
    39fa:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <hits_counter+0x1>
    39fe:	01 96       	adiw	r24, 0x01	; 1
    3a00:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <hits_counter+0x1>
    3a04:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <hits_counter>
						
						hit_started_r  = false;
    3a08:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <hit_started_r>
						
						set_hits(hits_counter);
    3a0c:	0e 94 92 1a 	call	0x3524	; 0x3524 <set_hits>
						set_last_hit(last_hit);
    3a10:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <last_hit>
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	0e 94 c8 1a 	call	0x3590	; 0x3590 <set_last_hit>
    3a1a:	2f e7       	ldi	r18, 0x7F	; 127
    3a1c:	8c e2       	ldi	r24, 0x2C	; 44
    3a1e:	93 e0       	ldi	r25, 0x03	; 3
    3a20:	21 50       	subi	r18, 0x01	; 1
    3a22:	80 40       	sbci	r24, 0x00	; 0
    3a24:	90 40       	sbci	r25, 0x00	; 0
    3a26:	e1 f7       	brne	.-8      	; 0x3a20 <main+0x2d4>
    3a28:	00 c0       	rjmp	.+0      	; 0x3a2a <main+0x2de>
    3a2a:	00 00       	nop
						
						
						
					}
				}
				last_reading_r  = reading_r ;
    3a2c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <reading_r>
    3a30:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <reading_r+0x1>
    3a34:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <last_reading_r+0x1>
    3a38:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <last_reading_r>
				break;
    3a3c:	14 cf       	rjmp	.-472    	; 0x3866 <main+0x11a>
				
			case 2:
			reading_u = ReadADC(2);
    3a3e:	82 e0       	ldi	r24, 0x02	; 2
    3a40:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <ReadADC>
    3a44:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <reading_u+0x1>
    3a48:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <reading_u>
			if (!hit_started_u ){
    3a4c:	20 91 8a 04 	lds	r18, 0x048A	; 0x80048a <hit_started_u>
    3a50:	21 11       	cpse	r18, r1
    3a52:	10 c0       	rjmp	.+32     	; 0x3a74 <main+0x328>
				if (reading_u  > 100 && reading_u >last_reading_u ){
    3a54:	85 36       	cpi	r24, 0x65	; 101
    3a56:	91 05       	cpc	r25, r1
    3a58:	08 f4       	brcc	.+2      	; 0x3a5c <main+0x310>
    3a5a:	58 c0       	rjmp	.+176    	; 0x3b0c <main+0x3c0>
    3a5c:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <last_reading_u>
    3a60:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <last_reading_u+0x1>
    3a64:	28 17       	cp	r18, r24
    3a66:	39 07       	cpc	r19, r25
    3a68:	08 f0       	brcs	.+2      	; 0x3a6c <main+0x320>
    3a6a:	50 c0       	rjmp	.+160    	; 0x3b0c <main+0x3c0>
					hit_started_u  = true;
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <hit_started_u>
    3a72:	4c c0       	rjmp	.+152    	; 0x3b0c <main+0x3c0>
				}
			}
			else{
				if ( reading_u >100 && reading_u  < last_reading_u ){
    3a74:	85 36       	cpi	r24, 0x65	; 101
    3a76:	91 05       	cpc	r25, r1
    3a78:	08 f4       	brcc	.+2      	; 0x3a7c <main+0x330>
    3a7a:	48 c0       	rjmp	.+144    	; 0x3b0c <main+0x3c0>
    3a7c:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <last_reading_u>
    3a80:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <last_reading_u+0x1>
    3a84:	82 17       	cp	r24, r18
    3a86:	93 07       	cpc	r25, r19
    3a88:	08 f0       	brcs	.+2      	; 0x3a8c <main+0x340>
    3a8a:	40 c0       	rjmp	.+128    	; 0x3b0c <main+0x3c0>
					
					hits[hits_pt] = map_to_byte(reading_u );
    3a8c:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <hits_pt>
    3a90:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(500);
		return all_ok;
}

uint8_t map_to_byte(uint16_t val){
	return (val/10);
    3a92:	9c 01       	movw	r18, r24
    3a94:	ad ec       	ldi	r26, 0xCD	; 205
    3a96:	bc ec       	ldi	r27, 0xCC	; 204
    3a98:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    3a9c:	96 95       	lsr	r25
    3a9e:	87 95       	ror	r24
    3aa0:	96 95       	lsr	r25
    3aa2:	87 95       	ror	r24
    3aa4:	96 95       	lsr	r25
    3aa6:	87 95       	ror	r24
				}
			}
			else{
				if ( reading_u >100 && reading_u  < last_reading_u ){
					
					hits[hits_pt] = map_to_byte(reading_u );
    3aa8:	fa 01       	movw	r30, r20
    3aaa:	e6 53       	subi	r30, 0x36	; 54
    3aac:	fb 4f       	sbci	r31, 0xFB	; 251
    3aae:	80 83       	st	Z, r24
					hits_types[hits_pt] = 'u';
    3ab0:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <hits_pt>
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
    3ab6:	e0 52       	subi	r30, 0x20	; 32
    3ab8:	fb 4f       	sbci	r31, 0xFB	; 251
    3aba:	10 83       	st	Z, r17
					last_hit = hits[hits_pt];
    3abc:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <hits_pt>
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	e6 53       	subi	r30, 0x36	; 54
    3ac4:	fb 4f       	sbci	r31, 0xFB	; 251
    3ac6:	80 81       	ld	r24, Z
    3ac8:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <last_hit>
					
					hits_pt++;
    3acc:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <hits_pt>
    3ad0:	8f 5f       	subi	r24, 0xFF	; 255
    3ad2:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <hits_pt>
					
					hits_counter++;
    3ad6:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <hits_counter>
    3ada:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <hits_counter+0x1>
    3ade:	01 96       	adiw	r24, 0x01	; 1
    3ae0:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <hits_counter+0x1>
    3ae4:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <hits_counter>
				
					hit_started_u  = false;
    3ae8:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <hit_started_u>
					
					
					set_hits(hits_counter);
    3aec:	0e 94 92 1a 	call	0x3524	; 0x3524 <set_hits>
					set_last_hit(last_hit);
    3af0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <last_hit>
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	0e 94 c8 1a 	call	0x3590	; 0x3590 <set_last_hit>
    3afa:	2f e7       	ldi	r18, 0x7F	; 127
    3afc:	8c e2       	ldi	r24, 0x2C	; 44
    3afe:	93 e0       	ldi	r25, 0x03	; 3
    3b00:	21 50       	subi	r18, 0x01	; 1
    3b02:	80 40       	sbci	r24, 0x00	; 0
    3b04:	90 40       	sbci	r25, 0x00	; 0
    3b06:	e1 f7       	brne	.-8      	; 0x3b00 <main+0x3b4>
    3b08:	00 c0       	rjmp	.+0      	; 0x3b0a <main+0x3be>
    3b0a:	00 00       	nop
					
					
					
				}
			}
			last_reading_u  = reading_u ;
    3b0c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <reading_u>
    3b10:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <reading_u+0x1>
    3b14:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <last_reading_u+0x1>
    3b18:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <last_reading_u>
    3b1c:	78 ce       	rjmp	.-784    	; 0x380e <main+0xc2>
				
			}
		}
		
		
		for (int i = 0; i < 3;i++){
    3b1e:	c3 30       	cpi	r28, 0x03	; 3
    3b20:	d1 05       	cpc	r29, r1
    3b22:	0c f4       	brge	.+2      	; 0x3b26 <main+0x3da>
    3b24:	a0 ce       	rjmp	.-704    	; 0x3866 <main+0x11a>
    3b26:	73 ce       	rjmp	.-794    	; 0x380e <main+0xc2>
uint16_t hits_counter = 0;
uint8_t last_hit = 0;

char times = 0;
int main(void)
{	
    3b28:	c1 e0       	ldi	r28, 0x01	; 1
    3b2a:	d0 e0       	ldi	r29, 0x00	; 0
    3b2c:	9d ce       	rjmp	.-710    	; 0x3868 <main+0x11c>

00003b2e <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    3b2e:	6f 92       	push	r6
    3b30:	7f 92       	push	r7
    3b32:	8f 92       	push	r8
    3b34:	9f 92       	push	r9
    3b36:	af 92       	push	r10
    3b38:	bf 92       	push	r11
    3b3a:	cf 92       	push	r12
    3b3c:	df 92       	push	r13
    3b3e:	ef 92       	push	r14
    3b40:	ff 92       	push	r15
    3b42:	0f 93       	push	r16
    3b44:	1f 93       	push	r17
    3b46:	cf 93       	push	r28
    3b48:	df 93       	push	r29
    3b4a:	cd b7       	in	r28, 0x3d	; 61
    3b4c:	de b7       	in	r29, 0x3e	; 62
    3b4e:	60 97       	sbiw	r28, 0x10	; 16
    3b50:	0f b6       	in	r0, 0x3f	; 63
    3b52:	f8 94       	cli
    3b54:	de bf       	out	0x3e, r29	; 62
    3b56:	0f be       	out	0x3f, r0	; 63
    3b58:	cd bf       	out	0x3d, r28	; 61
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    3b5a:	00 97       	sbiw	r24, 0x00	; 0
    3b5c:	71 f1       	breq	.+92     	; 0x3bba <partition_open+0x8c>
    3b5e:	61 15       	cp	r22, r1
    3b60:	71 05       	cpc	r23, r1
    3b62:	71 f1       	breq	.+92     	; 0x3bc0 <partition_open+0x92>
    3b64:	04 30       	cpi	r16, 0x04	; 4
    3b66:	7c f5       	brge	.+94     	; 0x3bc6 <partition_open+0x98>
        return 0;

    if(index >= 0)
    3b68:	00 23       	and	r16, r16
    3b6a:	0c f4       	brge	.+2      	; 0x3b6e <partition_open+0x40>
    3b6c:	74 c0       	rjmp	.+232    	; 0x3c56 <partition_open+0x128>
    3b6e:	39 01       	movw	r6, r18
    3b70:	4a 01       	movw	r8, r20
    3b72:	5b 01       	movw	r10, r22
    3b74:	6c 01       	movw	r12, r24
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    3b76:	20 e1       	ldi	r18, 0x10	; 16
    3b78:	02 02       	muls	r16, r18
    3b7a:	c0 01       	movw	r24, r0
    3b7c:	11 24       	eor	r1, r1
    3b7e:	82 54       	subi	r24, 0x42	; 66
    3b80:	9e 4f       	sbci	r25, 0xFE	; 254
    3b82:	e9 2f       	mov	r30, r25
    3b84:	ee 0f       	add	r30, r30
    3b86:	ee 0b       	sbc	r30, r30
    3b88:	68 94       	set
    3b8a:	ee 24       	eor	r14, r14
    3b8c:	e4 f8       	bld	r14, 4
    3b8e:	f1 2c       	mov	r15, r1
    3b90:	8e 01       	movw	r16, r28
    3b92:	0f 5f       	subi	r16, 0xFF	; 255
    3b94:	1f 4f       	sbci	r17, 0xFF	; 255
    3b96:	28 2f       	mov	r18, r24
    3b98:	39 2f       	mov	r19, r25
    3b9a:	4e 2f       	mov	r20, r30
    3b9c:	5e 2f       	mov	r21, r30
    3b9e:	6e 2f       	mov	r22, r30
    3ba0:	7e 2f       	mov	r23, r30
    3ba2:	8e 2f       	mov	r24, r30
    3ba4:	9e 2f       	mov	r25, r30
    3ba6:	f6 01       	movw	r30, r12
    3ba8:	09 95       	icall
    3baa:	88 23       	and	r24, r24
    3bac:	79 f0       	breq	.+30     	; 0x3bcc <partition_open+0x9e>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    3bae:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb0:	81 11       	cpse	r24, r1
    3bb2:	37 c0       	rjmp	.+110    	; 0x3c22 <partition_open+0xf4>
            return 0;
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	54 c0       	rjmp	.+168    	; 0x3c62 <partition_open+0x134>
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
        return 0;
    3bba:	80 e0       	ldi	r24, 0x00	; 0
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	51 c0       	rjmp	.+162    	; 0x3c62 <partition_open+0x134>
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	4e c0       	rjmp	.+156    	; 0x3c62 <partition_open+0x134>
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	4b c0       	rjmp	.+150    	; 0x3c62 <partition_open+0x134>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	48 c0       	rjmp	.+144    	; 0x3c62 <partition_open+0x134>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    3bd2:	0b e6       	ldi	r16, 0x6B	; 107
    3bd4:	12 e0       	ldi	r17, 0x02	; 2
    3bd6:	81 e1       	ldi	r24, 0x11	; 17
    3bd8:	d8 01       	movw	r26, r16
    3bda:	1d 92       	st	X+, r1
    3bdc:	8a 95       	dec	r24
    3bde:	e9 f7       	brne	.-6      	; 0x3bda <partition_open+0xac>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    3be0:	f8 01       	movw	r30, r16
    3be2:	d1 82       	std	Z+1, r13	; 0x01
    3be4:	c0 82       	st	Z, r12
    new_partition->device_read_interval = device_read_interval;
    3be6:	b3 82       	std	Z+3, r11	; 0x03
    3be8:	a2 82       	std	Z+2, r10	; 0x02
    new_partition->device_write = device_write;
    3bea:	95 82       	std	Z+5, r9	; 0x05
    3bec:	84 82       	std	Z+4, r8	; 0x04
    new_partition->device_write_interval = device_write_interval;
    3bee:	77 82       	std	Z+7, r7	; 0x07
    3bf0:	66 82       	std	Z+6, r6	; 0x06

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    3bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf4:	80 87       	std	Z+8, r24	; 0x08
        new_partition->offset = read32(&buffer[8]);
    3bf6:	ce 01       	movw	r24, r28
    3bf8:	09 96       	adiw	r24, 0x09	; 9
    3bfa:	0e 94 16 01 	call	0x22c	; 0x22c <read32>
    3bfe:	d8 01       	movw	r26, r16
    3c00:	19 96       	adiw	r26, 0x09	; 9
    3c02:	6d 93       	st	X+, r22
    3c04:	7d 93       	st	X+, r23
    3c06:	8d 93       	st	X+, r24
    3c08:	9c 93       	st	X, r25
    3c0a:	1c 97       	sbiw	r26, 0x0c	; 12
        new_partition->length = read32(&buffer[12]);
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	0d 96       	adiw	r24, 0x0d	; 13
    3c10:	0e 94 16 01 	call	0x22c	; 0x22c <read32>
    3c14:	f8 01       	movw	r30, r16
    3c16:	65 87       	std	Z+13, r22	; 0x0d
    3c18:	76 87       	std	Z+14, r23	; 0x0e
    3c1a:	87 87       	std	Z+15, r24	; 0x0f
    3c1c:	90 8b       	std	Z+16, r25	; 0x10
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    3c1e:	c8 01       	movw	r24, r16
    3c20:	20 c0       	rjmp	.+64     	; 0x3c62 <partition_open+0x134>
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    3c22:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <partition_handles+0x8>
    3c26:	88 23       	and	r24, r24
    3c28:	a1 f2       	breq	.-88     	; 0x3bd2 <partition_open+0xa4>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	19 c0       	rjmp	.+50     	; 0x3c62 <partition_open+0x134>
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    3c30:	eb e6       	ldi	r30, 0x6B	; 107
    3c32:	f2 e0       	ldi	r31, 0x02	; 2
    3c34:	11 e1       	ldi	r17, 0x11	; 17
    3c36:	df 01       	movw	r26, r30
    3c38:	1d 92       	st	X+, r1
    3c3a:	1a 95       	dec	r17
    3c3c:	e9 f7       	brne	.-6      	; 0x3c38 <partition_open+0x10a>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    3c3e:	91 83       	std	Z+1, r25	; 0x01
    3c40:	80 83       	st	Z, r24
    new_partition->device_read_interval = device_read_interval;
    3c42:	73 83       	std	Z+3, r23	; 0x03
    3c44:	62 83       	std	Z+2, r22	; 0x02
    new_partition->device_write = device_write;
    3c46:	55 83       	std	Z+5, r21	; 0x05
    3c48:	44 83       	std	Z+4, r20	; 0x04
    new_partition->device_write_interval = device_write_interval;
    3c4a:	37 83       	std	Z+7, r19	; 0x07
    3c4c:	26 83       	std	Z+6, r18	; 0x06
        new_partition->offset = read32(&buffer[8]);
        new_partition->length = read32(&buffer[12]);
    }
    else
    {
        new_partition->type = 0xff;
    3c4e:	8f ef       	ldi	r24, 0xFF	; 255
    3c50:	80 87       	std	Z+8, r24	; 0x08
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    3c52:	cf 01       	movw	r24, r30
    3c54:	06 c0       	rjmp	.+12     	; 0x3c62 <partition_open+0x134>
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    3c56:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <partition_handles+0x8>
    3c5a:	ee 23       	and	r30, r30
    3c5c:	49 f3       	breq	.-46     	; 0x3c30 <partition_open+0x102>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    3c62:	60 96       	adiw	r28, 0x10	; 16
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	1f 91       	pop	r17
    3c74:	0f 91       	pop	r16
    3c76:	ff 90       	pop	r15
    3c78:	ef 90       	pop	r14
    3c7a:	df 90       	pop	r13
    3c7c:	cf 90       	pop	r12
    3c7e:	bf 90       	pop	r11
    3c80:	af 90       	pop	r10
    3c82:	9f 90       	pop	r9
    3c84:	8f 90       	pop	r8
    3c86:	7f 90       	pop	r7
    3c88:	6f 90       	pop	r6
    3c8a:	08 95       	ret

00003c8c <sd_raw_send_byte>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    3c8c:	8e bd       	out	0x2e, r24	; 46
    3c8e:	0d b4       	in	r0, 0x2d	; 45
    3c90:	07 fe       	sbrs	r0, 7
    3c92:	fd cf       	rjmp	.-6      	; 0x3c8e <sd_raw_send_byte+0x2>
    3c94:	8d b5       	in	r24, 0x2d	; 45
    3c96:	8f 77       	andi	r24, 0x7F	; 127
    3c98:	8d bd       	out	0x2d, r24	; 45
    3c9a:	08 95       	ret

00003c9c <sd_raw_rec_byte>:
    3c9c:	8f ef       	ldi	r24, 0xFF	; 255
    3c9e:	8e bd       	out	0x2e, r24	; 46
    3ca0:	0d b4       	in	r0, 0x2d	; 45
    3ca2:	07 fe       	sbrs	r0, 7
    3ca4:	fd cf       	rjmp	.-6      	; 0x3ca0 <sd_raw_rec_byte+0x4>
    3ca6:	8d b5       	in	r24, 0x2d	; 45
    3ca8:	8f 77       	andi	r24, 0x7F	; 127
    3caa:	8d bd       	out	0x2d, r24	; 45
    3cac:	8e b5       	in	r24, 0x2e	; 46
    3cae:	08 95       	ret

00003cb0 <sd_raw_send_command>:
    3cb0:	ff 92       	push	r15
    3cb2:	0f 93       	push	r16
    3cb4:	1f 93       	push	r17
    3cb6:	cf 93       	push	r28
    3cb8:	df 93       	push	r29
    3cba:	c8 2f       	mov	r28, r24
    3cbc:	d4 2f       	mov	r29, r20
    3cbe:	15 2f       	mov	r17, r21
    3cc0:	06 2f       	mov	r16, r22
    3cc2:	f7 2e       	mov	r15, r23
    3cc4:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
    3cc8:	8c 2f       	mov	r24, r28
    3cca:	80 64       	ori	r24, 0x40	; 64
    3ccc:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>
    3cd0:	8f 2d       	mov	r24, r15
    3cd2:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>
    3cd6:	80 2f       	mov	r24, r16
    3cd8:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>
    3cdc:	81 2f       	mov	r24, r17
    3cde:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>
    3ce2:	8d 2f       	mov	r24, r29
    3ce4:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>
    3ce8:	cc 23       	and	r28, r28
    3cea:	19 f0       	breq	.+6      	; 0x3cf2 <sd_raw_send_command+0x42>
    3cec:	c8 30       	cpi	r28, 0x08	; 8
    3cee:	29 f0       	breq	.+10     	; 0x3cfa <sd_raw_send_command+0x4a>
    3cf0:	08 c0       	rjmp	.+16     	; 0x3d02 <sd_raw_send_command+0x52>
    3cf2:	85 e9       	ldi	r24, 0x95	; 149
    3cf4:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>
    3cf8:	0f c0       	rjmp	.+30     	; 0x3d18 <sd_raw_send_command+0x68>
    3cfa:	87 e8       	ldi	r24, 0x87	; 135
    3cfc:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>
    3d00:	0b c0       	rjmp	.+22     	; 0x3d18 <sd_raw_send_command+0x68>
    3d02:	8f ef       	ldi	r24, 0xFF	; 255
    3d04:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>
    3d08:	07 c0       	rjmp	.+14     	; 0x3d18 <sd_raw_send_command+0x68>
    3d0a:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
    3d0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d10:	29 f4       	brne	.+10     	; 0x3d1c <sd_raw_send_command+0x6c>
    3d12:	c1 50       	subi	r28, 0x01	; 1
    3d14:	d1 f7       	brne	.-12     	; 0x3d0a <sd_raw_send_command+0x5a>
    3d16:	02 c0       	rjmp	.+4      	; 0x3d1c <sd_raw_send_command+0x6c>
    3d18:	ca e0       	ldi	r28, 0x0A	; 10
    3d1a:	f7 cf       	rjmp	.-18     	; 0x3d0a <sd_raw_send_command+0x5a>
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	1f 91       	pop	r17
    3d22:	0f 91       	pop	r16
    3d24:	ff 90       	pop	r15
    3d26:	08 95       	ret

00003d28 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    3d28:	ef 92       	push	r14
    3d2a:	ff 92       	push	r15
    3d2c:	0f 93       	push	r16
    3d2e:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    3d30:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <raw_block_written>
    3d34:	81 11       	cpse	r24, r1
    3d36:	1e c0       	rjmp	.+60     	; 0x3d74 <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    3d38:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <raw_block_address>
    3d3c:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <raw_block_address+0x1>
    3d40:	40 91 80 02 	lds	r20, 0x0280	; 0x800280 <raw_block_address+0x2>
    3d44:	50 91 81 02 	lds	r21, 0x0281	; 0x800281 <raw_block_address+0x3>
    3d48:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <raw_block_address+0x4>
    3d4c:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <raw_block_address+0x5>
    3d50:	e1 2c       	mov	r14, r1
    3d52:	68 94       	set
    3d54:	ff 24       	eor	r15, r15
    3d56:	f1 f8       	bld	r15, 1
    3d58:	06 e8       	ldi	r16, 0x86	; 134
    3d5a:	12 e0       	ldi	r17, 0x02	; 2
    3d5c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <raw_block_address+0x6>
    3d60:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <raw_block_address+0x7>
    3d64:	0e 94 8f 21 	call	0x431e	; 0x431e <sd_raw_write>
    3d68:	88 23       	and	r24, r24
    3d6a:	29 f0       	breq	.+10     	; 0x3d76 <sd_raw_sync+0x4e>
        return 0;
    raw_block_written = 1;
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <raw_block_written>
#endif
    return 1;
    3d72:	01 c0       	rjmp	.+2      	; 0x3d76 <sd_raw_sync+0x4e>
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    raw_block_written = 1;
#endif
    return 1;
}
    3d76:	1f 91       	pop	r17
    3d78:	0f 91       	pop	r16
    3d7a:	ff 90       	pop	r15
    3d7c:	ef 90       	pop	r14
    3d7e:	08 95       	ret

00003d80 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    3d80:	2f 92       	push	r2
    3d82:	3f 92       	push	r3
    3d84:	4f 92       	push	r4
    3d86:	5f 92       	push	r5
    3d88:	6f 92       	push	r6
    3d8a:	7f 92       	push	r7
    3d8c:	8f 92       	push	r8
    3d8e:	9f 92       	push	r9
    3d90:	af 92       	push	r10
    3d92:	bf 92       	push	r11
    3d94:	cf 92       	push	r12
    3d96:	df 92       	push	r13
    3d98:	ef 92       	push	r14
    3d9a:	ff 92       	push	r15
    3d9c:	0f 93       	push	r16
    3d9e:	1f 93       	push	r17
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	cd b7       	in	r28, 0x3d	; 61
    3da6:	de b7       	in	r29, 0x3e	; 62
    3da8:	6d 97       	sbiw	r28, 0x1d	; 29
    3daa:	0f b6       	in	r0, 0x3f	; 63
    3dac:	f8 94       	cli
    3dae:	de bf       	out	0x3e, r29	; 62
    3db0:	0f be       	out	0x3f, r0	; 63
    3db2:	cd bf       	out	0x3d, r28	; 61
    3db4:	29 83       	std	Y+1, r18	; 0x01
    3db6:	3a 83       	std	Y+2, r19	; 0x02
    3db8:	4b 83       	std	Y+3, r20	; 0x03
    3dba:	5c 83       	std	Y+4, r21	; 0x04
    3dbc:	6d 83       	std	Y+5, r22	; 0x05
    3dbe:	7e 83       	std	Y+6, r23	; 0x06
    3dc0:	8f 83       	std	Y+7, r24	; 0x07
    3dc2:	98 87       	std	Y+8, r25	; 0x08
    3dc4:	1d 8b       	std	Y+21, r17	; 0x15
    3dc6:	0c 8b       	std	Y+20, r16	; 0x14
    3dc8:	27 01       	movw	r4, r14
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3dca:	ef 28       	or	r14, r15
    3dcc:	09 f4       	brne	.+2      	; 0x3dd0 <sd_raw_read+0x50>
    3dce:	f3 c0       	rjmp	.+486    	; 0x3fb6 <sd_raw_read+0x236>
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
    3dd0:	61 2c       	mov	r6, r1
    3dd2:	68 94       	set
    3dd4:	77 24       	eor	r7, r7
    3dd6:	71 f8       	bld	r7, 1
    3dd8:	0f 2e       	mov	r0, r31
    3dda:	f6 e8       	ldi	r31, 0x86	; 134
    3ddc:	2f 2e       	mov	r2, r31
    3dde:	f4 e0       	ldi	r31, 0x04	; 4
    3de0:	3f 2e       	mov	r3, r31
    3de2:	f0 2d       	mov	r31, r0
    3de4:	7b 8e       	std	Y+27, r7	; 0x1b
    3de6:	6a 8e       	std	Y+26, r6	; 0x1a
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    3de8:	29 81       	ldd	r18, Y+1	; 0x01
    3dea:	3a 81       	ldd	r19, Y+2	; 0x02
    3dec:	31 70       	andi	r19, 0x01	; 1
    3dee:	3a 8b       	std	Y+18, r19	; 0x12
    3df0:	29 8b       	std	Y+17, r18	; 0x11
        block_address = offset - block_offset;
    3df2:	40 e0       	ldi	r20, 0x00	; 0
    3df4:	50 e0       	ldi	r21, 0x00	; 0
    3df6:	60 e0       	ldi	r22, 0x00	; 0
    3df8:	70 e0       	ldi	r23, 0x00	; 0
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	29 87       	std	Y+9, r18	; 0x09
    3dfe:	3a 87       	std	Y+10, r19	; 0x0a
    3e00:	4b 87       	std	Y+11, r20	; 0x0b
    3e02:	5c 87       	std	Y+12, r21	; 0x0c
    3e04:	6d 87       	std	Y+13, r22	; 0x0d
    3e06:	7e 87       	std	Y+14, r23	; 0x0e
    3e08:	8f 87       	std	Y+15, r24	; 0x0f
    3e0a:	98 8b       	std	Y+16, r25	; 0x10
    3e0c:	29 81       	ldd	r18, Y+1	; 0x01
    3e0e:	3a 81       	ldd	r19, Y+2	; 0x02
    3e10:	4b 81       	ldd	r20, Y+3	; 0x03
    3e12:	5c 81       	ldd	r21, Y+4	; 0x04
    3e14:	6d 81       	ldd	r22, Y+5	; 0x05
    3e16:	7e 81       	ldd	r23, Y+6	; 0x06
    3e18:	8f 81       	ldd	r24, Y+7	; 0x07
    3e1a:	98 85       	ldd	r25, Y+8	; 0x08
    3e1c:	a9 84       	ldd	r10, Y+9	; 0x09
    3e1e:	ba 84       	ldd	r11, Y+10	; 0x0a
    3e20:	c1 2c       	mov	r12, r1
    3e22:	d1 2c       	mov	r13, r1
    3e24:	e1 2c       	mov	r14, r1
    3e26:	f1 2c       	mov	r15, r1
    3e28:	00 e0       	ldi	r16, 0x00	; 0
    3e2a:	10 e0       	ldi	r17, 0x00	; 0
    3e2c:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <__subdi3>
    3e30:	29 87       	std	Y+9, r18	; 0x09
    3e32:	3b 8b       	std	Y+19, r19	; 0x13
    3e34:	64 2e       	mov	r6, r20
    3e36:	75 2e       	mov	r7, r21
    3e38:	6e 8b       	std	Y+22, r22	; 0x16
    3e3a:	7f 8b       	std	Y+23, r23	; 0x17
    3e3c:	88 8f       	std	Y+24, r24	; 0x18
    3e3e:	99 8f       	std	Y+25, r25	; 0x19
    3e40:	8a 8c       	ldd	r8, Y+26	; 0x1a
    3e42:	9b 8c       	ldd	r9, Y+27	; 0x1b
    3e44:	69 89       	ldd	r22, Y+17	; 0x11
    3e46:	7a 89       	ldd	r23, Y+18	; 0x12
    3e48:	86 1a       	sub	r8, r22
    3e4a:	97 0a       	sbc	r9, r23
    3e4c:	48 14       	cp	r4, r8
    3e4e:	59 04       	cpc	r5, r9
    3e50:	08 f4       	brcc	.+2      	; 0x3e54 <sd_raw_read+0xd4>
    3e52:	42 01       	movw	r8, r4
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    3e54:	a0 90 7e 02 	lds	r10, 0x027E	; 0x80027e <raw_block_address>
    3e58:	b0 90 7f 02 	lds	r11, 0x027F	; 0x80027f <raw_block_address+0x1>
    3e5c:	c0 90 80 02 	lds	r12, 0x0280	; 0x800280 <raw_block_address+0x2>
    3e60:	d0 90 81 02 	lds	r13, 0x0281	; 0x800281 <raw_block_address+0x3>
    3e64:	e0 90 82 02 	lds	r14, 0x0282	; 0x800282 <raw_block_address+0x4>
    3e68:	f0 90 83 02 	lds	r15, 0x0283	; 0x800283 <raw_block_address+0x5>
    3e6c:	00 91 84 02 	lds	r16, 0x0284	; 0x800284 <raw_block_address+0x6>
    3e70:	10 91 85 02 	lds	r17, 0x0285	; 0x800285 <raw_block_address+0x7>
    3e74:	29 85       	ldd	r18, Y+9	; 0x09
    3e76:	3b 89       	ldd	r19, Y+19	; 0x13
    3e78:	46 2d       	mov	r20, r6
    3e7a:	57 2d       	mov	r21, r7
    3e7c:	6e 89       	ldd	r22, Y+22	; 0x16
    3e7e:	7f 89       	ldd	r23, Y+23	; 0x17
    3e80:	88 8d       	ldd	r24, Y+24	; 0x18
    3e82:	99 8d       	ldd	r25, Y+25	; 0x19
    3e84:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__cmpdi2>
    3e88:	09 f4       	brne	.+2      	; 0x3e8c <sd_raw_read+0x10c>
    3e8a:	65 c0       	rjmp	.+202    	; 0x3f56 <sd_raw_read+0x1d6>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    3e8c:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <sd_raw_sync>
    3e90:	88 23       	and	r24, r24
    3e92:	09 f4       	brne	.+2      	; 0x3e96 <sd_raw_read+0x116>
    3e94:	91 c0       	rjmp	.+290    	; 0x3fb8 <sd_raw_read+0x238>
                return 0;
#endif

            /* address card */
            select_card();
    3e96:	2a 98       	cbi	0x05, 2	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    3e98:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <sd_raw_card_type>
    3e9c:	82 ff       	sbrs	r24, 2
    3e9e:	10 c0       	rjmp	.+32     	; 0x3ec0 <sd_raw_read+0x140>
    3ea0:	29 85       	ldd	r18, Y+9	; 0x09
    3ea2:	3b 89       	ldd	r19, Y+19	; 0x13
    3ea4:	46 2d       	mov	r20, r6
    3ea6:	57 2d       	mov	r21, r7
    3ea8:	6e 89       	ldd	r22, Y+22	; 0x16
    3eaa:	7f 89       	ldd	r23, Y+23	; 0x17
    3eac:	88 8d       	ldd	r24, Y+24	; 0x18
    3eae:	99 8d       	ldd	r25, Y+25	; 0x19
    3eb0:	09 e0       	ldi	r16, 0x09	; 9
    3eb2:	0e 94 31 26 	call	0x4c62	; 0x4c62 <__lshrdi3>
    3eb6:	64 2f       	mov	r22, r20
    3eb8:	75 2f       	mov	r23, r21
    3eba:	42 2f       	mov	r20, r18
    3ebc:	53 2f       	mov	r21, r19
    3ebe:	04 c0       	rjmp	.+8      	; 0x3ec8 <sd_raw_read+0x148>
    3ec0:	49 85       	ldd	r20, Y+9	; 0x09
    3ec2:	5b 89       	ldd	r21, Y+19	; 0x13
    3ec4:	66 2d       	mov	r22, r6
    3ec6:	77 2d       	mov	r23, r7
    3ec8:	81 e1       	ldi	r24, 0x11	; 17
    3eca:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <sd_raw_send_command>
    3ece:	88 23       	and	r24, r24
    3ed0:	19 f0       	breq	.+6      	; 0x3ed8 <sd_raw_read+0x158>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    3ed2:	2a 9a       	sbi	0x05, 2	; 5
                return 0;
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	70 c0       	rjmp	.+224    	; 0x3fb8 <sd_raw_read+0x238>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    3ed8:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
    3edc:	8e 3f       	cpi	r24, 0xFE	; 254
    3ede:	e1 f7       	brne	.-8      	; 0x3ed8 <sd_raw_read+0x158>
    3ee0:	86 e8       	ldi	r24, 0x86	; 134
    3ee2:	92 e0       	ldi	r25, 0x02	; 2
    3ee4:	9d 8f       	std	Y+29, r25	; 0x1d
    3ee6:	8c 8f       	std	Y+28, r24	; 0x1c
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    3ee8:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
    3eec:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3eee:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3ef0:	81 93       	st	Z+, r24
    3ef2:	fd 8f       	std	Y+29, r31	; 0x1d
    3ef4:	ec 8f       	std	Y+28, r30	; 0x1c
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    3ef6:	2e 16       	cp	r2, r30
    3ef8:	3f 06       	cpc	r3, r31
    3efa:	b1 f7       	brne	.-20     	; 0x3ee8 <sd_raw_read+0x168>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    3efc:	f9 85       	ldd	r31, Y+9	; 0x09
    3efe:	f0 93 7e 02 	sts	0x027E, r31	; 0x80027e <raw_block_address>
    3f02:	2b 89       	ldd	r18, Y+19	; 0x13
    3f04:	20 93 7f 02 	sts	0x027F, r18	; 0x80027f <raw_block_address+0x1>
    3f08:	60 92 80 02 	sts	0x0280, r6	; 0x800280 <raw_block_address+0x2>
    3f0c:	70 92 81 02 	sts	0x0281, r7	; 0x800281 <raw_block_address+0x3>
    3f10:	3e 89       	ldd	r19, Y+22	; 0x16
    3f12:	30 93 82 02 	sts	0x0282, r19	; 0x800282 <raw_block_address+0x4>
    3f16:	4f 89       	ldd	r20, Y+23	; 0x17
    3f18:	40 93 83 02 	sts	0x0283, r20	; 0x800283 <raw_block_address+0x5>
    3f1c:	58 8d       	ldd	r21, Y+24	; 0x18
    3f1e:	50 93 84 02 	sts	0x0284, r21	; 0x800284 <raw_block_address+0x6>
    3f22:	69 8d       	ldd	r22, Y+25	; 0x19
    3f24:	60 93 85 02 	sts	0x0285, r22	; 0x800285 <raw_block_address+0x7>

            memcpy(buffer, raw_block + block_offset, read_length);
    3f28:	69 89       	ldd	r22, Y+17	; 0x11
    3f2a:	7a 89       	ldd	r23, Y+18	; 0x12
    3f2c:	6a 57       	subi	r22, 0x7A	; 122
    3f2e:	7d 4f       	sbci	r23, 0xFD	; 253
    3f30:	a4 01       	movw	r20, r8
    3f32:	8c 89       	ldd	r24, Y+20	; 0x14
    3f34:	9d 89       	ldd	r25, Y+21	; 0x15
    3f36:	0e 94 80 26 	call	0x4d00	; 0x4d00 <memcpy>
            buffer += read_length;
    3f3a:	8c 89       	ldd	r24, Y+20	; 0x14
    3f3c:	9d 89       	ldd	r25, Y+21	; 0x15
    3f3e:	88 0d       	add	r24, r8
    3f40:	99 1d       	adc	r25, r9
    3f42:	9d 8b       	std	Y+21, r25	; 0x15
    3f44:	8c 8b       	std	Y+20, r24	; 0x14
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    3f46:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
            sd_raw_rec_byte();
    3f4a:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    3f4e:	2a 9a       	sbi	0x05, 2	; 5

            /* let card some time to finish */
            sd_raw_rec_byte();
    3f50:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
    3f54:	0f c0       	rjmp	.+30     	; 0x3f74 <sd_raw_read+0x1f4>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    3f56:	69 89       	ldd	r22, Y+17	; 0x11
    3f58:	7a 89       	ldd	r23, Y+18	; 0x12
    3f5a:	6a 57       	subi	r22, 0x7A	; 122
    3f5c:	7d 4f       	sbci	r23, 0xFD	; 253
    3f5e:	a4 01       	movw	r20, r8
    3f60:	8c 89       	ldd	r24, Y+20	; 0x14
    3f62:	9d 89       	ldd	r25, Y+21	; 0x15
    3f64:	0e 94 80 26 	call	0x4d00	; 0x4d00 <memcpy>
            buffer += read_length;
    3f68:	ec 89       	ldd	r30, Y+20	; 0x14
    3f6a:	fd 89       	ldd	r31, Y+21	; 0x15
    3f6c:	e8 0d       	add	r30, r8
    3f6e:	f9 1d       	adc	r31, r9
    3f70:	fd 8b       	std	Y+21, r31	; 0x15
    3f72:	ec 8b       	std	Y+20, r30	; 0x14
        }
#endif

        length -= read_length;
    3f74:	48 18       	sub	r4, r8
    3f76:	59 08       	sbc	r5, r9
        offset += read_length;
    3f78:	94 01       	movw	r18, r8
    3f7a:	40 e0       	ldi	r20, 0x00	; 0
    3f7c:	50 e0       	ldi	r21, 0x00	; 0
    3f7e:	60 e0       	ldi	r22, 0x00	; 0
    3f80:	70 e0       	ldi	r23, 0x00	; 0
    3f82:	80 e0       	ldi	r24, 0x00	; 0
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	a9 80       	ldd	r10, Y+1	; 0x01
    3f88:	ba 80       	ldd	r11, Y+2	; 0x02
    3f8a:	cb 80       	ldd	r12, Y+3	; 0x03
    3f8c:	dc 80       	ldd	r13, Y+4	; 0x04
    3f8e:	ed 80       	ldd	r14, Y+5	; 0x05
    3f90:	fe 80       	ldd	r15, Y+6	; 0x06
    3f92:	0f 81       	ldd	r16, Y+7	; 0x07
    3f94:	18 85       	ldd	r17, Y+8	; 0x08
    3f96:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    3f9a:	29 83       	std	Y+1, r18	; 0x01
    3f9c:	3a 83       	std	Y+2, r19	; 0x02
    3f9e:	4b 83       	std	Y+3, r20	; 0x03
    3fa0:	5c 83       	std	Y+4, r21	; 0x04
    3fa2:	6d 83       	std	Y+5, r22	; 0x05
    3fa4:	7e 83       	std	Y+6, r23	; 0x06
    3fa6:	8f 83       	std	Y+7, r24	; 0x07
    3fa8:	98 87       	std	Y+8, r25	; 0x08
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3faa:	41 14       	cp	r4, r1
    3fac:	51 04       	cpc	r5, r1
    3fae:	09 f0       	breq	.+2      	; 0x3fb2 <sd_raw_read+0x232>
    3fb0:	1b cf       	rjmp	.-458    	; 0x3de8 <sd_raw_read+0x68>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	01 c0       	rjmp	.+2      	; 0x3fb8 <sd_raw_read+0x238>
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
}
    3fb8:	6d 96       	adiw	r28, 0x1d	; 29
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	ff 90       	pop	r15
    3fce:	ef 90       	pop	r14
    3fd0:	df 90       	pop	r13
    3fd2:	cf 90       	pop	r12
    3fd4:	bf 90       	pop	r11
    3fd6:	af 90       	pop	r10
    3fd8:	9f 90       	pop	r9
    3fda:	8f 90       	pop	r8
    3fdc:	7f 90       	pop	r7
    3fde:	6f 90       	pop	r6
    3fe0:	5f 90       	pop	r5
    3fe2:	4f 90       	pop	r4
    3fe4:	3f 90       	pop	r3
    3fe6:	2f 90       	pop	r2
    3fe8:	08 95       	ret

00003fea <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    3fea:	9f 92       	push	r9
    3fec:	af 92       	push	r10
    3fee:	bf 92       	push	r11
    3ff0:	cf 92       	push	r12
    3ff2:	df 92       	push	r13
    3ff4:	ef 92       	push	r14
    3ff6:	ff 92       	push	r15
    3ff8:	0f 93       	push	r16
    3ffa:	1f 93       	push	r17
    3ffc:	cf 93       	push	r28
    3ffe:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    4000:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    4002:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    4004:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    4006:	24 98       	cbi	0x04, 4	; 4

    unselect_card();
    4008:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    400a:	83 e5       	ldi	r24, 0x53	; 83
    400c:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    400e:	8d b5       	in	r24, 0x2d	; 45
    4010:	8e 7f       	andi	r24, 0xFE	; 254
    4012:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    4014:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <sd_raw_card_type>
    4018:	1a e0       	ldi	r17, 0x0A	; 10

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    401a:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
    401e:	11 50       	subi	r17, 0x01	; 1
		
        return 0;
	}

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    4020:	e1 f7       	brne	.-8      	; 0x401a <sd_raw_init+0x30>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    4022:	2a 98       	cbi	0x05, 2	; 5
    4024:	c0 e0       	ldi	r28, 0x00	; 0
    4026:	d2 e0       	ldi	r29, 0x02	; 2

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    4028:	40 e0       	ldi	r20, 0x00	; 0
    402a:	50 e0       	ldi	r21, 0x00	; 0
    402c:	ba 01       	movw	r22, r20
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    4034:	81 30       	cpi	r24, 0x01	; 1
    4036:	29 f0       	breq	.+10     	; 0x4042 <sd_raw_init+0x58>
    4038:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x1ff)
    403a:	b1 f7       	brne	.-20     	; 0x4028 <sd_raw_init+0x3e>
        {
            unselect_card();
    403c:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    403e:	01 2f       	mov	r16, r17
    4040:	c0 c0       	rjmp	.+384    	; 0x41c2 <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    4042:	4a ea       	ldi	r20, 0xAA	; 170
    4044:	51 e0       	ldi	r21, 0x01	; 1
    4046:	60 e0       	ldi	r22, 0x00	; 0
    4048:	70 e0       	ldi	r23, 0x00	; 0
    404a:	88 e0       	ldi	r24, 0x08	; 8
    404c:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    4050:	c8 2f       	mov	r28, r24
    4052:	c4 70       	andi	r28, 0x04	; 4
    4054:	82 fd       	sbrc	r24, 2
    4056:	1d c0       	rjmp	.+58     	; 0x4092 <sd_raw_init+0xa8>
    {
        sd_raw_rec_byte();
    4058:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
        sd_raw_rec_byte();
    405c:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0){
    4060:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
    4064:	08 2f       	mov	r16, r24
    4066:	01 70       	andi	r16, 0x01	; 1
    4068:	80 ff       	sbrs	r24, 0
    406a:	ab c0       	rjmp	.+342    	; 0x41c2 <sd_raw_init+0x1d8>
			
            return 0; /* card operation voltage range doesn't match */
		}
        if(sd_raw_rec_byte() != 0xaa)
    406c:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
    4070:	8a 3a       	cpi	r24, 0xAA	; 170
    4072:	09 f0       	breq	.+2      	; 0x4076 <sd_raw_init+0x8c>
    4074:	a5 c0       	rjmp	.+330    	; 0x41c0 <sd_raw_init+0x1d6>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    4076:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <sd_raw_card_type>
    407a:	82 60       	ori	r24, 0x02	; 2
    407c:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <sd_raw_card_type>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    4080:	c0 e0       	ldi	r28, 0x00	; 0
    4082:	d0 e8       	ldi	r29, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
    4084:	91 2c       	mov	r9, r1
    4086:	a1 2c       	mov	r10, r1
    4088:	b1 2c       	mov	r11, r1
    408a:	68 94       	set
    408c:	cc 24       	eor	r12, r12
    408e:	c6 f8       	bld	r12, 6
    4090:	14 c0       	rjmp	.+40     	; 0x40ba <sd_raw_init+0xd0>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    4092:	40 e0       	ldi	r20, 0x00	; 0
    4094:	50 e0       	ldi	r21, 0x00	; 0
    4096:	ba 01       	movw	r22, r20
    4098:	87 e3       	ldi	r24, 0x37	; 55
    409a:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    409e:	40 e0       	ldi	r20, 0x00	; 0
    40a0:	50 e0       	ldi	r21, 0x00	; 0
    40a2:	ba 01       	movw	r22, r20
    40a4:	89 e2       	ldi	r24, 0x29	; 41
    40a6:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    40aa:	82 fd       	sbrc	r24, 2
    40ac:	e9 cf       	rjmp	.-46     	; 0x4080 <sd_raw_init+0x96>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    40ae:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <sd_raw_card_type>
    40b2:	81 60       	ori	r24, 0x01	; 1
    40b4:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <sd_raw_card_type>
    40b8:	e3 cf       	rjmp	.-58     	; 0x4080 <sd_raw_init+0x96>
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    40ba:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <sd_raw_card_type>
    40be:	98 2f       	mov	r25, r24
    40c0:	93 70       	andi	r25, 0x03	; 3
    40c2:	c9 f0       	breq	.+50     	; 0x40f6 <sd_raw_init+0x10c>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    40c4:	81 ff       	sbrs	r24, 1
    40c6:	05 c0       	rjmp	.+10     	; 0x40d2 <sd_raw_init+0xe8>
                arg = 0x40000000;
    40c8:	d9 2c       	mov	r13, r9
    40ca:	ea 2c       	mov	r14, r10
    40cc:	fb 2c       	mov	r15, r11
    40ce:	0c 2d       	mov	r16, r12
    40d0:	04 c0       	rjmp	.+8      	; 0x40da <sd_raw_init+0xf0>
    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
    40d2:	d1 2c       	mov	r13, r1
    40d4:	e1 2c       	mov	r14, r1
    40d6:	f1 2c       	mov	r15, r1
    40d8:	00 e0       	ldi	r16, 0x00	; 0
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    40da:	40 e0       	ldi	r20, 0x00	; 0
    40dc:	50 e0       	ldi	r21, 0x00	; 0
    40de:	ba 01       	movw	r22, r20
    40e0:	87 e3       	ldi	r24, 0x37	; 55
    40e2:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    40e6:	4d 2d       	mov	r20, r13
    40e8:	5e 2d       	mov	r21, r14
    40ea:	6f 2d       	mov	r22, r15
    40ec:	70 2f       	mov	r23, r16
    40ee:	89 e2       	ldi	r24, 0x29	; 41
    40f0:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <sd_raw_send_command>
    40f4:	06 c0       	rjmp	.+12     	; 0x4102 <sd_raw_init+0x118>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    40f6:	40 e0       	ldi	r20, 0x00	; 0
    40f8:	50 e0       	ldi	r21, 0x00	; 0
    40fa:	ba 01       	movw	r22, r20
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    4102:	08 2f       	mov	r16, r24
    4104:	01 70       	andi	r16, 0x01	; 1
    4106:	80 ff       	sbrs	r24, 0
    4108:	05 c0       	rjmp	.+10     	; 0x4114 <sd_raw_init+0x12a>
    410a:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x7fff)
    410c:	b1 f6       	brne	.-84     	; 0x40ba <sd_raw_init+0xd0>
        {
            unselect_card();
    410e:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    4110:	01 2f       	mov	r16, r17
    4112:	57 c0       	rjmp	.+174    	; 0x41c2 <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    4114:	c0 91 7c 02 	lds	r28, 0x027C	; 0x80027c <sd_raw_card_type>
    4118:	c1 ff       	sbrs	r28, 1
    411a:	17 c0       	rjmp	.+46     	; 0x414a <sd_raw_init+0x160>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    411c:	40 e0       	ldi	r20, 0x00	; 0
    411e:	50 e0       	ldi	r21, 0x00	; 0
    4120:	ba 01       	movw	r22, r20
    4122:	8a e3       	ldi	r24, 0x3A	; 58
    4124:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <sd_raw_send_command>
    4128:	88 23       	and	r24, r24
    412a:	11 f0       	breq	.+4      	; 0x4130 <sd_raw_init+0x146>
        {
            unselect_card();
    412c:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    412e:	49 c0       	rjmp	.+146    	; 0x41c2 <sd_raw_init+0x1d8>
        }

        if(sd_raw_rec_byte() & 0x40)
    4130:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
    4134:	86 ff       	sbrs	r24, 6
    4136:	03 c0       	rjmp	.+6      	; 0x413e <sd_raw_init+0x154>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    4138:	c4 60       	ori	r28, 0x04	; 4
    413a:	c0 93 7c 02 	sts	0x027C, r28	; 0x80027c <sd_raw_card_type>

        sd_raw_rec_byte();
    413e:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
        sd_raw_rec_byte();
    4142:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
        sd_raw_rec_byte();
    4146:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    414a:	40 e0       	ldi	r20, 0x00	; 0
    414c:	52 e0       	ldi	r21, 0x02	; 2
    414e:	60 e0       	ldi	r22, 0x00	; 0
    4150:	70 e0       	ldi	r23, 0x00	; 0
    4152:	80 e1       	ldi	r24, 0x10	; 16
    4154:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <sd_raw_send_command>
    4158:	88 23       	and	r24, r24
    415a:	11 f0       	breq	.+4      	; 0x4160 <sd_raw_init+0x176>
    {
        unselect_card();
    415c:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    415e:	31 c0       	rjmp	.+98     	; 0x41c2 <sd_raw_init+0x1d8>
    }

    /* deaddress card */
    unselect_card();
    4160:	2a 9a       	sbi	0x05, 2	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    4162:	8c b5       	in	r24, 0x2c	; 44
    4164:	8c 7f       	andi	r24, 0xFC	; 252
    4166:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    4168:	8d b5       	in	r24, 0x2d	; 45
    416a:	81 60       	ori	r24, 0x01	; 1
    416c:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    416e:	8f ef       	ldi	r24, 0xFF	; 255
    4170:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <raw_block_address>
    4174:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <raw_block_address+0x1>
    4178:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <raw_block_address+0x2>
    417c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <raw_block_address+0x3>
    4180:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <raw_block_address+0x4>
    4184:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <raw_block_address+0x5>
    4188:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <raw_block_address+0x6>
    418c:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <raw_block_address+0x7>
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    4190:	81 e0       	ldi	r24, 0x01	; 1
    4192:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <raw_block_written>
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    4196:	e1 2c       	mov	r14, r1
    4198:	68 94       	set
    419a:	ff 24       	eor	r15, r15
    419c:	f1 f8       	bld	r15, 1
    419e:	06 e8       	ldi	r16, 0x86	; 134
    41a0:	12 e0       	ldi	r17, 0x02	; 2
    41a2:	20 e0       	ldi	r18, 0x00	; 0
    41a4:	30 e0       	ldi	r19, 0x00	; 0
    41a6:	40 e0       	ldi	r20, 0x00	; 0
    41a8:	50 e0       	ldi	r21, 0x00	; 0
    41aa:	60 e0       	ldi	r22, 0x00	; 0
    41ac:	70 e0       	ldi	r23, 0x00	; 0
    41ae:	80 e0       	ldi	r24, 0x00	; 0
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <sd_raw_read>
        return 0;
#endif

    return 1;
    41b6:	01 e0       	ldi	r16, 0x01	; 1
    41b8:	81 11       	cpse	r24, r1
    41ba:	03 c0       	rjmp	.+6      	; 0x41c2 <sd_raw_init+0x1d8>
    41bc:	00 e0       	ldi	r16, 0x00	; 0
    41be:	01 c0       	rjmp	.+2      	; 0x41c2 <sd_raw_init+0x1d8>
        if((sd_raw_rec_byte() & 0x01) == 0){
			
            return 0; /* card operation voltage range doesn't match */
		}
        if(sd_raw_rec_byte() != 0xaa)
            return 0; /* wrong test pattern */
    41c0:	0c 2f       	mov	r16, r28
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
        return 0;
#endif

    return 1;
}
    41c2:	80 2f       	mov	r24, r16
    41c4:	df 91       	pop	r29
    41c6:	cf 91       	pop	r28
    41c8:	1f 91       	pop	r17
    41ca:	0f 91       	pop	r16
    41cc:	ff 90       	pop	r15
    41ce:	ef 90       	pop	r14
    41d0:	df 90       	pop	r13
    41d2:	cf 90       	pop	r12
    41d4:	bf 90       	pop	r11
    41d6:	af 90       	pop	r10
    41d8:	9f 90       	pop	r9
    41da:	08 95       	ret

000041dc <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    41dc:	2f 92       	push	r2
    41de:	3f 92       	push	r3
    41e0:	4f 92       	push	r4
    41e2:	5f 92       	push	r5
    41e4:	6f 92       	push	r6
    41e6:	7f 92       	push	r7
    41e8:	8f 92       	push	r8
    41ea:	9f 92       	push	r9
    41ec:	af 92       	push	r10
    41ee:	bf 92       	push	r11
    41f0:	cf 92       	push	r12
    41f2:	df 92       	push	r13
    41f4:	ef 92       	push	r14
    41f6:	ff 92       	push	r15
    41f8:	0f 93       	push	r16
    41fa:	1f 93       	push	r17
    41fc:	cf 93       	push	r28
    41fe:	df 93       	push	r29
    4200:	cd b7       	in	r28, 0x3d	; 61
    4202:	de b7       	in	r29, 0x3e	; 62
    4204:	64 97       	sbiw	r28, 0x14	; 20
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	f8 94       	cli
    420a:	de bf       	out	0x3e, r29	; 62
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	cd bf       	out	0x3d, r28	; 61
    4210:	28 8b       	std	Y+16, r18	; 0x10
    4212:	39 8b       	std	Y+17, r19	; 0x11
    4214:	4a 8b       	std	Y+18, r20	; 0x12
    4216:	5b 8b       	std	Y+19, r21	; 0x13
    4218:	36 2e       	mov	r3, r22
    421a:	27 2e       	mov	r2, r23
    421c:	8c 8b       	std	Y+20, r24	; 0x14
    421e:	99 83       	std	Y+1, r25	; 0x01
    4220:	1b 83       	std	Y+3, r17	; 0x03
    4222:	0a 83       	std	Y+2, r16	; 0x02
    4224:	37 01       	movw	r6, r14
    4226:	26 01       	movw	r4, r12
    4228:	bd 86       	std	Y+13, r11	; 0x0d
    422a:	ac 86       	std	Y+12, r10	; 0x0c
    if(!buffer || interval == 0 || length < interval || !callback)
    422c:	01 2b       	or	r16, r17
    422e:	09 f4       	brne	.+2      	; 0x4232 <sd_raw_read_interval+0x56>
    4230:	54 c0       	rjmp	.+168    	; 0x42da <sd_raw_read_interval+0xfe>
    4232:	e1 14       	cp	r14, r1
    4234:	f1 04       	cpc	r15, r1
    4236:	09 f4       	brne	.+2      	; 0x423a <sd_raw_read_interval+0x5e>
    4238:	52 c0       	rjmp	.+164    	; 0x42de <sd_raw_read_interval+0x102>
    423a:	ce 14       	cp	r12, r14
    423c:	df 04       	cpc	r13, r15
    423e:	08 f4       	brcc	.+2      	; 0x4242 <sd_raw_read_interval+0x66>
    4240:	50 c0       	rjmp	.+160    	; 0x42e2 <sd_raw_read_interval+0x106>
    4242:	ab 28       	or	r10, r11
    4244:	09 f4       	brne	.+2      	; 0x4248 <sd_raw_read_interval+0x6c>
    4246:	4f c0       	rjmp	.+158    	; 0x42e6 <sd_raw_read_interval+0x10a>
    4248:	97 01       	movw	r18, r14
    424a:	ec 82       	std	Y+4, r14	; 0x04
    424c:	3d 83       	std	Y+5, r19	; 0x05
    424e:	9f 86       	std	Y+15, r9	; 0x0f
    4250:	8e 86       	std	Y+14, r8	; 0x0e
    4252:	a8 88       	ldd	r10, Y+16	; 0x10
    4254:	b9 88       	ldd	r11, Y+17	; 0x11
    4256:	ca 88       	ldd	r12, Y+18	; 0x12
    4258:	db 88       	ldd	r13, Y+19	; 0x13
    425a:	93 2c       	mov	r9, r3
    425c:	32 2c       	mov	r3, r2
    425e:	2c 88       	ldd	r2, Y+20	; 0x14
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    4260:	73 01       	movw	r14, r6
    4262:	0a 81       	ldd	r16, Y+2	; 0x02
    4264:	1b 81       	ldd	r17, Y+3	; 0x03
    4266:	2a 2d       	mov	r18, r10
    4268:	3b 2d       	mov	r19, r11
    426a:	4c 2d       	mov	r20, r12
    426c:	5d 2d       	mov	r21, r13
    426e:	69 2d       	mov	r22, r9
    4270:	73 2d       	mov	r23, r3
    4272:	82 2d       	mov	r24, r2
    4274:	99 81       	ldd	r25, Y+1	; 0x01
    4276:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <sd_raw_read>
    427a:	88 23       	and	r24, r24
    427c:	b9 f1       	breq	.+110    	; 0x42ec <sd_raw_read_interval+0x110>
            return 0;
        if(!callback(buffer, offset, p))
    427e:	ee 84       	ldd	r14, Y+14	; 0x0e
    4280:	ff 84       	ldd	r15, Y+15	; 0x0f
    4282:	0a 2d       	mov	r16, r10
    4284:	1b 2d       	mov	r17, r11
    4286:	2c 2d       	mov	r18, r12
    4288:	3d 2d       	mov	r19, r13
    428a:	49 2d       	mov	r20, r9
    428c:	53 2d       	mov	r21, r3
    428e:	62 2d       	mov	r22, r2
    4290:	79 81       	ldd	r23, Y+1	; 0x01
    4292:	8a 81       	ldd	r24, Y+2	; 0x02
    4294:	9b 81       	ldd	r25, Y+3	; 0x03
    4296:	ec 85       	ldd	r30, Y+12	; 0x0c
    4298:	fd 85       	ldd	r31, Y+13	; 0x0d
    429a:	09 95       	icall
    429c:	88 23       	and	r24, r24
    429e:	29 f1       	breq	.+74     	; 0x42ea <sd_raw_read_interval+0x10e>
    42a0:	2c 81       	ldd	r18, Y+4	; 0x04
    42a2:	3d 81       	ldd	r19, Y+5	; 0x05
    42a4:	40 e0       	ldi	r20, 0x00	; 0
    42a6:	50 e0       	ldi	r21, 0x00	; 0
    42a8:	60 e0       	ldi	r22, 0x00	; 0
    42aa:	70 e0       	ldi	r23, 0x00	; 0
    42ac:	80 e0       	ldi	r24, 0x00	; 0
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	e9 2c       	mov	r14, r9
    42b2:	f3 2c       	mov	r15, r3
    42b4:	02 2d       	mov	r16, r2
    42b6:	19 81       	ldd	r17, Y+1	; 0x01
    42b8:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    42bc:	a2 2e       	mov	r10, r18
    42be:	b3 2e       	mov	r11, r19
    42c0:	c4 2e       	mov	r12, r20
    42c2:	d5 2e       	mov	r13, r21
    42c4:	96 2e       	mov	r9, r22
    42c6:	37 2e       	mov	r3, r23
    42c8:	28 2e       	mov	r2, r24
    42ca:	99 83       	std	Y+1, r25	; 0x01
            break;
        offset += interval;
        length -= interval;
    42cc:	46 18       	sub	r4, r6
    42ce:	57 08       	sbc	r5, r7
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    42d0:	46 14       	cp	r4, r6
    42d2:	57 04       	cpc	r5, r7
    42d4:	28 f6       	brcc	.-118    	; 0x4260 <sd_raw_read_interval+0x84>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	09 c0       	rjmp	.+18     	; 0x42ec <sd_raw_read_interval+0x110>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    42da:	80 e0       	ldi	r24, 0x00	; 0
    42dc:	07 c0       	rjmp	.+14     	; 0x42ec <sd_raw_read_interval+0x110>
    42de:	80 e0       	ldi	r24, 0x00	; 0
    42e0:	05 c0       	rjmp	.+10     	; 0x42ec <sd_raw_read_interval+0x110>
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	03 c0       	rjmp	.+6      	; 0x42ec <sd_raw_read_interval+0x110>
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	01 c0       	rjmp	.+2      	; 0x42ec <sd_raw_read_interval+0x110>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    42ea:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    42ec:	64 96       	adiw	r28, 0x14	; 20
    42ee:	0f b6       	in	r0, 0x3f	; 63
    42f0:	f8 94       	cli
    42f2:	de bf       	out	0x3e, r29	; 62
    42f4:	0f be       	out	0x3f, r0	; 63
    42f6:	cd bf       	out	0x3d, r28	; 61
    42f8:	df 91       	pop	r29
    42fa:	cf 91       	pop	r28
    42fc:	1f 91       	pop	r17
    42fe:	0f 91       	pop	r16
    4300:	ff 90       	pop	r15
    4302:	ef 90       	pop	r14
    4304:	df 90       	pop	r13
    4306:	cf 90       	pop	r12
    4308:	bf 90       	pop	r11
    430a:	af 90       	pop	r10
    430c:	9f 90       	pop	r9
    430e:	8f 90       	pop	r8
    4310:	7f 90       	pop	r7
    4312:	6f 90       	pop	r6
    4314:	5f 90       	pop	r5
    4316:	4f 90       	pop	r4
    4318:	3f 90       	pop	r3
    431a:	2f 90       	pop	r2
    431c:	08 95       	ret

0000431e <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    431e:	2f 92       	push	r2
    4320:	3f 92       	push	r3
    4322:	4f 92       	push	r4
    4324:	5f 92       	push	r5
    4326:	6f 92       	push	r6
    4328:	7f 92       	push	r7
    432a:	8f 92       	push	r8
    432c:	9f 92       	push	r9
    432e:	af 92       	push	r10
    4330:	bf 92       	push	r11
    4332:	cf 92       	push	r12
    4334:	df 92       	push	r13
    4336:	ef 92       	push	r14
    4338:	ff 92       	push	r15
    433a:	0f 93       	push	r16
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	cd b7       	in	r28, 0x3d	; 61
    4344:	de b7       	in	r29, 0x3e	; 62
    4346:	69 97       	sbiw	r28, 0x19	; 25
    4348:	0f b6       	in	r0, 0x3f	; 63
    434a:	f8 94       	cli
    434c:	de bf       	out	0x3e, r29	; 62
    434e:	0f be       	out	0x3f, r0	; 63
    4350:	cd bf       	out	0x3d, r28	; 61
    4352:	29 83       	std	Y+1, r18	; 0x01
    4354:	3a 83       	std	Y+2, r19	; 0x02
    4356:	4b 83       	std	Y+3, r20	; 0x03
    4358:	5c 83       	std	Y+4, r21	; 0x04
    435a:	6d 83       	std	Y+5, r22	; 0x05
    435c:	7e 83       	std	Y+6, r23	; 0x06
    435e:	8f 83       	std	Y+7, r24	; 0x07
    4360:	98 87       	std	Y+8, r25	; 0x08
    4362:	38 01       	movw	r6, r16
    4364:	27 01       	movw	r4, r14
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    4366:	ef 28       	or	r14, r15
    4368:	09 f4       	brne	.+2      	; 0x436c <sd_raw_write+0x4e>
    436a:	0b c1       	rjmp	.+534    	; 0x4582 <sd_raw_write+0x264>
    436c:	0f 2e       	mov	r0, r31
    436e:	f6 e8       	ldi	r31, 0x86	; 134
    4370:	2f 2e       	mov	r2, r31
    4372:	f4 e0       	ldi	r31, 0x04	; 4
    4374:	3f 2e       	mov	r3, r31
    4376:	f0 2d       	mov	r31, r0
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    4378:	29 81       	ldd	r18, Y+1	; 0x01
    437a:	3a 81       	ldd	r19, Y+2	; 0x02
    437c:	31 70       	andi	r19, 0x01	; 1
    437e:	39 8f       	std	Y+25, r19	; 0x19
    4380:	28 8f       	std	Y+24, r18	; 0x18
        block_address = offset - block_offset;
    4382:	40 e0       	ldi	r20, 0x00	; 0
    4384:	50 e0       	ldi	r21, 0x00	; 0
    4386:	60 e0       	ldi	r22, 0x00	; 0
    4388:	70 e0       	ldi	r23, 0x00	; 0
    438a:	cb 01       	movw	r24, r22
    438c:	29 87       	std	Y+9, r18	; 0x09
    438e:	3a 87       	std	Y+10, r19	; 0x0a
    4390:	4b 87       	std	Y+11, r20	; 0x0b
    4392:	5c 87       	std	Y+12, r21	; 0x0c
    4394:	6d 87       	std	Y+13, r22	; 0x0d
    4396:	7e 87       	std	Y+14, r23	; 0x0e
    4398:	8f 87       	std	Y+15, r24	; 0x0f
    439a:	98 8b       	std	Y+16, r25	; 0x10
    439c:	29 81       	ldd	r18, Y+1	; 0x01
    439e:	3a 81       	ldd	r19, Y+2	; 0x02
    43a0:	4b 81       	ldd	r20, Y+3	; 0x03
    43a2:	5c 81       	ldd	r21, Y+4	; 0x04
    43a4:	6d 81       	ldd	r22, Y+5	; 0x05
    43a6:	7e 81       	ldd	r23, Y+6	; 0x06
    43a8:	8f 81       	ldd	r24, Y+7	; 0x07
    43aa:	98 85       	ldd	r25, Y+8	; 0x08
    43ac:	a9 84       	ldd	r10, Y+9	; 0x09
    43ae:	ba 84       	ldd	r11, Y+10	; 0x0a
    43b0:	c1 2c       	mov	r12, r1
    43b2:	d1 2c       	mov	r13, r1
    43b4:	e1 2c       	mov	r14, r1
    43b6:	f1 2c       	mov	r15, r1
    43b8:	00 e0       	ldi	r16, 0x00	; 0
    43ba:	10 e0       	ldi	r17, 0x00	; 0
    43bc:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <__subdi3>
    43c0:	29 87       	std	Y+9, r18	; 0x09
    43c2:	39 8b       	std	Y+17, r19	; 0x11
    43c4:	4a 8b       	std	Y+18, r20	; 0x12
    43c6:	5b 8b       	std	Y+19, r21	; 0x13
    43c8:	6c 8b       	std	Y+20, r22	; 0x14
    43ca:	7d 8b       	std	Y+21, r23	; 0x15
    43cc:	8e 8b       	std	Y+22, r24	; 0x16
    43ce:	9f 8b       	std	Y+23, r25	; 0x17
    43d0:	81 2c       	mov	r8, r1
    43d2:	68 94       	set
    43d4:	99 24       	eor	r9, r9
    43d6:	91 f8       	bld	r9, 1
    43d8:	68 8d       	ldd	r22, Y+24	; 0x18
    43da:	79 8d       	ldd	r23, Y+25	; 0x19
    43dc:	86 1a       	sub	r8, r22
    43de:	97 0a       	sbc	r9, r23
    43e0:	48 14       	cp	r4, r8
    43e2:	59 04       	cpc	r5, r9
    43e4:	08 f4       	brcc	.+2      	; 0x43e8 <sd_raw_write+0xca>
    43e6:	42 01       	movw	r8, r4
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    43e8:	a0 90 7e 02 	lds	r10, 0x027E	; 0x80027e <raw_block_address>
    43ec:	b0 90 7f 02 	lds	r11, 0x027F	; 0x80027f <raw_block_address+0x1>
    43f0:	c0 90 80 02 	lds	r12, 0x0280	; 0x800280 <raw_block_address+0x2>
    43f4:	d0 90 81 02 	lds	r13, 0x0281	; 0x800281 <raw_block_address+0x3>
    43f8:	e0 90 82 02 	lds	r14, 0x0282	; 0x800282 <raw_block_address+0x4>
    43fc:	f0 90 83 02 	lds	r15, 0x0283	; 0x800283 <raw_block_address+0x5>
    4400:	00 91 84 02 	lds	r16, 0x0284	; 0x800284 <raw_block_address+0x6>
    4404:	10 91 85 02 	lds	r17, 0x0285	; 0x800285 <raw_block_address+0x7>
    4408:	29 85       	ldd	r18, Y+9	; 0x09
    440a:	39 89       	ldd	r19, Y+17	; 0x11
    440c:	4a 89       	ldd	r20, Y+18	; 0x12
    440e:	5b 89       	ldd	r21, Y+19	; 0x13
    4410:	6c 89       	ldd	r22, Y+20	; 0x14
    4412:	7d 89       	ldd	r23, Y+21	; 0x15
    4414:	8e 89       	ldd	r24, Y+22	; 0x16
    4416:	9f 89       	ldd	r25, Y+23	; 0x17
    4418:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__cmpdi2>
    441c:	c1 f1       	breq	.+112    	; 0x448e <sd_raw_write+0x170>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    441e:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <sd_raw_sync>
    4422:	88 23       	and	r24, r24
    4424:	09 f4       	brne	.+2      	; 0x4428 <sd_raw_write+0x10a>
    4426:	b0 c0       	rjmp	.+352    	; 0x4588 <sd_raw_write+0x26a>
                return 0;
#endif

            if(block_offset || write_length < 512)
    4428:	88 8d       	ldd	r24, Y+24	; 0x18
    442a:	99 8d       	ldd	r25, Y+25	; 0x19
    442c:	89 2b       	or	r24, r25
    442e:	21 f4       	brne	.+8      	; 0x4438 <sd_raw_write+0x11a>
    4430:	81 14       	cp	r8, r1
    4432:	92 e0       	ldi	r25, 0x02	; 2
    4434:	99 06       	cpc	r9, r25
    4436:	98 f4       	brcc	.+38     	; 0x445e <sd_raw_write+0x140>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    4438:	e1 2c       	mov	r14, r1
    443a:	68 94       	set
    443c:	ff 24       	eor	r15, r15
    443e:	f1 f8       	bld	r15, 1
    4440:	06 e8       	ldi	r16, 0x86	; 134
    4442:	12 e0       	ldi	r17, 0x02	; 2
    4444:	29 85       	ldd	r18, Y+9	; 0x09
    4446:	39 89       	ldd	r19, Y+17	; 0x11
    4448:	4a 89       	ldd	r20, Y+18	; 0x12
    444a:	5b 89       	ldd	r21, Y+19	; 0x13
    444c:	6c 89       	ldd	r22, Y+20	; 0x14
    444e:	7d 89       	ldd	r23, Y+21	; 0x15
    4450:	8e 89       	ldd	r24, Y+22	; 0x16
    4452:	9f 89       	ldd	r25, Y+23	; 0x17
    4454:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <sd_raw_read>
    4458:	88 23       	and	r24, r24
    445a:	09 f4       	brne	.+2      	; 0x445e <sd_raw_write+0x140>
    445c:	95 c0       	rjmp	.+298    	; 0x4588 <sd_raw_write+0x26a>
                    return 0;
            }
            raw_block_address = block_address;
    445e:	e9 85       	ldd	r30, Y+9	; 0x09
    4460:	e0 93 7e 02 	sts	0x027E, r30	; 0x80027e <raw_block_address>
    4464:	f9 89       	ldd	r31, Y+17	; 0x11
    4466:	f0 93 7f 02 	sts	0x027F, r31	; 0x80027f <raw_block_address+0x1>
    446a:	2a 89       	ldd	r18, Y+18	; 0x12
    446c:	20 93 80 02 	sts	0x0280, r18	; 0x800280 <raw_block_address+0x2>
    4470:	3b 89       	ldd	r19, Y+19	; 0x13
    4472:	30 93 81 02 	sts	0x0281, r19	; 0x800281 <raw_block_address+0x3>
    4476:	4c 89       	ldd	r20, Y+20	; 0x14
    4478:	40 93 82 02 	sts	0x0282, r20	; 0x800282 <raw_block_address+0x4>
    447c:	5d 89       	ldd	r21, Y+21	; 0x15
    447e:	50 93 83 02 	sts	0x0283, r21	; 0x800283 <raw_block_address+0x5>
    4482:	6e 89       	ldd	r22, Y+22	; 0x16
    4484:	60 93 84 02 	sts	0x0284, r22	; 0x800284 <raw_block_address+0x6>
    4488:	7f 89       	ldd	r23, Y+23	; 0x17
    448a:	70 93 85 02 	sts	0x0285, r23	; 0x800285 <raw_block_address+0x7>
        }

        if(buffer != raw_block)
    448e:	86 e8       	ldi	r24, 0x86	; 134
    4490:	68 16       	cp	r6, r24
    4492:	82 e0       	ldi	r24, 0x02	; 2
    4494:	78 06       	cpc	r7, r24
    4496:	71 f0       	breq	.+28     	; 0x44b4 <sd_raw_write+0x196>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    4498:	a4 01       	movw	r20, r8
    449a:	b3 01       	movw	r22, r6
    449c:	88 8d       	ldd	r24, Y+24	; 0x18
    449e:	99 8d       	ldd	r25, Y+25	; 0x19
    44a0:	8a 57       	subi	r24, 0x7A	; 122
    44a2:	9d 4f       	sbci	r25, 0xFD	; 253
    44a4:	0e 94 80 26 	call	0x4d00	; 0x4d00 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    44a8:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <raw_block_written>

            if(length == write_length)
    44ac:	84 14       	cp	r8, r4
    44ae:	95 04       	cpc	r9, r5
    44b0:	09 f4       	brne	.+2      	; 0x44b4 <sd_raw_write+0x196>
    44b2:	69 c0       	rjmp	.+210    	; 0x4586 <sd_raw_write+0x268>
                return 1;
#endif
        }

        /* address card */
        select_card();
    44b4:	2a 98       	cbi	0x05, 2	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    44b6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <sd_raw_card_type>
    44ba:	82 ff       	sbrs	r24, 2
    44bc:	10 c0       	rjmp	.+32     	; 0x44de <sd_raw_write+0x1c0>
    44be:	29 85       	ldd	r18, Y+9	; 0x09
    44c0:	39 89       	ldd	r19, Y+17	; 0x11
    44c2:	4a 89       	ldd	r20, Y+18	; 0x12
    44c4:	5b 89       	ldd	r21, Y+19	; 0x13
    44c6:	6c 89       	ldd	r22, Y+20	; 0x14
    44c8:	7d 89       	ldd	r23, Y+21	; 0x15
    44ca:	8e 89       	ldd	r24, Y+22	; 0x16
    44cc:	9f 89       	ldd	r25, Y+23	; 0x17
    44ce:	09 e0       	ldi	r16, 0x09	; 9
    44d0:	0e 94 31 26 	call	0x4c62	; 0x4c62 <__lshrdi3>
    44d4:	64 2f       	mov	r22, r20
    44d6:	75 2f       	mov	r23, r21
    44d8:	42 2f       	mov	r20, r18
    44da:	53 2f       	mov	r21, r19
    44dc:	04 c0       	rjmp	.+8      	; 0x44e6 <sd_raw_write+0x1c8>
    44de:	49 85       	ldd	r20, Y+9	; 0x09
    44e0:	59 89       	ldd	r21, Y+17	; 0x11
    44e2:	6a 89       	ldd	r22, Y+18	; 0x12
    44e4:	7b 89       	ldd	r23, Y+19	; 0x13
    44e6:	88 e1       	ldi	r24, 0x18	; 24
    44e8:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <sd_raw_send_command>
    44ec:	88 23       	and	r24, r24
    44ee:	19 f0       	breq	.+6      	; 0x44f6 <sd_raw_write+0x1d8>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    44f0:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    44f2:	80 e0       	ldi	r24, 0x00	; 0
    44f4:	49 c0       	rjmp	.+146    	; 0x4588 <sd_raw_write+0x26a>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    44f6:	8e ef       	ldi	r24, 0xFE	; 254
    44f8:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>
    44fc:	e6 e8       	ldi	r30, 0x86	; 134
    44fe:	f2 e0       	ldi	r31, 0x02	; 2
    4500:	fa 87       	std	Y+10, r31	; 0x0a
    4502:	e9 87       	std	Y+9, r30	; 0x09

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    4504:	e9 85       	ldd	r30, Y+9	; 0x09
    4506:	fa 85       	ldd	r31, Y+10	; 0x0a
    4508:	81 91       	ld	r24, Z+
    450a:	fa 87       	std	Y+10, r31	; 0x0a
    450c:	e9 87       	std	Y+9, r30	; 0x09
    450e:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    4512:	29 85       	ldd	r18, Y+9	; 0x09
    4514:	3a 85       	ldd	r19, Y+10	; 0x0a
    4516:	22 15       	cp	r18, r2
    4518:	33 05       	cpc	r19, r3
    451a:	a1 f7       	brne	.-24     	; 0x4504 <sd_raw_write+0x1e6>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    451c:	8f ef       	ldi	r24, 0xFF	; 255
    451e:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    4522:	8f ef       	ldi	r24, 0xFF	; 255
    4524:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    4528:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>
    452c:	8f 3f       	cpi	r24, 0xFF	; 255
    452e:	e1 f7       	brne	.-8      	; 0x4528 <sd_raw_write+0x20a>
        sd_raw_rec_byte();
    4530:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    4534:	2a 9a       	sbi	0x05, 2	; 5

        buffer += write_length;
    4536:	68 0c       	add	r6, r8
    4538:	79 1c       	adc	r7, r9
        offset += write_length;
    453a:	94 01       	movw	r18, r8
    453c:	40 e0       	ldi	r20, 0x00	; 0
    453e:	50 e0       	ldi	r21, 0x00	; 0
    4540:	60 e0       	ldi	r22, 0x00	; 0
    4542:	70 e0       	ldi	r23, 0x00	; 0
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	a9 80       	ldd	r10, Y+1	; 0x01
    454a:	ba 80       	ldd	r11, Y+2	; 0x02
    454c:	cb 80       	ldd	r12, Y+3	; 0x03
    454e:	dc 80       	ldd	r13, Y+4	; 0x04
    4550:	ed 80       	ldd	r14, Y+5	; 0x05
    4552:	fe 80       	ldd	r15, Y+6	; 0x06
    4554:	0f 81       	ldd	r16, Y+7	; 0x07
    4556:	18 85       	ldd	r17, Y+8	; 0x08
    4558:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    455c:	29 83       	std	Y+1, r18	; 0x01
    455e:	3a 83       	std	Y+2, r19	; 0x02
    4560:	4b 83       	std	Y+3, r20	; 0x03
    4562:	5c 83       	std	Y+4, r21	; 0x04
    4564:	6d 83       	std	Y+5, r22	; 0x05
    4566:	7e 83       	std	Y+6, r23	; 0x06
    4568:	8f 83       	std	Y+7, r24	; 0x07
    456a:	98 87       	std	Y+8, r25	; 0x08
        length -= write_length;
    456c:	48 18       	sub	r4, r8
    456e:	59 08       	sbc	r5, r9

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    4570:	31 e0       	ldi	r19, 0x01	; 1
    4572:	30 93 7d 02 	sts	0x027D, r19	; 0x80027d <raw_block_written>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    4576:	41 14       	cp	r4, r1
    4578:	51 04       	cpc	r5, r1
    457a:	09 f0       	breq	.+2      	; 0x457e <sd_raw_write+0x260>
    457c:	fd ce       	rjmp	.-518    	; 0x4378 <sd_raw_write+0x5a>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	03 c0       	rjmp	.+6      	; 0x4588 <sd_raw_write+0x26a>
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	01 c0       	rjmp	.+2      	; 0x4588 <sd_raw_write+0x26a>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    4586:	81 e0       	ldi	r24, 0x01	; 1
        raw_block_written = 1;
#endif
    }

    return 1;
}
    4588:	69 96       	adiw	r28, 0x19	; 25
    458a:	0f b6       	in	r0, 0x3f	; 63
    458c:	f8 94       	cli
    458e:	de bf       	out	0x3e, r29	; 62
    4590:	0f be       	out	0x3f, r0	; 63
    4592:	cd bf       	out	0x3d, r28	; 61
    4594:	df 91       	pop	r29
    4596:	cf 91       	pop	r28
    4598:	1f 91       	pop	r17
    459a:	0f 91       	pop	r16
    459c:	ff 90       	pop	r15
    459e:	ef 90       	pop	r14
    45a0:	df 90       	pop	r13
    45a2:	cf 90       	pop	r12
    45a4:	bf 90       	pop	r11
    45a6:	af 90       	pop	r10
    45a8:	9f 90       	pop	r9
    45aa:	8f 90       	pop	r8
    45ac:	7f 90       	pop	r7
    45ae:	6f 90       	pop	r6
    45b0:	5f 90       	pop	r5
    45b2:	4f 90       	pop	r4
    45b4:	3f 90       	pop	r3
    45b6:	2f 90       	pop	r2
    45b8:	08 95       	ret

000045ba <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    45ba:	2f 92       	push	r2
    45bc:	3f 92       	push	r3
    45be:	4f 92       	push	r4
    45c0:	5f 92       	push	r5
    45c2:	6f 92       	push	r6
    45c4:	7f 92       	push	r7
    45c6:	8f 92       	push	r8
    45c8:	9f 92       	push	r9
    45ca:	af 92       	push	r10
    45cc:	bf 92       	push	r11
    45ce:	cf 92       	push	r12
    45d0:	df 92       	push	r13
    45d2:	ef 92       	push	r14
    45d4:	ff 92       	push	r15
    45d6:	0f 93       	push	r16
    45d8:	1f 93       	push	r17
    45da:	cf 93       	push	r28
    45dc:	df 93       	push	r29
    45de:	cd b7       	in	r28, 0x3d	; 61
    45e0:	de b7       	in	r29, 0x3e	; 62
    45e2:	28 97       	sbiw	r28, 0x08	; 8
    45e4:	0f b6       	in	r0, 0x3f	; 63
    45e6:	f8 94       	cli
    45e8:	de bf       	out	0x3e, r29	; 62
    45ea:	0f be       	out	0x3f, r0	; 63
    45ec:	cd bf       	out	0x3d, r28	; 61
    45ee:	56 2e       	mov	r5, r22
    45f0:	47 2e       	mov	r4, r23
    45f2:	1a 83       	std	Y+2, r17	; 0x02
    45f4:	09 83       	std	Y+1, r16	; 0x01
    45f6:	dc 82       	std	Y+4, r13	; 0x04
    45f8:	cb 82       	std	Y+3, r12	; 0x03
    45fa:	be 82       	std	Y+6, r11	; 0x06
    45fc:	ad 82       	std	Y+5, r10	; 0x05
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    45fe:	01 2b       	or	r16, r17
    4600:	09 f4       	brne	.+2      	; 0x4604 <sd_raw_write_interval+0x4a>
    4602:	48 c0       	rjmp	.+144    	; 0x4694 <sd_raw_write_interval+0xda>
    4604:	cd 28       	or	r12, r13
    4606:	09 f4       	brne	.+2      	; 0x460a <sd_raw_write_interval+0x50>
    4608:	47 c0       	rjmp	.+142    	; 0x4698 <sd_raw_write_interval+0xde>
    460a:	f8 86       	std	Y+8, r15	; 0x08
    460c:	ef 82       	std	Y+7, r14	; 0x07
    460e:	a2 2e       	mov	r10, r18
    4610:	b3 2e       	mov	r11, r19
    4612:	c4 2e       	mov	r12, r20
    4614:	d5 2e       	mov	r13, r21
    4616:	98 2e       	mov	r9, r24
    4618:	89 2e       	mov	r8, r25
    461a:	17 01       	movw	r2, r14
    461c:	32 c0       	rjmp	.+100    	; 0x4682 <sd_raw_write_interval+0xc8>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
    461e:	8f 81       	ldd	r24, Y+7	; 0x07
    4620:	98 85       	ldd	r25, Y+8	; 0x08
    4622:	86 15       	cp	r24, r6
    4624:	97 05       	cpc	r25, r7
    4626:	d0 f1       	brcs	.+116    	; 0x469c <sd_raw_write_interval+0xe2>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    4628:	73 01       	movw	r14, r6
    462a:	09 81       	ldd	r16, Y+1	; 0x01
    462c:	1a 81       	ldd	r17, Y+2	; 0x02
    462e:	2a 2d       	mov	r18, r10
    4630:	3b 2d       	mov	r19, r11
    4632:	4c 2d       	mov	r20, r12
    4634:	5d 2d       	mov	r21, r13
    4636:	65 2d       	mov	r22, r5
    4638:	74 2d       	mov	r23, r4
    463a:	89 2d       	mov	r24, r9
    463c:	98 2d       	mov	r25, r8
    463e:	0e 94 8f 21 	call	0x431e	; 0x431e <sd_raw_write>
    4642:	88 23       	and	r24, r24
    4644:	09 f4       	brne	.+2      	; 0x4648 <sd_raw_write_interval+0x8e>
    4646:	58 c0       	rjmp	.+176    	; 0x46f8 <sd_raw_write_interval+0x13e>
            return 0;

        offset += bytes_to_write;
    4648:	a3 01       	movw	r20, r6
    464a:	26 2d       	mov	r18, r6
    464c:	35 2f       	mov	r19, r21
    464e:	40 e0       	ldi	r20, 0x00	; 0
    4650:	50 e0       	ldi	r21, 0x00	; 0
    4652:	60 e0       	ldi	r22, 0x00	; 0
    4654:	70 e0       	ldi	r23, 0x00	; 0
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	e5 2c       	mov	r14, r5
    465c:	f4 2c       	mov	r15, r4
    465e:	09 2d       	mov	r16, r9
    4660:	18 2d       	mov	r17, r8
    4662:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__adddi3>
    4666:	a2 2e       	mov	r10, r18
    4668:	b3 2e       	mov	r11, r19
    466a:	c4 2e       	mov	r12, r20
    466c:	d5 2e       	mov	r13, r21
    466e:	56 2e       	mov	r5, r22
    4670:	47 2e       	mov	r4, r23
    4672:	98 2e       	mov	r9, r24
    4674:	89 2e       	mov	r8, r25
        length -= bytes_to_write;
    4676:	ef 81       	ldd	r30, Y+7	; 0x07
    4678:	f8 85       	ldd	r31, Y+8	; 0x08
    467a:	e6 19       	sub	r30, r6
    467c:	f7 09       	sbc	r31, r7
    467e:	f8 87       	std	Y+8, r31	; 0x08
    4680:	ef 83       	std	Y+7, r30	; 0x07

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    4682:	21 14       	cp	r2, r1
    4684:	31 04       	cpc	r3, r1
    4686:	21 f1       	breq	.+72     	; 0x46d0 <sd_raw_write_interval+0x116>
    4688:	8f 81       	ldd	r24, Y+7	; 0x07
    468a:	98 85       	ldd	r25, Y+8	; 0x08
    468c:	89 2b       	or	r24, r25
    468e:	61 f4       	brne	.+24     	; 0x46a8 <sd_raw_write_interval+0xee>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	32 c0       	rjmp	.+100    	; 0x46f8 <sd_raw_write_interval+0x13e>
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
        return 0;
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	30 c0       	rjmp	.+96     	; 0x46f8 <sd_raw_write_interval+0x13e>
    4698:	80 e0       	ldi	r24, 0x00	; 0
    469a:	2e c0       	rjmp	.+92     	; 0x46f8 <sd_raw_write_interval+0x13e>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
            return 0;
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	2c c0       	rjmp	.+88     	; 0x46f8 <sd_raw_write_interval+0x13e>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	2a c0       	rjmp	.+84     	; 0x46f8 <sd_raw_write_interval+0x13e>
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	28 c0       	rjmp	.+80     	; 0x46f8 <sd_raw_write_interval+0x13e>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    46a8:	ed 80       	ldd	r14, Y+5	; 0x05
    46aa:	fe 80       	ldd	r15, Y+6	; 0x06
    46ac:	0a 2d       	mov	r16, r10
    46ae:	1b 2d       	mov	r17, r11
    46b0:	2c 2d       	mov	r18, r12
    46b2:	3d 2d       	mov	r19, r13
    46b4:	45 2d       	mov	r20, r5
    46b6:	54 2d       	mov	r21, r4
    46b8:	69 2d       	mov	r22, r9
    46ba:	78 2d       	mov	r23, r8
    46bc:	89 81       	ldd	r24, Y+1	; 0x01
    46be:	9a 81       	ldd	r25, Y+2	; 0x02
    46c0:	eb 81       	ldd	r30, Y+3	; 0x03
    46c2:	fc 81       	ldd	r31, Y+4	; 0x04
    46c4:	09 95       	icall
    46c6:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    46c8:	89 2b       	or	r24, r25
    46ca:	09 f0       	breq	.+2      	; 0x46ce <sd_raw_write_interval+0x114>
    46cc:	a8 cf       	rjmp	.-176    	; 0x461e <sd_raw_write_interval+0x64>
    46ce:	e8 cf       	rjmp	.-48     	; 0x46a0 <sd_raw_write_interval+0xe6>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    46d0:	ed 80       	ldd	r14, Y+5	; 0x05
    46d2:	fe 80       	ldd	r15, Y+6	; 0x06
    46d4:	0a 2d       	mov	r16, r10
    46d6:	1b 2d       	mov	r17, r11
    46d8:	2c 2d       	mov	r18, r12
    46da:	3d 2d       	mov	r19, r13
    46dc:	45 2d       	mov	r20, r5
    46de:	54 2d       	mov	r21, r4
    46e0:	69 2d       	mov	r22, r9
    46e2:	78 2d       	mov	r23, r8
    46e4:	89 81       	ldd	r24, Y+1	; 0x01
    46e6:	9a 81       	ldd	r25, Y+2	; 0x02
    46e8:	eb 81       	ldd	r30, Y+3	; 0x03
    46ea:	fc 81       	ldd	r31, Y+4	; 0x04
    46ec:	09 95       	icall
    46ee:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    46f0:	89 2b       	or	r24, r25
    46f2:	09 f0       	breq	.+2      	; 0x46f6 <sd_raw_write_interval+0x13c>
    46f4:	99 cf       	rjmp	.-206    	; 0x4628 <sd_raw_write_interval+0x6e>
    46f6:	d6 cf       	rjmp	.-84     	; 0x46a4 <sd_raw_write_interval+0xea>
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    46f8:	28 96       	adiw	r28, 0x08	; 8
    46fa:	0f b6       	in	r0, 0x3f	; 63
    46fc:	f8 94       	cli
    46fe:	de bf       	out	0x3e, r29	; 62
    4700:	0f be       	out	0x3f, r0	; 63
    4702:	cd bf       	out	0x3d, r28	; 61
    4704:	df 91       	pop	r29
    4706:	cf 91       	pop	r28
    4708:	1f 91       	pop	r17
    470a:	0f 91       	pop	r16
    470c:	ff 90       	pop	r15
    470e:	ef 90       	pop	r14
    4710:	df 90       	pop	r13
    4712:	cf 90       	pop	r12
    4714:	bf 90       	pop	r11
    4716:	af 90       	pop	r10
    4718:	9f 90       	pop	r9
    471a:	8f 90       	pop	r8
    471c:	7f 90       	pop	r7
    471e:	6f 90       	pop	r6
    4720:	5f 90       	pop	r5
    4722:	4f 90       	pop	r4
    4724:	3f 90       	pop	r3
    4726:	2f 90       	pop	r2
    4728:	08 95       	ret

0000472a <TM1637_start>:

void
TM1637_set_brightness(const uint8_t value)
{

	TM1637_send_config(_config & TM1637_SET_DISPLAY_ON,
    472a:	5c 9a       	sbi	0x0b, 4	; 11
    472c:	5b 9a       	sbi	0x0b, 3	; 11
    472e:	8d e0       	ldi	r24, 0x0D	; 13
    4730:	8a 95       	dec	r24
    4732:	f1 f7       	brne	.-4      	; 0x4730 <TM1637_start+0x6>
    4734:	00 00       	nop
    4736:	5c 98       	cbi	0x0b, 4	; 11
    4738:	08 95       	ret

0000473a <TM1637_stop>:
    473a:	5b 98       	cbi	0x0b, 3	; 11
    473c:	8d e0       	ldi	r24, 0x0D	; 13
    473e:	8a 95       	dec	r24
    4740:	f1 f7       	brne	.-4      	; 0x473e <TM1637_stop+0x4>
    4742:	00 00       	nop
    4744:	5c 98       	cbi	0x0b, 4	; 11
    4746:	8d e0       	ldi	r24, 0x0D	; 13
    4748:	8a 95       	dec	r24
    474a:	f1 f7       	brne	.-4      	; 0x4748 <TM1637_stop+0xe>
    474c:	00 00       	nop
    474e:	5b 9a       	sbi	0x0b, 3	; 11
    4750:	8d e0       	ldi	r24, 0x0D	; 13
    4752:	8a 95       	dec	r24
    4754:	f1 f7       	brne	.-4      	; 0x4752 <TM1637_stop+0x18>
    4756:	00 00       	nop
    4758:	5c 9a       	sbi	0x0b, 4	; 11
    475a:	08 95       	ret

0000475c <TM1637_write_byte>:
    475c:	98 e0       	ldi	r25, 0x08	; 8
    475e:	5b 98       	cbi	0x0b, 3	; 11
    4760:	2d e0       	ldi	r18, 0x0D	; 13
    4762:	2a 95       	dec	r18
    4764:	f1 f7       	brne	.-4      	; 0x4762 <TM1637_write_byte+0x6>
    4766:	00 00       	nop
    4768:	80 ff       	sbrs	r24, 0
    476a:	02 c0       	rjmp	.+4      	; 0x4770 <TM1637_write_byte+0x14>
    476c:	5c 9a       	sbi	0x0b, 4	; 11
    476e:	01 c0       	rjmp	.+2      	; 0x4772 <TM1637_write_byte+0x16>
    4770:	5c 98       	cbi	0x0b, 4	; 11
    4772:	5b 9a       	sbi	0x0b, 3	; 11
    4774:	2d e0       	ldi	r18, 0x0D	; 13
    4776:	2a 95       	dec	r18
    4778:	f1 f7       	brne	.-4      	; 0x4776 <TM1637_write_byte+0x1a>
    477a:	00 00       	nop
    477c:	86 95       	lsr	r24
    477e:	91 50       	subi	r25, 0x01	; 1
    4780:	71 f7       	brne	.-36     	; 0x475e <TM1637_write_byte+0x2>
    4782:	5b 98       	cbi	0x0b, 3	; 11
    4784:	54 98       	cbi	0x0a, 4	; 10
    4786:	5c 9a       	sbi	0x0b, 4	; 11
    4788:	8d e0       	ldi	r24, 0x0D	; 13
    478a:	8a 95       	dec	r24
    478c:	f1 f7       	brne	.-4      	; 0x478a <TM1637_write_byte+0x2e>
    478e:	00 00       	nop
    4790:	29 b1       	in	r18, 0x09	; 9
    4792:	20 71       	andi	r18, 0x10	; 16
    4794:	30 e0       	ldi	r19, 0x00	; 0
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	12 16       	cp	r1, r18
    479a:	13 06       	cpc	r1, r19
    479c:	0c f0       	brlt	.+2      	; 0x47a0 <TM1637_write_byte+0x44>
    479e:	80 e0       	ldi	r24, 0x00	; 0
    47a0:	12 16       	cp	r1, r18
    47a2:	13 06       	cpc	r1, r19
    47a4:	14 f4       	brge	.+4      	; 0x47aa <TM1637_write_byte+0x4e>
    47a6:	54 9a       	sbi	0x0a, 4	; 10
    47a8:	5c 98       	cbi	0x0b, 4	; 11
    47aa:	9d e0       	ldi	r25, 0x0D	; 13
    47ac:	9a 95       	dec	r25
    47ae:	f1 f7       	brne	.-4      	; 0x47ac <TM1637_write_byte+0x50>
    47b0:	00 00       	nop
    47b2:	5b 9a       	sbi	0x0b, 3	; 11
    47b4:	2d e0       	ldi	r18, 0x0D	; 13
    47b6:	2a 95       	dec	r18
    47b8:	f1 f7       	brne	.-4      	; 0x47b6 <TM1637_write_byte+0x5a>
    47ba:	00 00       	nop
    47bc:	5b 98       	cbi	0x0b, 3	; 11
    47be:	9d e0       	ldi	r25, 0x0D	; 13
    47c0:	9a 95       	dec	r25
    47c2:	f1 f7       	brne	.-4      	; 0x47c0 <TM1637_write_byte+0x64>
    47c4:	00 00       	nop
    47c6:	54 9a       	sbi	0x0a, 4	; 10
    47c8:	08 95       	ret

000047ca <TM1637_send_config>:
    47ca:	cf 93       	push	r28
    47cc:	81 11       	cpse	r24, r1
    47ce:	02 c0       	rjmp	.+4      	; 0x47d4 <TM1637_send_config+0xa>
    47d0:	c0 e0       	ldi	r28, 0x00	; 0
    47d2:	01 c0       	rjmp	.+2      	; 0x47d6 <TM1637_send_config+0xc>
    47d4:	c8 e0       	ldi	r28, 0x08	; 8
    47d6:	68 30       	cpi	r22, 0x08	; 8
    47d8:	08 f0       	brcs	.+2      	; 0x47dc <TM1637_send_config+0x12>
    47da:	67 e0       	ldi	r22, 0x07	; 7
    47dc:	c6 2b       	or	r28, r22
    47de:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <_config>
    47e2:	0e 94 95 23 	call	0x472a	; 0x472a <TM1637_start>
    47e6:	8c 2f       	mov	r24, r28
    47e8:	80 68       	ori	r24, 0x80	; 128
    47ea:	0e 94 ae 23 	call	0x475c	; 0x475c <TM1637_write_byte>
    47ee:	0e 94 9d 23 	call	0x473a	; 0x473a <TM1637_stop>
    47f2:	cf 91       	pop	r28
    47f4:	08 95       	ret

000047f6 <TM1637_init>:
    47f6:	9a b1       	in	r25, 0x0a	; 10
    47f8:	98 61       	ori	r25, 0x18	; 24
    47fa:	9a b9       	out	0x0a, r25	; 10
    47fc:	9b b1       	in	r25, 0x0b	; 11
    47fe:	97 7e       	andi	r25, 0xE7	; 231
    4800:	9b b9       	out	0x0b, r25	; 11
    4802:	0e 94 e5 23 	call	0x47ca	; 0x47ca <TM1637_send_config>
    4806:	08 95       	ret

00004808 <TM1637_display_segments>:
		value & TM1637_BRIGHTNESS_MAX);
}

void
TM1637_display_segments(const uint8_t position, const uint8_t segments)
{
    4808:	cf 93       	push	r28
    480a:	df 93       	push	r29
    480c:	c8 2f       	mov	r28, r24
    480e:	d6 2f       	mov	r29, r22

void
TM1637_send_command(const uint8_t value)
{

	TM1637_start();
    4810:	0e 94 95 23 	call	0x472a	; 0x472a <TM1637_start>
	TM1637_write_byte(value);
    4814:	84 e4       	ldi	r24, 0x44	; 68
    4816:	0e 94 ae 23 	call	0x475c	; 0x475c <TM1637_write_byte>
	TM1637_stop();
    481a:	0e 94 9d 23 	call	0x473a	; 0x473a <TM1637_stop>
void
TM1637_display_segments(const uint8_t position, const uint8_t segments)
{

	TM1637_send_command(TM1637_CMD_SET_DATA | TM1637_SET_DATA_F_ADDR);
	TM1637_start();
    481e:	0e 94 95 23 	call	0x472a	; 0x472a <TM1637_start>
	TM1637_write_byte(TM1637_CMD_SET_ADDR | (position & (TM1637_POSITION_MAX - 1)));
    4822:	8c 2f       	mov	r24, r28
    4824:	83 70       	andi	r24, 0x03	; 3
    4826:	80 6c       	ori	r24, 0xC0	; 192
    4828:	0e 94 ae 23 	call	0x475c	; 0x475c <TM1637_write_byte>
	TM1637_write_byte(segments);
    482c:	8d 2f       	mov	r24, r29
    482e:	0e 94 ae 23 	call	0x475c	; 0x475c <TM1637_write_byte>
	TM1637_stop();
    4832:	0e 94 9d 23 	call	0x473a	; 0x473a <TM1637_stop>
}
    4836:	df 91       	pop	r29
    4838:	cf 91       	pop	r28
    483a:	08 95       	ret

0000483c <TM1637_display_digit>:

void
TM1637_display_digit(const uint8_t position, const uint8_t digit)
{
	uint8_t segments = (digit < 10 ? pgm_read_byte_near((uint8_t *)&_digit2segments + digit) : 0x00);
    483c:	6a 30       	cpi	r22, 0x0A	; 10
    483e:	30 f4       	brcc	.+12     	; 0x484c <TM1637_display_digit+0x10>
    4840:	e6 2f       	mov	r30, r22
    4842:	f0 e0       	ldi	r31, 0x00	; 0
    4844:	ea 53       	subi	r30, 0x3A	; 58
    4846:	fe 4f       	sbci	r31, 0xFE	; 254
    4848:	64 91       	lpm	r22, Z
    484a:	01 c0       	rjmp	.+2      	; 0x484e <TM1637_display_digit+0x12>
    484c:	60 e0       	ldi	r22, 0x00	; 0

	if (position == 0x01) {
    484e:	81 30       	cpi	r24, 0x01	; 1
    4850:	31 f4       	brne	.+12     	; 0x485e <TM1637_display_digit+0x22>
		segments = segments | (_segments & 0x80);
    4852:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    4856:	90 78       	andi	r25, 0x80	; 128
    4858:	69 2b       	or	r22, r25
		_segments = segments;
    485a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
	}

	TM1637_display_segments(position, segments);
    485e:	0e 94 04 24 	call	0x4808	; 0x4808 <TM1637_display_segments>
    4862:	08 95       	ret

00004864 <TM1637_display_colon>:

void
TM1637_display_colon(const uint8_t value)
{

	if (value) {
    4864:	88 23       	and	r24, r24
    4866:	31 f0       	breq	.+12     	; 0x4874 <TM1637_display_colon+0x10>
		_segments |= 0x80;
    4868:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    486c:	80 68       	ori	r24, 0x80	; 128
    486e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    4872:	05 c0       	rjmp	.+10     	; 0x487e <TM1637_display_colon+0x1a>
	} else {
		_segments &= ~0x80;
    4874:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4878:	8f 77       	andi	r24, 0x7F	; 127
    487a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	TM1637_display_segments(0x01, _segments);
    487e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	0e 94 04 24 	call	0x4808	; 0x4808 <TM1637_display_segments>
    4888:	08 95       	ret

0000488a <TM1637_clear>:
}

void
TM1637_clear(void)
{
    488a:	cf 93       	push	r28
	uint8_t i;

	for (i = 0; i < TM1637_POSITION_MAX; ++i) {
    488c:	c0 e0       	ldi	r28, 0x00	; 0
		TM1637_display_segments(i, 0x00);
    488e:	60 e0       	ldi	r22, 0x00	; 0
    4890:	8c 2f       	mov	r24, r28
    4892:	0e 94 04 24 	call	0x4808	; 0x4808 <TM1637_display_segments>
void
TM1637_clear(void)
{
	uint8_t i;

	for (i = 0; i < TM1637_POSITION_MAX; ++i) {
    4896:	cf 5f       	subi	r28, 0xFF	; 255
    4898:	c4 30       	cpi	r28, 0x04	; 4
    489a:	c9 f7       	brne	.-14     	; 0x488e <TM1637_clear+0x4>
		TM1637_display_segments(i, 0x00);
	}
}
    489c:	cf 91       	pop	r28
    489e:	08 95       	ret

000048a0 <TM1637_2_start>:

void
TM1637_2_set_brightness(const uint8_t value)
{

	TM1637_2_send_config(_config & TM1637_2_SET_DISPLAY_ON,
    48a0:	5e 9a       	sbi	0x0b, 6	; 11
    48a2:	5d 9a       	sbi	0x0b, 5	; 11
    48a4:	8d e0       	ldi	r24, 0x0D	; 13
    48a6:	8a 95       	dec	r24
    48a8:	f1 f7       	brne	.-4      	; 0x48a6 <TM1637_2_start+0x6>
    48aa:	00 00       	nop
    48ac:	5e 98       	cbi	0x0b, 6	; 11
    48ae:	08 95       	ret

000048b0 <TM1637_2_stop>:
    48b0:	5d 98       	cbi	0x0b, 5	; 11
    48b2:	8d e0       	ldi	r24, 0x0D	; 13
    48b4:	8a 95       	dec	r24
    48b6:	f1 f7       	brne	.-4      	; 0x48b4 <TM1637_2_stop+0x4>
    48b8:	00 00       	nop
    48ba:	5e 98       	cbi	0x0b, 6	; 11
    48bc:	8d e0       	ldi	r24, 0x0D	; 13
    48be:	8a 95       	dec	r24
    48c0:	f1 f7       	brne	.-4      	; 0x48be <TM1637_2_stop+0xe>
    48c2:	00 00       	nop
    48c4:	5d 9a       	sbi	0x0b, 5	; 11
    48c6:	8d e0       	ldi	r24, 0x0D	; 13
    48c8:	8a 95       	dec	r24
    48ca:	f1 f7       	brne	.-4      	; 0x48c8 <TM1637_2_stop+0x18>
    48cc:	00 00       	nop
    48ce:	5e 9a       	sbi	0x0b, 6	; 11
    48d0:	08 95       	ret

000048d2 <TM1637_2_write_byte>:
    48d2:	98 e0       	ldi	r25, 0x08	; 8
    48d4:	5d 98       	cbi	0x0b, 5	; 11
    48d6:	2d e0       	ldi	r18, 0x0D	; 13
    48d8:	2a 95       	dec	r18
    48da:	f1 f7       	brne	.-4      	; 0x48d8 <TM1637_2_write_byte+0x6>
    48dc:	00 00       	nop
    48de:	80 ff       	sbrs	r24, 0
    48e0:	02 c0       	rjmp	.+4      	; 0x48e6 <TM1637_2_write_byte+0x14>
    48e2:	5e 9a       	sbi	0x0b, 6	; 11
    48e4:	01 c0       	rjmp	.+2      	; 0x48e8 <TM1637_2_write_byte+0x16>
    48e6:	5e 98       	cbi	0x0b, 6	; 11
    48e8:	5d 9a       	sbi	0x0b, 5	; 11
    48ea:	2d e0       	ldi	r18, 0x0D	; 13
    48ec:	2a 95       	dec	r18
    48ee:	f1 f7       	brne	.-4      	; 0x48ec <TM1637_2_write_byte+0x1a>
    48f0:	00 00       	nop
    48f2:	86 95       	lsr	r24
    48f4:	91 50       	subi	r25, 0x01	; 1
    48f6:	71 f7       	brne	.-36     	; 0x48d4 <TM1637_2_write_byte+0x2>
    48f8:	5d 98       	cbi	0x0b, 5	; 11
    48fa:	56 98       	cbi	0x0a, 6	; 10
    48fc:	5e 9a       	sbi	0x0b, 6	; 11
    48fe:	8d e0       	ldi	r24, 0x0D	; 13
    4900:	8a 95       	dec	r24
    4902:	f1 f7       	brne	.-4      	; 0x4900 <TM1637_2_write_byte+0x2e>
    4904:	00 00       	nop
    4906:	29 b1       	in	r18, 0x09	; 9
    4908:	20 74       	andi	r18, 0x40	; 64
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	81 e0       	ldi	r24, 0x01	; 1
    490e:	12 16       	cp	r1, r18
    4910:	13 06       	cpc	r1, r19
    4912:	0c f0       	brlt	.+2      	; 0x4916 <TM1637_2_write_byte+0x44>
    4914:	80 e0       	ldi	r24, 0x00	; 0
    4916:	12 16       	cp	r1, r18
    4918:	13 06       	cpc	r1, r19
    491a:	14 f4       	brge	.+4      	; 0x4920 <TM1637_2_write_byte+0x4e>
    491c:	56 9a       	sbi	0x0a, 6	; 10
    491e:	5e 98       	cbi	0x0b, 6	; 11
    4920:	9d e0       	ldi	r25, 0x0D	; 13
    4922:	9a 95       	dec	r25
    4924:	f1 f7       	brne	.-4      	; 0x4922 <TM1637_2_write_byte+0x50>
    4926:	00 00       	nop
    4928:	5d 9a       	sbi	0x0b, 5	; 11
    492a:	2d e0       	ldi	r18, 0x0D	; 13
    492c:	2a 95       	dec	r18
    492e:	f1 f7       	brne	.-4      	; 0x492c <TM1637_2_write_byte+0x5a>
    4930:	00 00       	nop
    4932:	5d 98       	cbi	0x0b, 5	; 11
    4934:	9d e0       	ldi	r25, 0x0D	; 13
    4936:	9a 95       	dec	r25
    4938:	f1 f7       	brne	.-4      	; 0x4936 <TM1637_2_write_byte+0x64>
    493a:	00 00       	nop
    493c:	56 9a       	sbi	0x0a, 6	; 10
    493e:	08 95       	ret

00004940 <TM1637_2_send_config>:
    4940:	cf 93       	push	r28
    4942:	81 11       	cpse	r24, r1
    4944:	02 c0       	rjmp	.+4      	; 0x494a <TM1637_2_send_config+0xa>
    4946:	c0 e0       	ldi	r28, 0x00	; 0
    4948:	01 c0       	rjmp	.+2      	; 0x494c <TM1637_2_send_config+0xc>
    494a:	c8 e0       	ldi	r28, 0x08	; 8
    494c:	68 30       	cpi	r22, 0x08	; 8
    494e:	08 f0       	brcs	.+2      	; 0x4952 <TM1637_2_send_config+0x12>
    4950:	67 e0       	ldi	r22, 0x07	; 7
    4952:	c6 2b       	or	r28, r22
    4954:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <_config>
    4958:	0e 94 50 24 	call	0x48a0	; 0x48a0 <TM1637_2_start>
    495c:	8c 2f       	mov	r24, r28
    495e:	80 68       	ori	r24, 0x80	; 128
    4960:	0e 94 69 24 	call	0x48d2	; 0x48d2 <TM1637_2_write_byte>
    4964:	0e 94 58 24 	call	0x48b0	; 0x48b0 <TM1637_2_stop>
    4968:	cf 91       	pop	r28
    496a:	08 95       	ret

0000496c <TM1637_2_init>:
    496c:	9a b1       	in	r25, 0x0a	; 10
    496e:	90 66       	ori	r25, 0x60	; 96
    4970:	9a b9       	out	0x0a, r25	; 10
    4972:	9b b1       	in	r25, 0x0b	; 11
    4974:	9f 79       	andi	r25, 0x9F	; 159
    4976:	9b b9       	out	0x0b, r25	; 11
    4978:	0e 94 a0 24 	call	0x4940	; 0x4940 <TM1637_2_send_config>
    497c:	08 95       	ret

0000497e <TM1637_2_display_segments>:
		value & TM1637_2_BRIGHTNESS_MAX);
}

void
TM1637_2_display_segments(const uint8_t position, const uint8_t segments)
{
    497e:	cf 93       	push	r28
    4980:	df 93       	push	r29
    4982:	c8 2f       	mov	r28, r24
    4984:	d6 2f       	mov	r29, r22

void
TM1637_2_send_command(const uint8_t value)
{

	TM1637_2_start();
    4986:	0e 94 50 24 	call	0x48a0	; 0x48a0 <TM1637_2_start>
	TM1637_2_write_byte(value);
    498a:	84 e4       	ldi	r24, 0x44	; 68
    498c:	0e 94 69 24 	call	0x48d2	; 0x48d2 <TM1637_2_write_byte>
	TM1637_2_stop();
    4990:	0e 94 58 24 	call	0x48b0	; 0x48b0 <TM1637_2_stop>
void
TM1637_2_display_segments(const uint8_t position, const uint8_t segments)
{

	TM1637_2_send_command(TM1637_2_CMD_SET_DATA | TM1637_2_SET_DATA_F_ADDR);
	TM1637_2_start();
    4994:	0e 94 50 24 	call	0x48a0	; 0x48a0 <TM1637_2_start>
	TM1637_2_write_byte(TM1637_2_CMD_SET_ADDR | (position & (TM1637_2_POSITION_MAX - 1)));
    4998:	8c 2f       	mov	r24, r28
    499a:	83 70       	andi	r24, 0x03	; 3
    499c:	80 6c       	ori	r24, 0xC0	; 192
    499e:	0e 94 69 24 	call	0x48d2	; 0x48d2 <TM1637_2_write_byte>
	TM1637_2_write_byte(segments);
    49a2:	8d 2f       	mov	r24, r29
    49a4:	0e 94 69 24 	call	0x48d2	; 0x48d2 <TM1637_2_write_byte>
	TM1637_2_stop();
    49a8:	0e 94 58 24 	call	0x48b0	; 0x48b0 <TM1637_2_stop>
}
    49ac:	df 91       	pop	r29
    49ae:	cf 91       	pop	r28
    49b0:	08 95       	ret

000049b2 <TM1637_2_display_digit>:

void
TM1637_2_display_digit(const uint8_t position, const uint8_t digit)
{
	uint8_t segments = (digit < 10 ? pgm_read_byte_near((uint8_t *)&_digit2_2segments + digit) : 0x00);
    49b2:	6a 30       	cpi	r22, 0x0A	; 10
    49b4:	30 f4       	brcc	.+12     	; 0x49c2 <TM1637_2_display_digit+0x10>
    49b6:	e6 2f       	mov	r30, r22
    49b8:	f0 e0       	ldi	r31, 0x00	; 0
    49ba:	e0 53       	subi	r30, 0x30	; 48
    49bc:	fe 4f       	sbci	r31, 0xFE	; 254
    49be:	64 91       	lpm	r22, Z
    49c0:	01 c0       	rjmp	.+2      	; 0x49c4 <TM1637_2_display_digit+0x12>
    49c2:	60 e0       	ldi	r22, 0x00	; 0

	if (position == 0x01) {
    49c4:	81 30       	cpi	r24, 0x01	; 1
    49c6:	31 f4       	brne	.+12     	; 0x49d4 <TM1637_2_display_digit+0x22>
		segments = segments | (_segments & 0x80);
    49c8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_segments>
    49cc:	90 78       	andi	r25, 0x80	; 128
    49ce:	69 2b       	or	r22, r25
		_segments = segments;
    49d0:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_segments>
	}

	TM1637_2_display_segments(position, segments);
    49d4:	0e 94 bf 24 	call	0x497e	; 0x497e <TM1637_2_display_segments>
    49d8:	08 95       	ret

000049da <TM1637_2_display_colon>:

void
TM1637_2_display_colon(const uint8_t value)
{

	if (value) {
    49da:	88 23       	and	r24, r24
    49dc:	31 f0       	breq	.+12     	; 0x49ea <TM1637_2_display_colon+0x10>
		_segments |= 0x80;
    49de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_segments>
    49e2:	80 68       	ori	r24, 0x80	; 128
    49e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_segments>
    49e8:	05 c0       	rjmp	.+10     	; 0x49f4 <TM1637_2_display_colon+0x1a>
	} else {
		_segments &= ~0x80;
    49ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_segments>
    49ee:	8f 77       	andi	r24, 0x7F	; 127
    49f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_segments>
	}
	TM1637_2_display_segments(0x01, _segments);
    49f4:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_segments>
    49f8:	81 e0       	ldi	r24, 0x01	; 1
    49fa:	0e 94 bf 24 	call	0x497e	; 0x497e <TM1637_2_display_segments>
    49fe:	08 95       	ret

00004a00 <TM1637_2_clear>:
}

void
TM1637_2_clear(void)
{
    4a00:	cf 93       	push	r28
	uint8_t i;

	for (i = 0; i < TM1637_2_POSITION_MAX; ++i) {
    4a02:	c0 e0       	ldi	r28, 0x00	; 0
		TM1637_2_display_segments(i, 0x00);
    4a04:	60 e0       	ldi	r22, 0x00	; 0
    4a06:	8c 2f       	mov	r24, r28
    4a08:	0e 94 bf 24 	call	0x497e	; 0x497e <TM1637_2_display_segments>
void
TM1637_2_clear(void)
{
	uint8_t i;

	for (i = 0; i < TM1637_2_POSITION_MAX; ++i) {
    4a0c:	cf 5f       	subi	r28, 0xFF	; 255
    4a0e:	c4 30       	cpi	r28, 0x04	; 4
    4a10:	c9 f7       	brne	.-14     	; 0x4a04 <TM1637_2_clear+0x4>
		TM1637_2_display_segments(i, 0x00);
	}
}
    4a12:	cf 91       	pop	r28
    4a14:	08 95       	ret

00004a16 <uart_init>:
    uint8_t b = UDR;
    if(b == '\r')
        b = '\n';

    return b;
}
    4a16:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    4a1a:	83 e3       	ldi	r24, 0x33	; 51
    4a1c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    4a20:	86 e0       	ldi	r24, 0x06	; 6
    4a22:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    4a26:	88 e9       	ldi	r24, 0x98	; 152
    4a28:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    4a2c:	08 95       	ret

00004a2e <uart_putc>:
    4a2e:	cf 93       	push	r28
    4a30:	c8 2f       	mov	r28, r24
    4a32:	8a 30       	cpi	r24, 0x0A	; 10
    4a34:	19 f4       	brne	.+6      	; 0x4a3c <uart_putc+0xe>
    4a36:	8d e0       	ldi	r24, 0x0D	; 13
    4a38:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>
    4a3c:	e0 ec       	ldi	r30, 0xC0	; 192
    4a3e:	f0 e0       	ldi	r31, 0x00	; 0
    4a40:	80 81       	ld	r24, Z
    4a42:	85 ff       	sbrs	r24, 5
    4a44:	fd cf       	rjmp	.-6      	; 0x4a40 <uart_putc+0x12>
    4a46:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    4a4a:	cf 91       	pop	r28
    4a4c:	08 95       	ret

00004a4e <uart_puts>:
    4a4e:	cf 93       	push	r28
    4a50:	df 93       	push	r29
    4a52:	ec 01       	movw	r28, r24
    4a54:	88 81       	ld	r24, Y
    4a56:	88 23       	and	r24, r24
    4a58:	31 f0       	breq	.+12     	; 0x4a66 <uart_puts+0x18>
    4a5a:	21 96       	adiw	r28, 0x01	; 1
    4a5c:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>
    4a60:	89 91       	ld	r24, Y+
    4a62:	81 11       	cpse	r24, r1
    4a64:	fb cf       	rjmp	.-10     	; 0x4a5c <uart_puts+0xe>
    4a66:	df 91       	pop	r29
    4a68:	cf 91       	pop	r28
    4a6a:	08 95       	ret

00004a6c <uart_puts_p>:
    4a6c:	cf 93       	push	r28
    4a6e:	df 93       	push	r29
    4a70:	ec 01       	movw	r28, r24
    4a72:	21 96       	adiw	r28, 0x01	; 1
    4a74:	fc 01       	movw	r30, r24
    4a76:	84 91       	lpm	r24, Z
    4a78:	88 23       	and	r24, r24
    4a7a:	39 f0       	breq	.+14     	; 0x4a8a <uart_puts_p+0x1e>
    4a7c:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <uart_putc>
    4a80:	fe 01       	movw	r30, r28
    4a82:	84 91       	lpm	r24, Z
    4a84:	21 96       	adiw	r28, 0x01	; 1
    4a86:	81 11       	cpse	r24, r1
    4a88:	f9 cf       	rjmp	.-14     	; 0x4a7c <uart_puts_p+0x10>
    4a8a:	df 91       	pop	r29
    4a8c:	cf 91       	pop	r28
    4a8e:	08 95       	ret

00004a90 <__vector_18>:

EMPTY_INTERRUPT(USART_RXC_vect)
    4a90:	18 95       	reti

00004a92 <__mulsi3>:
    4a92:	db 01       	movw	r26, r22
    4a94:	8f 93       	push	r24
    4a96:	9f 93       	push	r25
    4a98:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <__muluhisi3>
    4a9c:	bf 91       	pop	r27
    4a9e:	af 91       	pop	r26
    4aa0:	a2 9f       	mul	r26, r18
    4aa2:	80 0d       	add	r24, r0
    4aa4:	91 1d       	adc	r25, r1
    4aa6:	a3 9f       	mul	r26, r19
    4aa8:	90 0d       	add	r25, r0
    4aaa:	b2 9f       	mul	r27, r18
    4aac:	90 0d       	add	r25, r0
    4aae:	11 24       	eor	r1, r1
    4ab0:	08 95       	ret

00004ab2 <__udivmodhi4>:
    4ab2:	aa 1b       	sub	r26, r26
    4ab4:	bb 1b       	sub	r27, r27
    4ab6:	51 e1       	ldi	r21, 0x11	; 17
    4ab8:	07 c0       	rjmp	.+14     	; 0x4ac8 <__udivmodhi4_ep>

00004aba <__udivmodhi4_loop>:
    4aba:	aa 1f       	adc	r26, r26
    4abc:	bb 1f       	adc	r27, r27
    4abe:	a6 17       	cp	r26, r22
    4ac0:	b7 07       	cpc	r27, r23
    4ac2:	10 f0       	brcs	.+4      	; 0x4ac8 <__udivmodhi4_ep>
    4ac4:	a6 1b       	sub	r26, r22
    4ac6:	b7 0b       	sbc	r27, r23

00004ac8 <__udivmodhi4_ep>:
    4ac8:	88 1f       	adc	r24, r24
    4aca:	99 1f       	adc	r25, r25
    4acc:	5a 95       	dec	r21
    4ace:	a9 f7       	brne	.-22     	; 0x4aba <__udivmodhi4_loop>
    4ad0:	80 95       	com	r24
    4ad2:	90 95       	com	r25
    4ad4:	bc 01       	movw	r22, r24
    4ad6:	cd 01       	movw	r24, r26
    4ad8:	08 95       	ret

00004ada <__divmodhi4>:
    4ada:	97 fb       	bst	r25, 7
    4adc:	07 2e       	mov	r0, r23
    4ade:	16 f4       	brtc	.+4      	; 0x4ae4 <__divmodhi4+0xa>
    4ae0:	00 94       	com	r0
    4ae2:	07 d0       	rcall	.+14     	; 0x4af2 <__divmodhi4_neg1>
    4ae4:	77 fd       	sbrc	r23, 7
    4ae6:	09 d0       	rcall	.+18     	; 0x4afa <__divmodhi4_neg2>
    4ae8:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <__udivmodhi4>
    4aec:	07 fc       	sbrc	r0, 7
    4aee:	05 d0       	rcall	.+10     	; 0x4afa <__divmodhi4_neg2>
    4af0:	3e f4       	brtc	.+14     	; 0x4b00 <__divmodhi4_exit>

00004af2 <__divmodhi4_neg1>:
    4af2:	90 95       	com	r25
    4af4:	81 95       	neg	r24
    4af6:	9f 4f       	sbci	r25, 0xFF	; 255
    4af8:	08 95       	ret

00004afa <__divmodhi4_neg2>:
    4afa:	70 95       	com	r23
    4afc:	61 95       	neg	r22
    4afe:	7f 4f       	sbci	r23, 0xFF	; 255

00004b00 <__divmodhi4_exit>:
    4b00:	08 95       	ret

00004b02 <__udivmodsi4>:
    4b02:	a1 e2       	ldi	r26, 0x21	; 33
    4b04:	1a 2e       	mov	r1, r26
    4b06:	aa 1b       	sub	r26, r26
    4b08:	bb 1b       	sub	r27, r27
    4b0a:	fd 01       	movw	r30, r26
    4b0c:	0d c0       	rjmp	.+26     	; 0x4b28 <__udivmodsi4_ep>

00004b0e <__udivmodsi4_loop>:
    4b0e:	aa 1f       	adc	r26, r26
    4b10:	bb 1f       	adc	r27, r27
    4b12:	ee 1f       	adc	r30, r30
    4b14:	ff 1f       	adc	r31, r31
    4b16:	a2 17       	cp	r26, r18
    4b18:	b3 07       	cpc	r27, r19
    4b1a:	e4 07       	cpc	r30, r20
    4b1c:	f5 07       	cpc	r31, r21
    4b1e:	20 f0       	brcs	.+8      	; 0x4b28 <__udivmodsi4_ep>
    4b20:	a2 1b       	sub	r26, r18
    4b22:	b3 0b       	sbc	r27, r19
    4b24:	e4 0b       	sbc	r30, r20
    4b26:	f5 0b       	sbc	r31, r21

00004b28 <__udivmodsi4_ep>:
    4b28:	66 1f       	adc	r22, r22
    4b2a:	77 1f       	adc	r23, r23
    4b2c:	88 1f       	adc	r24, r24
    4b2e:	99 1f       	adc	r25, r25
    4b30:	1a 94       	dec	r1
    4b32:	69 f7       	brne	.-38     	; 0x4b0e <__udivmodsi4_loop>
    4b34:	60 95       	com	r22
    4b36:	70 95       	com	r23
    4b38:	80 95       	com	r24
    4b3a:	90 95       	com	r25
    4b3c:	9b 01       	movw	r18, r22
    4b3e:	ac 01       	movw	r20, r24
    4b40:	bd 01       	movw	r22, r26
    4b42:	cf 01       	movw	r24, r30
    4b44:	08 95       	ret

00004b46 <__umulhisi3>:
    4b46:	a2 9f       	mul	r26, r18
    4b48:	b0 01       	movw	r22, r0
    4b4a:	b3 9f       	mul	r27, r19
    4b4c:	c0 01       	movw	r24, r0
    4b4e:	a3 9f       	mul	r26, r19
    4b50:	70 0d       	add	r23, r0
    4b52:	81 1d       	adc	r24, r1
    4b54:	11 24       	eor	r1, r1
    4b56:	91 1d       	adc	r25, r1
    4b58:	b2 9f       	mul	r27, r18
    4b5a:	70 0d       	add	r23, r0
    4b5c:	81 1d       	adc	r24, r1
    4b5e:	11 24       	eor	r1, r1
    4b60:	91 1d       	adc	r25, r1
    4b62:	08 95       	ret

00004b64 <__muluhisi3>:
    4b64:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    4b68:	a5 9f       	mul	r26, r21
    4b6a:	90 0d       	add	r25, r0
    4b6c:	b4 9f       	mul	r27, r20
    4b6e:	90 0d       	add	r25, r0
    4b70:	a4 9f       	mul	r26, r20
    4b72:	80 0d       	add	r24, r0
    4b74:	91 1d       	adc	r25, r1
    4b76:	11 24       	eor	r1, r1
    4b78:	08 95       	ret

00004b7a <__muldi3>:
    4b7a:	df 93       	push	r29
    4b7c:	cf 93       	push	r28
    4b7e:	1f 93       	push	r17
    4b80:	0f 93       	push	r16
    4b82:	9a 9d       	mul	r25, r10
    4b84:	f0 2d       	mov	r31, r0
    4b86:	21 9f       	mul	r18, r17
    4b88:	f0 0d       	add	r31, r0
    4b8a:	8b 9d       	mul	r24, r11
    4b8c:	f0 0d       	add	r31, r0
    4b8e:	8a 9d       	mul	r24, r10
    4b90:	e0 2d       	mov	r30, r0
    4b92:	f1 0d       	add	r31, r1
    4b94:	03 9f       	mul	r16, r19
    4b96:	f0 0d       	add	r31, r0
    4b98:	02 9f       	mul	r16, r18
    4b9a:	e0 0d       	add	r30, r0
    4b9c:	f1 1d       	adc	r31, r1
    4b9e:	4e 9d       	mul	r20, r14
    4ba0:	e0 0d       	add	r30, r0
    4ba2:	f1 1d       	adc	r31, r1
    4ba4:	5e 9d       	mul	r21, r14
    4ba6:	f0 0d       	add	r31, r0
    4ba8:	4f 9d       	mul	r20, r15
    4baa:	f0 0d       	add	r31, r0
    4bac:	7f 93       	push	r23
    4bae:	6f 93       	push	r22
    4bb0:	bf 92       	push	r11
    4bb2:	af 92       	push	r10
    4bb4:	5f 93       	push	r21
    4bb6:	4f 93       	push	r20
    4bb8:	d5 01       	movw	r26, r10
    4bba:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    4bbe:	8b 01       	movw	r16, r22
    4bc0:	ac 01       	movw	r20, r24
    4bc2:	d7 01       	movw	r26, r14
    4bc4:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    4bc8:	eb 01       	movw	r28, r22
    4bca:	e8 0f       	add	r30, r24
    4bcc:	f9 1f       	adc	r31, r25
    4bce:	d6 01       	movw	r26, r12
    4bd0:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__muldi3_6>
    4bd4:	2f 91       	pop	r18
    4bd6:	3f 91       	pop	r19
    4bd8:	d6 01       	movw	r26, r12
    4bda:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    4bde:	c6 0f       	add	r28, r22
    4be0:	d7 1f       	adc	r29, r23
    4be2:	e8 1f       	adc	r30, r24
    4be4:	f9 1f       	adc	r31, r25
    4be6:	af 91       	pop	r26
    4be8:	bf 91       	pop	r27
    4bea:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <__muldi3_6>
    4bee:	2f 91       	pop	r18
    4bf0:	3f 91       	pop	r19
    4bf2:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    4bf6:	c6 0f       	add	r28, r22
    4bf8:	d7 1f       	adc	r29, r23
    4bfa:	e8 1f       	adc	r30, r24
    4bfc:	f9 1f       	adc	r31, r25
    4bfe:	d6 01       	movw	r26, r12
    4c00:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    4c04:	e6 0f       	add	r30, r22
    4c06:	f7 1f       	adc	r31, r23
    4c08:	98 01       	movw	r18, r16
    4c0a:	be 01       	movw	r22, r28
    4c0c:	cf 01       	movw	r24, r30
    4c0e:	11 24       	eor	r1, r1
    4c10:	0f 91       	pop	r16
    4c12:	1f 91       	pop	r17
    4c14:	cf 91       	pop	r28
    4c16:	df 91       	pop	r29
    4c18:	08 95       	ret

00004c1a <__muldi3_6>:
    4c1a:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <__umulhisi3>
    4c1e:	46 0f       	add	r20, r22
    4c20:	57 1f       	adc	r21, r23
    4c22:	c8 1f       	adc	r28, r24
    4c24:	d9 1f       	adc	r29, r25
    4c26:	08 f4       	brcc	.+2      	; 0x4c2a <__muldi3_6+0x10>
    4c28:	31 96       	adiw	r30, 0x01	; 1
    4c2a:	08 95       	ret

00004c2c <__ashldi3>:
    4c2c:	0f 93       	push	r16
    4c2e:	08 30       	cpi	r16, 0x08	; 8
    4c30:	90 f0       	brcs	.+36     	; 0x4c56 <__ashldi3+0x2a>
    4c32:	98 2f       	mov	r25, r24
    4c34:	87 2f       	mov	r24, r23
    4c36:	76 2f       	mov	r23, r22
    4c38:	65 2f       	mov	r22, r21
    4c3a:	54 2f       	mov	r21, r20
    4c3c:	43 2f       	mov	r20, r19
    4c3e:	32 2f       	mov	r19, r18
    4c40:	22 27       	eor	r18, r18
    4c42:	08 50       	subi	r16, 0x08	; 8
    4c44:	f4 cf       	rjmp	.-24     	; 0x4c2e <__ashldi3+0x2>
    4c46:	22 0f       	add	r18, r18
    4c48:	33 1f       	adc	r19, r19
    4c4a:	44 1f       	adc	r20, r20
    4c4c:	55 1f       	adc	r21, r21
    4c4e:	66 1f       	adc	r22, r22
    4c50:	77 1f       	adc	r23, r23
    4c52:	88 1f       	adc	r24, r24
    4c54:	99 1f       	adc	r25, r25
    4c56:	0a 95       	dec	r16
    4c58:	b2 f7       	brpl	.-20     	; 0x4c46 <__ashldi3+0x1a>
    4c5a:	0f 91       	pop	r16
    4c5c:	08 95       	ret

00004c5e <__ashrdi3>:
    4c5e:	97 fb       	bst	r25, 7
    4c60:	10 f8       	bld	r1, 0

00004c62 <__lshrdi3>:
    4c62:	16 94       	lsr	r1
    4c64:	00 08       	sbc	r0, r0
    4c66:	0f 93       	push	r16
    4c68:	08 30       	cpi	r16, 0x08	; 8
    4c6a:	98 f0       	brcs	.+38     	; 0x4c92 <__lshrdi3+0x30>
    4c6c:	08 50       	subi	r16, 0x08	; 8
    4c6e:	23 2f       	mov	r18, r19
    4c70:	34 2f       	mov	r19, r20
    4c72:	45 2f       	mov	r20, r21
    4c74:	56 2f       	mov	r21, r22
    4c76:	67 2f       	mov	r22, r23
    4c78:	78 2f       	mov	r23, r24
    4c7a:	89 2f       	mov	r24, r25
    4c7c:	90 2d       	mov	r25, r0
    4c7e:	f4 cf       	rjmp	.-24     	; 0x4c68 <__lshrdi3+0x6>
    4c80:	05 94       	asr	r0
    4c82:	97 95       	ror	r25
    4c84:	87 95       	ror	r24
    4c86:	77 95       	ror	r23
    4c88:	67 95       	ror	r22
    4c8a:	57 95       	ror	r21
    4c8c:	47 95       	ror	r20
    4c8e:	37 95       	ror	r19
    4c90:	27 95       	ror	r18
    4c92:	0a 95       	dec	r16
    4c94:	aa f7       	brpl	.-22     	; 0x4c80 <__lshrdi3+0x1e>
    4c96:	0f 91       	pop	r16
    4c98:	08 95       	ret

00004c9a <__adddi3>:
    4c9a:	2a 0d       	add	r18, r10
    4c9c:	3b 1d       	adc	r19, r11
    4c9e:	4c 1d       	adc	r20, r12
    4ca0:	5d 1d       	adc	r21, r13
    4ca2:	6e 1d       	adc	r22, r14
    4ca4:	7f 1d       	adc	r23, r15
    4ca6:	80 1f       	adc	r24, r16
    4ca8:	91 1f       	adc	r25, r17
    4caa:	08 95       	ret

00004cac <__adddi3_s8>:
    4cac:	00 24       	eor	r0, r0
    4cae:	a7 fd       	sbrc	r26, 7
    4cb0:	00 94       	com	r0
    4cb2:	2a 0f       	add	r18, r26
    4cb4:	30 1d       	adc	r19, r0
    4cb6:	40 1d       	adc	r20, r0
    4cb8:	50 1d       	adc	r21, r0
    4cba:	60 1d       	adc	r22, r0
    4cbc:	70 1d       	adc	r23, r0
    4cbe:	80 1d       	adc	r24, r0
    4cc0:	90 1d       	adc	r25, r0
    4cc2:	08 95       	ret

00004cc4 <__subdi3>:
    4cc4:	2a 19       	sub	r18, r10
    4cc6:	3b 09       	sbc	r19, r11
    4cc8:	4c 09       	sbc	r20, r12
    4cca:	5d 09       	sbc	r21, r13
    4ccc:	6e 09       	sbc	r22, r14
    4cce:	7f 09       	sbc	r23, r15
    4cd0:	80 0b       	sbc	r24, r16
    4cd2:	91 0b       	sbc	r25, r17
    4cd4:	08 95       	ret

00004cd6 <__cmpdi2>:
    4cd6:	2a 15       	cp	r18, r10
    4cd8:	3b 05       	cpc	r19, r11
    4cda:	4c 05       	cpc	r20, r12
    4cdc:	5d 05       	cpc	r21, r13
    4cde:	6e 05       	cpc	r22, r14
    4ce0:	7f 05       	cpc	r23, r15
    4ce2:	80 07       	cpc	r24, r16
    4ce4:	91 07       	cpc	r25, r17
    4ce6:	08 95       	ret

00004ce8 <__cmpdi2_s8>:
    4ce8:	00 24       	eor	r0, r0
    4cea:	a7 fd       	sbrc	r26, 7
    4cec:	00 94       	com	r0
    4cee:	2a 17       	cp	r18, r26
    4cf0:	30 05       	cpc	r19, r0
    4cf2:	40 05       	cpc	r20, r0
    4cf4:	50 05       	cpc	r21, r0
    4cf6:	60 05       	cpc	r22, r0
    4cf8:	70 05       	cpc	r23, r0
    4cfa:	80 05       	cpc	r24, r0
    4cfc:	90 05       	cpc	r25, r0
    4cfe:	08 95       	ret

00004d00 <memcpy>:
    4d00:	fb 01       	movw	r30, r22
    4d02:	dc 01       	movw	r26, r24
    4d04:	02 c0       	rjmp	.+4      	; 0x4d0a <memcpy+0xa>
    4d06:	01 90       	ld	r0, Z+
    4d08:	0d 92       	st	X+, r0
    4d0a:	41 50       	subi	r20, 0x01	; 1
    4d0c:	50 40       	sbci	r21, 0x00	; 0
    4d0e:	d8 f7       	brcc	.-10     	; 0x4d06 <memcpy+0x6>
    4d10:	08 95       	ret

00004d12 <memset>:
    4d12:	dc 01       	movw	r26, r24
    4d14:	01 c0       	rjmp	.+2      	; 0x4d18 <memset+0x6>
    4d16:	6d 93       	st	X+, r22
    4d18:	41 50       	subi	r20, 0x01	; 1
    4d1a:	50 40       	sbci	r21, 0x00	; 0
    4d1c:	e0 f7       	brcc	.-8      	; 0x4d16 <memset+0x4>
    4d1e:	08 95       	ret

00004d20 <strchr>:
    4d20:	fc 01       	movw	r30, r24
    4d22:	81 91       	ld	r24, Z+
    4d24:	86 17       	cp	r24, r22
    4d26:	21 f0       	breq	.+8      	; 0x4d30 <strchr+0x10>
    4d28:	88 23       	and	r24, r24
    4d2a:	d9 f7       	brne	.-10     	; 0x4d22 <strchr+0x2>
    4d2c:	99 27       	eor	r25, r25
    4d2e:	08 95       	ret
    4d30:	31 97       	sbiw	r30, 0x01	; 1
    4d32:	cf 01       	movw	r24, r30
    4d34:	08 95       	ret

00004d36 <strcmp>:
    4d36:	fb 01       	movw	r30, r22
    4d38:	dc 01       	movw	r26, r24
    4d3a:	8d 91       	ld	r24, X+
    4d3c:	01 90       	ld	r0, Z+
    4d3e:	80 19       	sub	r24, r0
    4d40:	01 10       	cpse	r0, r1
    4d42:	d9 f3       	breq	.-10     	; 0x4d3a <strcmp+0x4>
    4d44:	99 0b       	sbc	r25, r25
    4d46:	08 95       	ret

00004d48 <strncat>:
    4d48:	fb 01       	movw	r30, r22
    4d4a:	dc 01       	movw	r26, r24
    4d4c:	0d 90       	ld	r0, X+
    4d4e:	00 20       	and	r0, r0
    4d50:	e9 f7       	brne	.-6      	; 0x4d4c <strncat+0x4>
    4d52:	11 97       	sbiw	r26, 0x01	; 1
    4d54:	41 50       	subi	r20, 0x01	; 1
    4d56:	50 40       	sbci	r21, 0x00	; 0
    4d58:	28 f0       	brcs	.+10     	; 0x4d64 <strncat+0x1c>
    4d5a:	01 90       	ld	r0, Z+
    4d5c:	00 20       	and	r0, r0
    4d5e:	0d 92       	st	X+, r0
    4d60:	c9 f7       	brne	.-14     	; 0x4d54 <strncat+0xc>
    4d62:	08 95       	ret
    4d64:	1c 92       	st	X, r1
    4d66:	08 95       	ret

00004d68 <strncmp>:
    4d68:	fb 01       	movw	r30, r22
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	41 50       	subi	r20, 0x01	; 1
    4d6e:	50 40       	sbci	r21, 0x00	; 0
    4d70:	30 f0       	brcs	.+12     	; 0x4d7e <strncmp+0x16>
    4d72:	8d 91       	ld	r24, X+
    4d74:	01 90       	ld	r0, Z+
    4d76:	80 19       	sub	r24, r0
    4d78:	19 f4       	brne	.+6      	; 0x4d80 <strncmp+0x18>
    4d7a:	00 20       	and	r0, r0
    4d7c:	b9 f7       	brne	.-18     	; 0x4d6c <strncmp+0x4>
    4d7e:	88 1b       	sub	r24, r24
    4d80:	99 0b       	sbc	r25, r25
    4d82:	08 95       	ret

00004d84 <strncpy>:
    4d84:	fb 01       	movw	r30, r22
    4d86:	dc 01       	movw	r26, r24
    4d88:	41 50       	subi	r20, 0x01	; 1
    4d8a:	50 40       	sbci	r21, 0x00	; 0
    4d8c:	48 f0       	brcs	.+18     	; 0x4da0 <strncpy+0x1c>
    4d8e:	01 90       	ld	r0, Z+
    4d90:	0d 92       	st	X+, r0
    4d92:	00 20       	and	r0, r0
    4d94:	c9 f7       	brne	.-14     	; 0x4d88 <strncpy+0x4>
    4d96:	01 c0       	rjmp	.+2      	; 0x4d9a <strncpy+0x16>
    4d98:	1d 92       	st	X+, r1
    4d9a:	41 50       	subi	r20, 0x01	; 1
    4d9c:	50 40       	sbci	r21, 0x00	; 0
    4d9e:	e0 f7       	brcc	.-8      	; 0x4d98 <strncpy+0x14>
    4da0:	08 95       	ret

00004da2 <strrchr>:
    4da2:	fc 01       	movw	r30, r24
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	01 90       	ld	r0, Z+
    4daa:	06 16       	cp	r0, r22
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <strrchr+0xe>
    4dae:	cf 01       	movw	r24, r30
    4db0:	00 20       	and	r0, r0
    4db2:	d1 f7       	brne	.-12     	; 0x4da8 <strrchr+0x6>
    4db4:	01 97       	sbiw	r24, 0x01	; 1
    4db6:	08 95       	ret

00004db8 <__itoa_ncheck>:
    4db8:	bb 27       	eor	r27, r27
    4dba:	4a 30       	cpi	r20, 0x0A	; 10
    4dbc:	31 f4       	brne	.+12     	; 0x4dca <__itoa_ncheck+0x12>
    4dbe:	99 23       	and	r25, r25
    4dc0:	22 f4       	brpl	.+8      	; 0x4dca <__itoa_ncheck+0x12>
    4dc2:	bd e2       	ldi	r27, 0x2D	; 45
    4dc4:	90 95       	com	r25
    4dc6:	81 95       	neg	r24
    4dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4dca:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__utoa_common>

00004dce <__utoa_ncheck>:
    4dce:	bb 27       	eor	r27, r27

00004dd0 <__utoa_common>:
    4dd0:	fb 01       	movw	r30, r22
    4dd2:	55 27       	eor	r21, r21
    4dd4:	aa 27       	eor	r26, r26
    4dd6:	88 0f       	add	r24, r24
    4dd8:	99 1f       	adc	r25, r25
    4dda:	aa 1f       	adc	r26, r26
    4ddc:	a4 17       	cp	r26, r20
    4dde:	10 f0       	brcs	.+4      	; 0x4de4 <__utoa_common+0x14>
    4de0:	a4 1b       	sub	r26, r20
    4de2:	83 95       	inc	r24
    4de4:	50 51       	subi	r21, 0x10	; 16
    4de6:	b9 f7       	brne	.-18     	; 0x4dd6 <__utoa_common+0x6>
    4de8:	a0 5d       	subi	r26, 0xD0	; 208
    4dea:	aa 33       	cpi	r26, 0x3A	; 58
    4dec:	08 f0       	brcs	.+2      	; 0x4df0 <__utoa_common+0x20>
    4dee:	a9 5d       	subi	r26, 0xD9	; 217
    4df0:	a1 93       	st	Z+, r26
    4df2:	00 97       	sbiw	r24, 0x00	; 0
    4df4:	79 f7       	brne	.-34     	; 0x4dd4 <__utoa_common+0x4>
    4df6:	b1 11       	cpse	r27, r1
    4df8:	b1 93       	st	Z+, r27
    4dfa:	11 92       	st	Z+, r1
    4dfc:	cb 01       	movw	r24, r22
    4dfe:	0c 94 28 29 	jmp	0x5250	; 0x5250 <strrev>

00004e02 <snprintf>:
    4e02:	ae e0       	ldi	r26, 0x0E	; 14
    4e04:	b0 e0       	ldi	r27, 0x00	; 0
    4e06:	e7 e0       	ldi	r30, 0x07	; 7
    4e08:	f7 e2       	ldi	r31, 0x27	; 39
    4e0a:	0c 94 e0 29 	jmp	0x53c0	; 0x53c0 <__prologue_saves__+0x1c>
    4e0e:	0d 89       	ldd	r16, Y+21	; 0x15
    4e10:	1e 89       	ldd	r17, Y+22	; 0x16
    4e12:	8f 89       	ldd	r24, Y+23	; 0x17
    4e14:	98 8d       	ldd	r25, Y+24	; 0x18
    4e16:	26 e0       	ldi	r18, 0x06	; 6
    4e18:	2c 83       	std	Y+4, r18	; 0x04
    4e1a:	1a 83       	std	Y+2, r17	; 0x02
    4e1c:	09 83       	std	Y+1, r16	; 0x01
    4e1e:	97 ff       	sbrs	r25, 7
    4e20:	02 c0       	rjmp	.+4      	; 0x4e26 <snprintf+0x24>
    4e22:	80 e0       	ldi	r24, 0x00	; 0
    4e24:	90 e8       	ldi	r25, 0x80	; 128
    4e26:	01 97       	sbiw	r24, 0x01	; 1
    4e28:	9e 83       	std	Y+6, r25	; 0x06
    4e2a:	8d 83       	std	Y+5, r24	; 0x05
    4e2c:	ae 01       	movw	r20, r28
    4e2e:	45 5e       	subi	r20, 0xE5	; 229
    4e30:	5f 4f       	sbci	r21, 0xFF	; 255
    4e32:	69 8d       	ldd	r22, Y+25	; 0x19
    4e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e36:	ce 01       	movw	r24, r28
    4e38:	01 96       	adiw	r24, 0x01	; 1
    4e3a:	0e 94 31 27 	call	0x4e62	; 0x4e62 <vfprintf>
    4e3e:	4d 81       	ldd	r20, Y+5	; 0x05
    4e40:	5e 81       	ldd	r21, Y+6	; 0x06
    4e42:	57 fd       	sbrc	r21, 7
    4e44:	0a c0       	rjmp	.+20     	; 0x4e5a <snprintf+0x58>
    4e46:	2f 81       	ldd	r18, Y+7	; 0x07
    4e48:	38 85       	ldd	r19, Y+8	; 0x08
    4e4a:	42 17       	cp	r20, r18
    4e4c:	53 07       	cpc	r21, r19
    4e4e:	0c f4       	brge	.+2      	; 0x4e52 <snprintf+0x50>
    4e50:	9a 01       	movw	r18, r20
    4e52:	f8 01       	movw	r30, r16
    4e54:	e2 0f       	add	r30, r18
    4e56:	f3 1f       	adc	r31, r19
    4e58:	10 82       	st	Z, r1
    4e5a:	2e 96       	adiw	r28, 0x0e	; 14
    4e5c:	e4 e0       	ldi	r30, 0x04	; 4
    4e5e:	0c 94 fc 29 	jmp	0x53f8	; 0x53f8 <__epilogue_restores__+0x1c>

00004e62 <vfprintf>:
    4e62:	ab e0       	ldi	r26, 0x0B	; 11
    4e64:	b0 e0       	ldi	r27, 0x00	; 0
    4e66:	e7 e3       	ldi	r30, 0x37	; 55
    4e68:	f7 e2       	ldi	r31, 0x27	; 39
    4e6a:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <__prologue_saves__>
    4e6e:	6c 01       	movw	r12, r24
    4e70:	7b 01       	movw	r14, r22
    4e72:	8a 01       	movw	r16, r20
    4e74:	fc 01       	movw	r30, r24
    4e76:	17 82       	std	Z+7, r1	; 0x07
    4e78:	16 82       	std	Z+6, r1	; 0x06
    4e7a:	83 81       	ldd	r24, Z+3	; 0x03
    4e7c:	81 ff       	sbrs	r24, 1
    4e7e:	cc c1       	rjmp	.+920    	; 0x5218 <vfprintf+0x3b6>
    4e80:	ce 01       	movw	r24, r28
    4e82:	01 96       	adiw	r24, 0x01	; 1
    4e84:	3c 01       	movw	r6, r24
    4e86:	f6 01       	movw	r30, r12
    4e88:	93 81       	ldd	r25, Z+3	; 0x03
    4e8a:	f7 01       	movw	r30, r14
    4e8c:	93 fd       	sbrc	r25, 3
    4e8e:	85 91       	lpm	r24, Z+
    4e90:	93 ff       	sbrs	r25, 3
    4e92:	81 91       	ld	r24, Z+
    4e94:	7f 01       	movw	r14, r30
    4e96:	88 23       	and	r24, r24
    4e98:	09 f4       	brne	.+2      	; 0x4e9c <vfprintf+0x3a>
    4e9a:	ba c1       	rjmp	.+884    	; 0x5210 <vfprintf+0x3ae>
    4e9c:	85 32       	cpi	r24, 0x25	; 37
    4e9e:	39 f4       	brne	.+14     	; 0x4eae <vfprintf+0x4c>
    4ea0:	93 fd       	sbrc	r25, 3
    4ea2:	85 91       	lpm	r24, Z+
    4ea4:	93 ff       	sbrs	r25, 3
    4ea6:	81 91       	ld	r24, Z+
    4ea8:	7f 01       	movw	r14, r30
    4eaa:	85 32       	cpi	r24, 0x25	; 37
    4eac:	29 f4       	brne	.+10     	; 0x4eb8 <vfprintf+0x56>
    4eae:	b6 01       	movw	r22, r12
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	0e 94 38 29 	call	0x5270	; 0x5270 <fputc>
    4eb6:	e7 cf       	rjmp	.-50     	; 0x4e86 <vfprintf+0x24>
    4eb8:	91 2c       	mov	r9, r1
    4eba:	21 2c       	mov	r2, r1
    4ebc:	31 2c       	mov	r3, r1
    4ebe:	ff e1       	ldi	r31, 0x1F	; 31
    4ec0:	f3 15       	cp	r31, r3
    4ec2:	d8 f0       	brcs	.+54     	; 0x4efa <vfprintf+0x98>
    4ec4:	8b 32       	cpi	r24, 0x2B	; 43
    4ec6:	79 f0       	breq	.+30     	; 0x4ee6 <vfprintf+0x84>
    4ec8:	38 f4       	brcc	.+14     	; 0x4ed8 <vfprintf+0x76>
    4eca:	80 32       	cpi	r24, 0x20	; 32
    4ecc:	79 f0       	breq	.+30     	; 0x4eec <vfprintf+0x8a>
    4ece:	83 32       	cpi	r24, 0x23	; 35
    4ed0:	a1 f4       	brne	.+40     	; 0x4efa <vfprintf+0x98>
    4ed2:	23 2d       	mov	r18, r3
    4ed4:	20 61       	ori	r18, 0x10	; 16
    4ed6:	1d c0       	rjmp	.+58     	; 0x4f12 <vfprintf+0xb0>
    4ed8:	8d 32       	cpi	r24, 0x2D	; 45
    4eda:	61 f0       	breq	.+24     	; 0x4ef4 <vfprintf+0x92>
    4edc:	80 33       	cpi	r24, 0x30	; 48
    4ede:	69 f4       	brne	.+26     	; 0x4efa <vfprintf+0x98>
    4ee0:	23 2d       	mov	r18, r3
    4ee2:	21 60       	ori	r18, 0x01	; 1
    4ee4:	16 c0       	rjmp	.+44     	; 0x4f12 <vfprintf+0xb0>
    4ee6:	83 2d       	mov	r24, r3
    4ee8:	82 60       	ori	r24, 0x02	; 2
    4eea:	38 2e       	mov	r3, r24
    4eec:	e3 2d       	mov	r30, r3
    4eee:	e4 60       	ori	r30, 0x04	; 4
    4ef0:	3e 2e       	mov	r3, r30
    4ef2:	2a c0       	rjmp	.+84     	; 0x4f48 <vfprintf+0xe6>
    4ef4:	f3 2d       	mov	r31, r3
    4ef6:	f8 60       	ori	r31, 0x08	; 8
    4ef8:	1d c0       	rjmp	.+58     	; 0x4f34 <vfprintf+0xd2>
    4efa:	37 fc       	sbrc	r3, 7
    4efc:	2d c0       	rjmp	.+90     	; 0x4f58 <vfprintf+0xf6>
    4efe:	20 ed       	ldi	r18, 0xD0	; 208
    4f00:	28 0f       	add	r18, r24
    4f02:	2a 30       	cpi	r18, 0x0A	; 10
    4f04:	40 f0       	brcs	.+16     	; 0x4f16 <vfprintf+0xb4>
    4f06:	8e 32       	cpi	r24, 0x2E	; 46
    4f08:	b9 f4       	brne	.+46     	; 0x4f38 <vfprintf+0xd6>
    4f0a:	36 fc       	sbrc	r3, 6
    4f0c:	81 c1       	rjmp	.+770    	; 0x5210 <vfprintf+0x3ae>
    4f0e:	23 2d       	mov	r18, r3
    4f10:	20 64       	ori	r18, 0x40	; 64
    4f12:	32 2e       	mov	r3, r18
    4f14:	19 c0       	rjmp	.+50     	; 0x4f48 <vfprintf+0xe6>
    4f16:	36 fe       	sbrs	r3, 6
    4f18:	06 c0       	rjmp	.+12     	; 0x4f26 <vfprintf+0xc4>
    4f1a:	8a e0       	ldi	r24, 0x0A	; 10
    4f1c:	98 9e       	mul	r9, r24
    4f1e:	20 0d       	add	r18, r0
    4f20:	11 24       	eor	r1, r1
    4f22:	92 2e       	mov	r9, r18
    4f24:	11 c0       	rjmp	.+34     	; 0x4f48 <vfprintf+0xe6>
    4f26:	ea e0       	ldi	r30, 0x0A	; 10
    4f28:	2e 9e       	mul	r2, r30
    4f2a:	20 0d       	add	r18, r0
    4f2c:	11 24       	eor	r1, r1
    4f2e:	22 2e       	mov	r2, r18
    4f30:	f3 2d       	mov	r31, r3
    4f32:	f0 62       	ori	r31, 0x20	; 32
    4f34:	3f 2e       	mov	r3, r31
    4f36:	08 c0       	rjmp	.+16     	; 0x4f48 <vfprintf+0xe6>
    4f38:	8c 36       	cpi	r24, 0x6C	; 108
    4f3a:	21 f4       	brne	.+8      	; 0x4f44 <vfprintf+0xe2>
    4f3c:	83 2d       	mov	r24, r3
    4f3e:	80 68       	ori	r24, 0x80	; 128
    4f40:	38 2e       	mov	r3, r24
    4f42:	02 c0       	rjmp	.+4      	; 0x4f48 <vfprintf+0xe6>
    4f44:	88 36       	cpi	r24, 0x68	; 104
    4f46:	41 f4       	brne	.+16     	; 0x4f58 <vfprintf+0xf6>
    4f48:	f7 01       	movw	r30, r14
    4f4a:	93 fd       	sbrc	r25, 3
    4f4c:	85 91       	lpm	r24, Z+
    4f4e:	93 ff       	sbrs	r25, 3
    4f50:	81 91       	ld	r24, Z+
    4f52:	7f 01       	movw	r14, r30
    4f54:	81 11       	cpse	r24, r1
    4f56:	b3 cf       	rjmp	.-154    	; 0x4ebe <vfprintf+0x5c>
    4f58:	98 2f       	mov	r25, r24
    4f5a:	9f 7d       	andi	r25, 0xDF	; 223
    4f5c:	95 54       	subi	r25, 0x45	; 69
    4f5e:	93 30       	cpi	r25, 0x03	; 3
    4f60:	28 f4       	brcc	.+10     	; 0x4f6c <vfprintf+0x10a>
    4f62:	0c 5f       	subi	r16, 0xFC	; 252
    4f64:	1f 4f       	sbci	r17, 0xFF	; 255
    4f66:	9f e3       	ldi	r25, 0x3F	; 63
    4f68:	99 83       	std	Y+1, r25	; 0x01
    4f6a:	0d c0       	rjmp	.+26     	; 0x4f86 <vfprintf+0x124>
    4f6c:	83 36       	cpi	r24, 0x63	; 99
    4f6e:	31 f0       	breq	.+12     	; 0x4f7c <vfprintf+0x11a>
    4f70:	83 37       	cpi	r24, 0x73	; 115
    4f72:	71 f0       	breq	.+28     	; 0x4f90 <vfprintf+0x12e>
    4f74:	83 35       	cpi	r24, 0x53	; 83
    4f76:	09 f0       	breq	.+2      	; 0x4f7a <vfprintf+0x118>
    4f78:	59 c0       	rjmp	.+178    	; 0x502c <vfprintf+0x1ca>
    4f7a:	21 c0       	rjmp	.+66     	; 0x4fbe <vfprintf+0x15c>
    4f7c:	f8 01       	movw	r30, r16
    4f7e:	80 81       	ld	r24, Z
    4f80:	89 83       	std	Y+1, r24	; 0x01
    4f82:	0e 5f       	subi	r16, 0xFE	; 254
    4f84:	1f 4f       	sbci	r17, 0xFF	; 255
    4f86:	88 24       	eor	r8, r8
    4f88:	83 94       	inc	r8
    4f8a:	91 2c       	mov	r9, r1
    4f8c:	53 01       	movw	r10, r6
    4f8e:	13 c0       	rjmp	.+38     	; 0x4fb6 <vfprintf+0x154>
    4f90:	28 01       	movw	r4, r16
    4f92:	f2 e0       	ldi	r31, 0x02	; 2
    4f94:	4f 0e       	add	r4, r31
    4f96:	51 1c       	adc	r5, r1
    4f98:	f8 01       	movw	r30, r16
    4f9a:	a0 80       	ld	r10, Z
    4f9c:	b1 80       	ldd	r11, Z+1	; 0x01
    4f9e:	36 fe       	sbrs	r3, 6
    4fa0:	03 c0       	rjmp	.+6      	; 0x4fa8 <vfprintf+0x146>
    4fa2:	69 2d       	mov	r22, r9
    4fa4:	70 e0       	ldi	r23, 0x00	; 0
    4fa6:	02 c0       	rjmp	.+4      	; 0x4fac <vfprintf+0x14a>
    4fa8:	6f ef       	ldi	r22, 0xFF	; 255
    4faa:	7f ef       	ldi	r23, 0xFF	; 255
    4fac:	c5 01       	movw	r24, r10
    4fae:	0e 94 1d 29 	call	0x523a	; 0x523a <strnlen>
    4fb2:	4c 01       	movw	r8, r24
    4fb4:	82 01       	movw	r16, r4
    4fb6:	f3 2d       	mov	r31, r3
    4fb8:	ff 77       	andi	r31, 0x7F	; 127
    4fba:	3f 2e       	mov	r3, r31
    4fbc:	16 c0       	rjmp	.+44     	; 0x4fea <vfprintf+0x188>
    4fbe:	28 01       	movw	r4, r16
    4fc0:	22 e0       	ldi	r18, 0x02	; 2
    4fc2:	42 0e       	add	r4, r18
    4fc4:	51 1c       	adc	r5, r1
    4fc6:	f8 01       	movw	r30, r16
    4fc8:	a0 80       	ld	r10, Z
    4fca:	b1 80       	ldd	r11, Z+1	; 0x01
    4fcc:	36 fe       	sbrs	r3, 6
    4fce:	03 c0       	rjmp	.+6      	; 0x4fd6 <vfprintf+0x174>
    4fd0:	69 2d       	mov	r22, r9
    4fd2:	70 e0       	ldi	r23, 0x00	; 0
    4fd4:	02 c0       	rjmp	.+4      	; 0x4fda <vfprintf+0x178>
    4fd6:	6f ef       	ldi	r22, 0xFF	; 255
    4fd8:	7f ef       	ldi	r23, 0xFF	; 255
    4fda:	c5 01       	movw	r24, r10
    4fdc:	0e 94 12 29 	call	0x5224	; 0x5224 <strnlen_P>
    4fe0:	4c 01       	movw	r8, r24
    4fe2:	f3 2d       	mov	r31, r3
    4fe4:	f0 68       	ori	r31, 0x80	; 128
    4fe6:	3f 2e       	mov	r3, r31
    4fe8:	82 01       	movw	r16, r4
    4fea:	33 fc       	sbrc	r3, 3
    4fec:	1b c0       	rjmp	.+54     	; 0x5024 <vfprintf+0x1c2>
    4fee:	82 2d       	mov	r24, r2
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	88 16       	cp	r8, r24
    4ff4:	99 06       	cpc	r9, r25
    4ff6:	b0 f4       	brcc	.+44     	; 0x5024 <vfprintf+0x1c2>
    4ff8:	b6 01       	movw	r22, r12
    4ffa:	80 e2       	ldi	r24, 0x20	; 32
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	0e 94 38 29 	call	0x5270	; 0x5270 <fputc>
    5002:	2a 94       	dec	r2
    5004:	f4 cf       	rjmp	.-24     	; 0x4fee <vfprintf+0x18c>
    5006:	f5 01       	movw	r30, r10
    5008:	37 fc       	sbrc	r3, 7
    500a:	85 91       	lpm	r24, Z+
    500c:	37 fe       	sbrs	r3, 7
    500e:	81 91       	ld	r24, Z+
    5010:	5f 01       	movw	r10, r30
    5012:	b6 01       	movw	r22, r12
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	0e 94 38 29 	call	0x5270	; 0x5270 <fputc>
    501a:	21 10       	cpse	r2, r1
    501c:	2a 94       	dec	r2
    501e:	21 e0       	ldi	r18, 0x01	; 1
    5020:	82 1a       	sub	r8, r18
    5022:	91 08       	sbc	r9, r1
    5024:	81 14       	cp	r8, r1
    5026:	91 04       	cpc	r9, r1
    5028:	71 f7       	brne	.-36     	; 0x5006 <vfprintf+0x1a4>
    502a:	e8 c0       	rjmp	.+464    	; 0x51fc <vfprintf+0x39a>
    502c:	84 36       	cpi	r24, 0x64	; 100
    502e:	11 f0       	breq	.+4      	; 0x5034 <vfprintf+0x1d2>
    5030:	89 36       	cpi	r24, 0x69	; 105
    5032:	41 f5       	brne	.+80     	; 0x5084 <vfprintf+0x222>
    5034:	f8 01       	movw	r30, r16
    5036:	37 fe       	sbrs	r3, 7
    5038:	07 c0       	rjmp	.+14     	; 0x5048 <vfprintf+0x1e6>
    503a:	60 81       	ld	r22, Z
    503c:	71 81       	ldd	r23, Z+1	; 0x01
    503e:	82 81       	ldd	r24, Z+2	; 0x02
    5040:	93 81       	ldd	r25, Z+3	; 0x03
    5042:	0c 5f       	subi	r16, 0xFC	; 252
    5044:	1f 4f       	sbci	r17, 0xFF	; 255
    5046:	08 c0       	rjmp	.+16     	; 0x5058 <vfprintf+0x1f6>
    5048:	60 81       	ld	r22, Z
    504a:	71 81       	ldd	r23, Z+1	; 0x01
    504c:	07 2e       	mov	r0, r23
    504e:	00 0c       	add	r0, r0
    5050:	88 0b       	sbc	r24, r24
    5052:	99 0b       	sbc	r25, r25
    5054:	0e 5f       	subi	r16, 0xFE	; 254
    5056:	1f 4f       	sbci	r17, 0xFF	; 255
    5058:	f3 2d       	mov	r31, r3
    505a:	ff 76       	andi	r31, 0x6F	; 111
    505c:	3f 2e       	mov	r3, r31
    505e:	97 ff       	sbrs	r25, 7
    5060:	09 c0       	rjmp	.+18     	; 0x5074 <vfprintf+0x212>
    5062:	90 95       	com	r25
    5064:	80 95       	com	r24
    5066:	70 95       	com	r23
    5068:	61 95       	neg	r22
    506a:	7f 4f       	sbci	r23, 0xFF	; 255
    506c:	8f 4f       	sbci	r24, 0xFF	; 255
    506e:	9f 4f       	sbci	r25, 0xFF	; 255
    5070:	f0 68       	ori	r31, 0x80	; 128
    5072:	3f 2e       	mov	r3, r31
    5074:	2a e0       	ldi	r18, 0x0A	; 10
    5076:	30 e0       	ldi	r19, 0x00	; 0
    5078:	a3 01       	movw	r20, r6
    507a:	0e 94 74 29 	call	0x52e8	; 0x52e8 <__ultoa_invert>
    507e:	88 2e       	mov	r8, r24
    5080:	86 18       	sub	r8, r6
    5082:	45 c0       	rjmp	.+138    	; 0x510e <vfprintf+0x2ac>
    5084:	85 37       	cpi	r24, 0x75	; 117
    5086:	31 f4       	brne	.+12     	; 0x5094 <vfprintf+0x232>
    5088:	23 2d       	mov	r18, r3
    508a:	2f 7e       	andi	r18, 0xEF	; 239
    508c:	b2 2e       	mov	r11, r18
    508e:	2a e0       	ldi	r18, 0x0A	; 10
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	25 c0       	rjmp	.+74     	; 0x50de <vfprintf+0x27c>
    5094:	93 2d       	mov	r25, r3
    5096:	99 7f       	andi	r25, 0xF9	; 249
    5098:	b9 2e       	mov	r11, r25
    509a:	8f 36       	cpi	r24, 0x6F	; 111
    509c:	c1 f0       	breq	.+48     	; 0x50ce <vfprintf+0x26c>
    509e:	18 f4       	brcc	.+6      	; 0x50a6 <vfprintf+0x244>
    50a0:	88 35       	cpi	r24, 0x58	; 88
    50a2:	79 f0       	breq	.+30     	; 0x50c2 <vfprintf+0x260>
    50a4:	b5 c0       	rjmp	.+362    	; 0x5210 <vfprintf+0x3ae>
    50a6:	80 37       	cpi	r24, 0x70	; 112
    50a8:	19 f0       	breq	.+6      	; 0x50b0 <vfprintf+0x24e>
    50aa:	88 37       	cpi	r24, 0x78	; 120
    50ac:	21 f0       	breq	.+8      	; 0x50b6 <vfprintf+0x254>
    50ae:	b0 c0       	rjmp	.+352    	; 0x5210 <vfprintf+0x3ae>
    50b0:	e9 2f       	mov	r30, r25
    50b2:	e0 61       	ori	r30, 0x10	; 16
    50b4:	be 2e       	mov	r11, r30
    50b6:	b4 fe       	sbrs	r11, 4
    50b8:	0d c0       	rjmp	.+26     	; 0x50d4 <vfprintf+0x272>
    50ba:	fb 2d       	mov	r31, r11
    50bc:	f4 60       	ori	r31, 0x04	; 4
    50be:	bf 2e       	mov	r11, r31
    50c0:	09 c0       	rjmp	.+18     	; 0x50d4 <vfprintf+0x272>
    50c2:	34 fe       	sbrs	r3, 4
    50c4:	0a c0       	rjmp	.+20     	; 0x50da <vfprintf+0x278>
    50c6:	29 2f       	mov	r18, r25
    50c8:	26 60       	ori	r18, 0x06	; 6
    50ca:	b2 2e       	mov	r11, r18
    50cc:	06 c0       	rjmp	.+12     	; 0x50da <vfprintf+0x278>
    50ce:	28 e0       	ldi	r18, 0x08	; 8
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	05 c0       	rjmp	.+10     	; 0x50de <vfprintf+0x27c>
    50d4:	20 e1       	ldi	r18, 0x10	; 16
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	02 c0       	rjmp	.+4      	; 0x50de <vfprintf+0x27c>
    50da:	20 e1       	ldi	r18, 0x10	; 16
    50dc:	32 e0       	ldi	r19, 0x02	; 2
    50de:	f8 01       	movw	r30, r16
    50e0:	b7 fe       	sbrs	r11, 7
    50e2:	07 c0       	rjmp	.+14     	; 0x50f2 <vfprintf+0x290>
    50e4:	60 81       	ld	r22, Z
    50e6:	71 81       	ldd	r23, Z+1	; 0x01
    50e8:	82 81       	ldd	r24, Z+2	; 0x02
    50ea:	93 81       	ldd	r25, Z+3	; 0x03
    50ec:	0c 5f       	subi	r16, 0xFC	; 252
    50ee:	1f 4f       	sbci	r17, 0xFF	; 255
    50f0:	06 c0       	rjmp	.+12     	; 0x50fe <vfprintf+0x29c>
    50f2:	60 81       	ld	r22, Z
    50f4:	71 81       	ldd	r23, Z+1	; 0x01
    50f6:	80 e0       	ldi	r24, 0x00	; 0
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	0e 5f       	subi	r16, 0xFE	; 254
    50fc:	1f 4f       	sbci	r17, 0xFF	; 255
    50fe:	a3 01       	movw	r20, r6
    5100:	0e 94 74 29 	call	0x52e8	; 0x52e8 <__ultoa_invert>
    5104:	88 2e       	mov	r8, r24
    5106:	86 18       	sub	r8, r6
    5108:	fb 2d       	mov	r31, r11
    510a:	ff 77       	andi	r31, 0x7F	; 127
    510c:	3f 2e       	mov	r3, r31
    510e:	36 fe       	sbrs	r3, 6
    5110:	0d c0       	rjmp	.+26     	; 0x512c <vfprintf+0x2ca>
    5112:	23 2d       	mov	r18, r3
    5114:	2e 7f       	andi	r18, 0xFE	; 254
    5116:	a2 2e       	mov	r10, r18
    5118:	89 14       	cp	r8, r9
    511a:	58 f4       	brcc	.+22     	; 0x5132 <vfprintf+0x2d0>
    511c:	34 fe       	sbrs	r3, 4
    511e:	0b c0       	rjmp	.+22     	; 0x5136 <vfprintf+0x2d4>
    5120:	32 fc       	sbrc	r3, 2
    5122:	09 c0       	rjmp	.+18     	; 0x5136 <vfprintf+0x2d4>
    5124:	83 2d       	mov	r24, r3
    5126:	8e 7e       	andi	r24, 0xEE	; 238
    5128:	a8 2e       	mov	r10, r24
    512a:	05 c0       	rjmp	.+10     	; 0x5136 <vfprintf+0x2d4>
    512c:	b8 2c       	mov	r11, r8
    512e:	a3 2c       	mov	r10, r3
    5130:	03 c0       	rjmp	.+6      	; 0x5138 <vfprintf+0x2d6>
    5132:	b8 2c       	mov	r11, r8
    5134:	01 c0       	rjmp	.+2      	; 0x5138 <vfprintf+0x2d6>
    5136:	b9 2c       	mov	r11, r9
    5138:	a4 fe       	sbrs	r10, 4
    513a:	0f c0       	rjmp	.+30     	; 0x515a <vfprintf+0x2f8>
    513c:	fe 01       	movw	r30, r28
    513e:	e8 0d       	add	r30, r8
    5140:	f1 1d       	adc	r31, r1
    5142:	80 81       	ld	r24, Z
    5144:	80 33       	cpi	r24, 0x30	; 48
    5146:	21 f4       	brne	.+8      	; 0x5150 <vfprintf+0x2ee>
    5148:	9a 2d       	mov	r25, r10
    514a:	99 7e       	andi	r25, 0xE9	; 233
    514c:	a9 2e       	mov	r10, r25
    514e:	09 c0       	rjmp	.+18     	; 0x5162 <vfprintf+0x300>
    5150:	a2 fe       	sbrs	r10, 2
    5152:	06 c0       	rjmp	.+12     	; 0x5160 <vfprintf+0x2fe>
    5154:	b3 94       	inc	r11
    5156:	b3 94       	inc	r11
    5158:	04 c0       	rjmp	.+8      	; 0x5162 <vfprintf+0x300>
    515a:	8a 2d       	mov	r24, r10
    515c:	86 78       	andi	r24, 0x86	; 134
    515e:	09 f0       	breq	.+2      	; 0x5162 <vfprintf+0x300>
    5160:	b3 94       	inc	r11
    5162:	a3 fc       	sbrc	r10, 3
    5164:	11 c0       	rjmp	.+34     	; 0x5188 <vfprintf+0x326>
    5166:	a0 fe       	sbrs	r10, 0
    5168:	06 c0       	rjmp	.+12     	; 0x5176 <vfprintf+0x314>
    516a:	b2 14       	cp	r11, r2
    516c:	88 f4       	brcc	.+34     	; 0x5190 <vfprintf+0x32e>
    516e:	28 0c       	add	r2, r8
    5170:	92 2c       	mov	r9, r2
    5172:	9b 18       	sub	r9, r11
    5174:	0e c0       	rjmp	.+28     	; 0x5192 <vfprintf+0x330>
    5176:	b2 14       	cp	r11, r2
    5178:	60 f4       	brcc	.+24     	; 0x5192 <vfprintf+0x330>
    517a:	b6 01       	movw	r22, r12
    517c:	80 e2       	ldi	r24, 0x20	; 32
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	0e 94 38 29 	call	0x5270	; 0x5270 <fputc>
    5184:	b3 94       	inc	r11
    5186:	f7 cf       	rjmp	.-18     	; 0x5176 <vfprintf+0x314>
    5188:	b2 14       	cp	r11, r2
    518a:	18 f4       	brcc	.+6      	; 0x5192 <vfprintf+0x330>
    518c:	2b 18       	sub	r2, r11
    518e:	02 c0       	rjmp	.+4      	; 0x5194 <vfprintf+0x332>
    5190:	98 2c       	mov	r9, r8
    5192:	21 2c       	mov	r2, r1
    5194:	a4 fe       	sbrs	r10, 4
    5196:	10 c0       	rjmp	.+32     	; 0x51b8 <vfprintf+0x356>
    5198:	b6 01       	movw	r22, r12
    519a:	80 e3       	ldi	r24, 0x30	; 48
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	0e 94 38 29 	call	0x5270	; 0x5270 <fputc>
    51a2:	a2 fe       	sbrs	r10, 2
    51a4:	17 c0       	rjmp	.+46     	; 0x51d4 <vfprintf+0x372>
    51a6:	a1 fc       	sbrc	r10, 1
    51a8:	03 c0       	rjmp	.+6      	; 0x51b0 <vfprintf+0x34e>
    51aa:	88 e7       	ldi	r24, 0x78	; 120
    51ac:	90 e0       	ldi	r25, 0x00	; 0
    51ae:	02 c0       	rjmp	.+4      	; 0x51b4 <vfprintf+0x352>
    51b0:	88 e5       	ldi	r24, 0x58	; 88
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	b6 01       	movw	r22, r12
    51b6:	0c c0       	rjmp	.+24     	; 0x51d0 <vfprintf+0x36e>
    51b8:	8a 2d       	mov	r24, r10
    51ba:	86 78       	andi	r24, 0x86	; 134
    51bc:	59 f0       	breq	.+22     	; 0x51d4 <vfprintf+0x372>
    51be:	a1 fe       	sbrs	r10, 1
    51c0:	02 c0       	rjmp	.+4      	; 0x51c6 <vfprintf+0x364>
    51c2:	8b e2       	ldi	r24, 0x2B	; 43
    51c4:	01 c0       	rjmp	.+2      	; 0x51c8 <vfprintf+0x366>
    51c6:	80 e2       	ldi	r24, 0x20	; 32
    51c8:	a7 fc       	sbrc	r10, 7
    51ca:	8d e2       	ldi	r24, 0x2D	; 45
    51cc:	b6 01       	movw	r22, r12
    51ce:	90 e0       	ldi	r25, 0x00	; 0
    51d0:	0e 94 38 29 	call	0x5270	; 0x5270 <fputc>
    51d4:	89 14       	cp	r8, r9
    51d6:	38 f4       	brcc	.+14     	; 0x51e6 <vfprintf+0x384>
    51d8:	b6 01       	movw	r22, r12
    51da:	80 e3       	ldi	r24, 0x30	; 48
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	0e 94 38 29 	call	0x5270	; 0x5270 <fputc>
    51e2:	9a 94       	dec	r9
    51e4:	f7 cf       	rjmp	.-18     	; 0x51d4 <vfprintf+0x372>
    51e6:	8a 94       	dec	r8
    51e8:	f3 01       	movw	r30, r6
    51ea:	e8 0d       	add	r30, r8
    51ec:	f1 1d       	adc	r31, r1
    51ee:	80 81       	ld	r24, Z
    51f0:	b6 01       	movw	r22, r12
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	0e 94 38 29 	call	0x5270	; 0x5270 <fputc>
    51f8:	81 10       	cpse	r8, r1
    51fa:	f5 cf       	rjmp	.-22     	; 0x51e6 <vfprintf+0x384>
    51fc:	22 20       	and	r2, r2
    51fe:	09 f4       	brne	.+2      	; 0x5202 <vfprintf+0x3a0>
    5200:	42 ce       	rjmp	.-892    	; 0x4e86 <vfprintf+0x24>
    5202:	b6 01       	movw	r22, r12
    5204:	80 e2       	ldi	r24, 0x20	; 32
    5206:	90 e0       	ldi	r25, 0x00	; 0
    5208:	0e 94 38 29 	call	0x5270	; 0x5270 <fputc>
    520c:	2a 94       	dec	r2
    520e:	f6 cf       	rjmp	.-20     	; 0x51fc <vfprintf+0x39a>
    5210:	f6 01       	movw	r30, r12
    5212:	86 81       	ldd	r24, Z+6	; 0x06
    5214:	97 81       	ldd	r25, Z+7	; 0x07
    5216:	02 c0       	rjmp	.+4      	; 0x521c <vfprintf+0x3ba>
    5218:	8f ef       	ldi	r24, 0xFF	; 255
    521a:	9f ef       	ldi	r25, 0xFF	; 255
    521c:	2b 96       	adiw	r28, 0x0b	; 11
    521e:	e2 e1       	ldi	r30, 0x12	; 18
    5220:	0c 94 ee 29 	jmp	0x53dc	; 0x53dc <__epilogue_restores__>

00005224 <strnlen_P>:
    5224:	fc 01       	movw	r30, r24
    5226:	05 90       	lpm	r0, Z+
    5228:	61 50       	subi	r22, 0x01	; 1
    522a:	70 40       	sbci	r23, 0x00	; 0
    522c:	01 10       	cpse	r0, r1
    522e:	d8 f7       	brcc	.-10     	; 0x5226 <strnlen_P+0x2>
    5230:	80 95       	com	r24
    5232:	90 95       	com	r25
    5234:	8e 0f       	add	r24, r30
    5236:	9f 1f       	adc	r25, r31
    5238:	08 95       	ret

0000523a <strnlen>:
    523a:	fc 01       	movw	r30, r24
    523c:	61 50       	subi	r22, 0x01	; 1
    523e:	70 40       	sbci	r23, 0x00	; 0
    5240:	01 90       	ld	r0, Z+
    5242:	01 10       	cpse	r0, r1
    5244:	d8 f7       	brcc	.-10     	; 0x523c <strnlen+0x2>
    5246:	80 95       	com	r24
    5248:	90 95       	com	r25
    524a:	8e 0f       	add	r24, r30
    524c:	9f 1f       	adc	r25, r31
    524e:	08 95       	ret

00005250 <strrev>:
    5250:	dc 01       	movw	r26, r24
    5252:	fc 01       	movw	r30, r24
    5254:	67 2f       	mov	r22, r23
    5256:	71 91       	ld	r23, Z+
    5258:	77 23       	and	r23, r23
    525a:	e1 f7       	brne	.-8      	; 0x5254 <strrev+0x4>
    525c:	32 97       	sbiw	r30, 0x02	; 2
    525e:	04 c0       	rjmp	.+8      	; 0x5268 <strrev+0x18>
    5260:	7c 91       	ld	r23, X
    5262:	6d 93       	st	X+, r22
    5264:	70 83       	st	Z, r23
    5266:	62 91       	ld	r22, -Z
    5268:	ae 17       	cp	r26, r30
    526a:	bf 07       	cpc	r27, r31
    526c:	c8 f3       	brcs	.-14     	; 0x5260 <strrev+0x10>
    526e:	08 95       	ret

00005270 <fputc>:
    5270:	0f 93       	push	r16
    5272:	1f 93       	push	r17
    5274:	cf 93       	push	r28
    5276:	df 93       	push	r29
    5278:	fb 01       	movw	r30, r22
    527a:	23 81       	ldd	r18, Z+3	; 0x03
    527c:	21 fd       	sbrc	r18, 1
    527e:	03 c0       	rjmp	.+6      	; 0x5286 <fputc+0x16>
    5280:	8f ef       	ldi	r24, 0xFF	; 255
    5282:	9f ef       	ldi	r25, 0xFF	; 255
    5284:	2c c0       	rjmp	.+88     	; 0x52de <fputc+0x6e>
    5286:	22 ff       	sbrs	r18, 2
    5288:	16 c0       	rjmp	.+44     	; 0x52b6 <fputc+0x46>
    528a:	46 81       	ldd	r20, Z+6	; 0x06
    528c:	57 81       	ldd	r21, Z+7	; 0x07
    528e:	24 81       	ldd	r18, Z+4	; 0x04
    5290:	35 81       	ldd	r19, Z+5	; 0x05
    5292:	42 17       	cp	r20, r18
    5294:	53 07       	cpc	r21, r19
    5296:	44 f4       	brge	.+16     	; 0x52a8 <fputc+0x38>
    5298:	a0 81       	ld	r26, Z
    529a:	b1 81       	ldd	r27, Z+1	; 0x01
    529c:	9d 01       	movw	r18, r26
    529e:	2f 5f       	subi	r18, 0xFF	; 255
    52a0:	3f 4f       	sbci	r19, 0xFF	; 255
    52a2:	31 83       	std	Z+1, r19	; 0x01
    52a4:	20 83       	st	Z, r18
    52a6:	8c 93       	st	X, r24
    52a8:	26 81       	ldd	r18, Z+6	; 0x06
    52aa:	37 81       	ldd	r19, Z+7	; 0x07
    52ac:	2f 5f       	subi	r18, 0xFF	; 255
    52ae:	3f 4f       	sbci	r19, 0xFF	; 255
    52b0:	37 83       	std	Z+7, r19	; 0x07
    52b2:	26 83       	std	Z+6, r18	; 0x06
    52b4:	14 c0       	rjmp	.+40     	; 0x52de <fputc+0x6e>
    52b6:	8b 01       	movw	r16, r22
    52b8:	ec 01       	movw	r28, r24
    52ba:	fb 01       	movw	r30, r22
    52bc:	00 84       	ldd	r0, Z+8	; 0x08
    52be:	f1 85       	ldd	r31, Z+9	; 0x09
    52c0:	e0 2d       	mov	r30, r0
    52c2:	09 95       	icall
    52c4:	89 2b       	or	r24, r25
    52c6:	e1 f6       	brne	.-72     	; 0x5280 <fputc+0x10>
    52c8:	d8 01       	movw	r26, r16
    52ca:	16 96       	adiw	r26, 0x06	; 6
    52cc:	8d 91       	ld	r24, X+
    52ce:	9c 91       	ld	r25, X
    52d0:	17 97       	sbiw	r26, 0x07	; 7
    52d2:	01 96       	adiw	r24, 0x01	; 1
    52d4:	17 96       	adiw	r26, 0x07	; 7
    52d6:	9c 93       	st	X, r25
    52d8:	8e 93       	st	-X, r24
    52da:	16 97       	sbiw	r26, 0x06	; 6
    52dc:	ce 01       	movw	r24, r28
    52de:	df 91       	pop	r29
    52e0:	cf 91       	pop	r28
    52e2:	1f 91       	pop	r17
    52e4:	0f 91       	pop	r16
    52e6:	08 95       	ret

000052e8 <__ultoa_invert>:
    52e8:	fa 01       	movw	r30, r20
    52ea:	aa 27       	eor	r26, r26
    52ec:	28 30       	cpi	r18, 0x08	; 8
    52ee:	51 f1       	breq	.+84     	; 0x5344 <__ultoa_invert+0x5c>
    52f0:	20 31       	cpi	r18, 0x10	; 16
    52f2:	81 f1       	breq	.+96     	; 0x5354 <__ultoa_invert+0x6c>
    52f4:	e8 94       	clt
    52f6:	6f 93       	push	r22
    52f8:	6e 7f       	andi	r22, 0xFE	; 254
    52fa:	6e 5f       	subi	r22, 0xFE	; 254
    52fc:	7f 4f       	sbci	r23, 0xFF	; 255
    52fe:	8f 4f       	sbci	r24, 0xFF	; 255
    5300:	9f 4f       	sbci	r25, 0xFF	; 255
    5302:	af 4f       	sbci	r26, 0xFF	; 255
    5304:	b1 e0       	ldi	r27, 0x01	; 1
    5306:	3e d0       	rcall	.+124    	; 0x5384 <__ultoa_invert+0x9c>
    5308:	b4 e0       	ldi	r27, 0x04	; 4
    530a:	3c d0       	rcall	.+120    	; 0x5384 <__ultoa_invert+0x9c>
    530c:	67 0f       	add	r22, r23
    530e:	78 1f       	adc	r23, r24
    5310:	89 1f       	adc	r24, r25
    5312:	9a 1f       	adc	r25, r26
    5314:	a1 1d       	adc	r26, r1
    5316:	68 0f       	add	r22, r24
    5318:	79 1f       	adc	r23, r25
    531a:	8a 1f       	adc	r24, r26
    531c:	91 1d       	adc	r25, r1
    531e:	a1 1d       	adc	r26, r1
    5320:	6a 0f       	add	r22, r26
    5322:	71 1d       	adc	r23, r1
    5324:	81 1d       	adc	r24, r1
    5326:	91 1d       	adc	r25, r1
    5328:	a1 1d       	adc	r26, r1
    532a:	20 d0       	rcall	.+64     	; 0x536c <__ultoa_invert+0x84>
    532c:	09 f4       	brne	.+2      	; 0x5330 <__ultoa_invert+0x48>
    532e:	68 94       	set
    5330:	3f 91       	pop	r19
    5332:	2a e0       	ldi	r18, 0x0A	; 10
    5334:	26 9f       	mul	r18, r22
    5336:	11 24       	eor	r1, r1
    5338:	30 19       	sub	r19, r0
    533a:	30 5d       	subi	r19, 0xD0	; 208
    533c:	31 93       	st	Z+, r19
    533e:	de f6       	brtc	.-74     	; 0x52f6 <__ultoa_invert+0xe>
    5340:	cf 01       	movw	r24, r30
    5342:	08 95       	ret
    5344:	46 2f       	mov	r20, r22
    5346:	47 70       	andi	r20, 0x07	; 7
    5348:	40 5d       	subi	r20, 0xD0	; 208
    534a:	41 93       	st	Z+, r20
    534c:	b3 e0       	ldi	r27, 0x03	; 3
    534e:	0f d0       	rcall	.+30     	; 0x536e <__ultoa_invert+0x86>
    5350:	c9 f7       	brne	.-14     	; 0x5344 <__ultoa_invert+0x5c>
    5352:	f6 cf       	rjmp	.-20     	; 0x5340 <__ultoa_invert+0x58>
    5354:	46 2f       	mov	r20, r22
    5356:	4f 70       	andi	r20, 0x0F	; 15
    5358:	40 5d       	subi	r20, 0xD0	; 208
    535a:	4a 33       	cpi	r20, 0x3A	; 58
    535c:	18 f0       	brcs	.+6      	; 0x5364 <__ultoa_invert+0x7c>
    535e:	49 5d       	subi	r20, 0xD9	; 217
    5360:	31 fd       	sbrc	r19, 1
    5362:	40 52       	subi	r20, 0x20	; 32
    5364:	41 93       	st	Z+, r20
    5366:	02 d0       	rcall	.+4      	; 0x536c <__ultoa_invert+0x84>
    5368:	a9 f7       	brne	.-22     	; 0x5354 <__ultoa_invert+0x6c>
    536a:	ea cf       	rjmp	.-44     	; 0x5340 <__ultoa_invert+0x58>
    536c:	b4 e0       	ldi	r27, 0x04	; 4
    536e:	a6 95       	lsr	r26
    5370:	97 95       	ror	r25
    5372:	87 95       	ror	r24
    5374:	77 95       	ror	r23
    5376:	67 95       	ror	r22
    5378:	ba 95       	dec	r27
    537a:	c9 f7       	brne	.-14     	; 0x536e <__ultoa_invert+0x86>
    537c:	00 97       	sbiw	r24, 0x00	; 0
    537e:	61 05       	cpc	r22, r1
    5380:	71 05       	cpc	r23, r1
    5382:	08 95       	ret
    5384:	9b 01       	movw	r18, r22
    5386:	ac 01       	movw	r20, r24
    5388:	0a 2e       	mov	r0, r26
    538a:	06 94       	lsr	r0
    538c:	57 95       	ror	r21
    538e:	47 95       	ror	r20
    5390:	37 95       	ror	r19
    5392:	27 95       	ror	r18
    5394:	ba 95       	dec	r27
    5396:	c9 f7       	brne	.-14     	; 0x538a <__ultoa_invert+0xa2>
    5398:	62 0f       	add	r22, r18
    539a:	73 1f       	adc	r23, r19
    539c:	84 1f       	adc	r24, r20
    539e:	95 1f       	adc	r25, r21
    53a0:	a0 1d       	adc	r26, r0
    53a2:	08 95       	ret

000053a4 <__prologue_saves__>:
    53a4:	2f 92       	push	r2
    53a6:	3f 92       	push	r3
    53a8:	4f 92       	push	r4
    53aa:	5f 92       	push	r5
    53ac:	6f 92       	push	r6
    53ae:	7f 92       	push	r7
    53b0:	8f 92       	push	r8
    53b2:	9f 92       	push	r9
    53b4:	af 92       	push	r10
    53b6:	bf 92       	push	r11
    53b8:	cf 92       	push	r12
    53ba:	df 92       	push	r13
    53bc:	ef 92       	push	r14
    53be:	ff 92       	push	r15
    53c0:	0f 93       	push	r16
    53c2:	1f 93       	push	r17
    53c4:	cf 93       	push	r28
    53c6:	df 93       	push	r29
    53c8:	cd b7       	in	r28, 0x3d	; 61
    53ca:	de b7       	in	r29, 0x3e	; 62
    53cc:	ca 1b       	sub	r28, r26
    53ce:	db 0b       	sbc	r29, r27
    53d0:	0f b6       	in	r0, 0x3f	; 63
    53d2:	f8 94       	cli
    53d4:	de bf       	out	0x3e, r29	; 62
    53d6:	0f be       	out	0x3f, r0	; 63
    53d8:	cd bf       	out	0x3d, r28	; 61
    53da:	09 94       	ijmp

000053dc <__epilogue_restores__>:
    53dc:	2a 88       	ldd	r2, Y+18	; 0x12
    53de:	39 88       	ldd	r3, Y+17	; 0x11
    53e0:	48 88       	ldd	r4, Y+16	; 0x10
    53e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    53e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    53e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    53e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    53ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    53ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    53ee:	b9 84       	ldd	r11, Y+9	; 0x09
    53f0:	c8 84       	ldd	r12, Y+8	; 0x08
    53f2:	df 80       	ldd	r13, Y+7	; 0x07
    53f4:	ee 80       	ldd	r14, Y+6	; 0x06
    53f6:	fd 80       	ldd	r15, Y+5	; 0x05
    53f8:	0c 81       	ldd	r16, Y+4	; 0x04
    53fa:	1b 81       	ldd	r17, Y+3	; 0x03
    53fc:	aa 81       	ldd	r26, Y+2	; 0x02
    53fe:	b9 81       	ldd	r27, Y+1	; 0x01
    5400:	ce 0f       	add	r28, r30
    5402:	d1 1d       	adc	r29, r1
    5404:	0f b6       	in	r0, 0x3f	; 63
    5406:	f8 94       	cli
    5408:	de bf       	out	0x3e, r29	; 62
    540a:	0f be       	out	0x3f, r0	; 63
    540c:	cd bf       	out	0x3d, r28	; 61
    540e:	ed 01       	movw	r28, r26
    5410:	08 95       	ret

00005412 <_exit>:
    5412:	f8 94       	cli

00005414 <__stop_program>:
    5414:	ff cf       	rjmp	.-2      	; 0x5414 <__stop_program>
